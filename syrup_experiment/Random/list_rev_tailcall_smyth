([2],[3,2,1]) -> [2,3,2,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_tailcall = \xs -> \acc -> Cons (2, acc) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00552999999991 false false

([0],[0,1,1]) -> [0,0,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_tailcall = \xs -> \acc -> Cons (0, acc) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00519899999995 false false

([0,3,1],[]) -> [1,3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_tailcall = \xs -> \acc -> [1, 3, 0] in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00546899999995 false false

([0,3],[2,1,3]) -> [3,0,2,1,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_tailcall = \xs -> \acc -> Cons (3, Cons (0, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.010055 false false

([2,2,2],[3]) -> [2,2,2,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_tailcall = \xs -> \acc -> Cons (2, Cons (2, Cons (2, acc))) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00990900000011 false false

([],[]) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_tailcall = \xs -> \acc -> [] in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00830900000005 false false

([],[1,1]) -> [1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_tailcall = \xs -> \acc -> acc in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0055440000001 false false

([0],[2,0]) -> [0,2,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_tailcall = \xs -> \acc -> Cons (0, acc) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00681099999997 false false

([2,1,3],[3,2]) -> [3,1,2,3,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_tailcall = \xs -> \acc -> Cons (3, Cons (1, Cons (2, acc))) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0091930000001 false false

([3,3],[0,2]) -> [3,3,0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_tailcall = \xs -> \acc -> Cons (3, Cons (3, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0054439999999 false false

([1],[]) -> [1];
([2,1],[0]) -> [1,2,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      [1]

    Cons y1 -> 
      Cons (1, Cons (2, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00843699999996 false false

([2,1,3],[]) -> [3,1,2];
([1,1],[0,3,1]) -> [1,1,0,3,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      [3, 1, 2]

    Cons y1 -> 
      Cons (1, Cons (1, Cons (0, #2.2 y1))) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.013316 false false

([0,2],[1,2,1]) -> [2,0,1,2,1];
([],[0]) -> [0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      Cons (2, Cons (0, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0278940000001 false false

([0],[0,2]) -> [0,0,2];
([],[2,1]) -> [2,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      [0, 0, 2] in list_rev_tailcall) : NatList -> NatList -> NatList)
0.020462 false false

([3,1,0],[2,0,0]) -> [0,1,3,2,0,0];
([3],[0]) -> [3,0];

=================================
NOSOL

([2,0,2],[1,2,0]) -> [2,0,2,1,2,0];
([3,1,2],[]) -> [2,1,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      [2, 1, 3]

    Cons y1 -> 
      Cons
        ( 2
        , Cons (0, Cons (S (#2.1 y1), acc))
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0249209999999 false false

([3,2],[2,1]) -> [2,3,2,1];
([1,1,3],[0,2]) -> [3,1,1,0,2];

=================================
NOSOL

([2,2,2],[0,2]) -> [2,2,2,0,2];
([],[1,1,1]) -> [1,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      [1, 1, 1]

    Cons y1 -> 
      Cons
        ( 2
        , Cons (#2.1 y1, Cons (#2.1 y1, acc))
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0329139999999 false false

([1,3],[]) -> [3,1];
([2,2],[1,1]) -> [2,2,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      [3, 1]

    Cons y1 -> 
      Cons (2, Cons (S (#2.1 y1), acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.017527 false false

([3],[1,0]) -> [3,1,0];
([0,1,1],[]) -> [1,1,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> Cons
    (case acc of
      Nil y1 -> 
        (1, [1, 0])

      Cons y1 -> 
        (S (S (#2.1 y1)), acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0159799999999 false false

([0],[3,3,1]) -> [0,3,3,1];
([0,1],[0,3,2]) -> [1,0,0,3,2];
([],[3]) -> [3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00701000000004 true true

([1,2],[]) -> [2,1];
([0,2,2],[1,1,2]) -> [2,2,0,1,1,2];
([1],[]) -> [1];

=================================
NOSOL

([3,0],[3,2]) -> [0,3,3,2];
([3,2,3],[]) -> [3,2,3];
([3],[1,3]) -> [3,1,3];

=================================
NOSOL

([1,0,1],[]) -> [1,0,1];
([0,1,2],[3]) -> [2,1,0,3];
([2,3,1],[0,3,3]) -> [1,3,2,0,3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      [1, 0, 1]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [2, 1, 0, #2.1 y1]

        Cons y2 -> 
          Cons
            ( 1
            , Cons
                ( 3
                , Cons
                    ( 2
                    , Cons (0, Cons (#2.1 y2, #2.2 y2))
                    )
                )
            ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.039788 false false

([0],[2,1]) -> [0,2,1];
([2,3],[3]) -> [3,2,3];
([2,3],[3,1]) -> [3,2,3,1];

=================================
NOSOL

([0,3],[0,1]) -> [3,0,0,1];
([0,1,3],[2,2]) -> [3,1,0,2,2];
([1,2,2],[2]) -> [2,2,1,2];

=================================
NOSOL

([3,0,2],[2,3]) -> [2,0,3,2,3];
([2],[]) -> [2];
([0],[]) -> [0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      xs

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , Cons (0, Cons (S (#2.1 y1), acc))
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.019796 false false

([2,1],[0]) -> [1,2,0];
([3,2,0],[]) -> [0,2,3];
([],[]) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0112750000001 true true

([0,2,2],[1,1,0]) -> [2,2,0,1,1,0];
([3],[]) -> [3];
([],[]) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0369330000001 true true

([0,3],[1]) -> [3,0,1];
([],[3,3]) -> [3,3];
([1,0],[1,0,0]) -> [0,1,1,0,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00873700000011 true true

([1,0],[1,0,2]) -> [0,1,1,0,2];
([0],[2,2,3]) -> [0,2,2,3];
([1,3],[3]) -> [3,1,3];
([],[0,2]) -> [0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0110219999999 true true

([1],[]) -> [1];
([0,3,0],[]) -> [0,3,0];
([0,3],[]) -> [3,0];
([2],[2,3,2]) -> [2,2,3,2];

=================================
NOSOL

([3,1],[1,3]) -> [1,3,1,3];
([0],[1]) -> [0,1];
([2,3],[0,2,3]) -> [3,2,0,2,3];
([1,1,1],[]) -> [1,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      [1, 1, 1]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0, 1]

        Cons y2 -> 
          case #2.2 y2 of
            Nil y3 -> 
              [1, 3, 1, S (S (#2.1 y1))]

            Cons y3 -> 
              [3, 2, 0, 2, #2.1 y3] in list_rev_tailcall) : NatList -> NatList -> NatList)
0.09176 false false

([1,0],[]) -> [0,1];
([2,1],[]) -> [1,2];
([0,2,0],[2,1]) -> [0,2,0,2,1];
([0,2,2],[0,3,1]) -> [2,2,0,0,3,1];

=================================
NOSOL

([1],[2]) -> [1,2];
([1,2],[]) -> [2,1];
([],[3]) -> [3];
([1,2,1],[0,1]) -> [1,2,1,0,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.01989 true true

([],[0,3,1]) -> [0,3,1];
([],[1]) -> [1];
([3,2,2],[3,3,0]) -> [2,2,3,3,3,0];
([2,1],[1]) -> [1,2,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00886999999989 true true

([3],[0,3]) -> [3,0,3];
([0],[1]) -> [0,1];
([1],[0,2,3]) -> [1,0,2,3];
([2,1,0],[1,3]) -> [0,1,2,1,3];

=================================
NOSOL

([2,0,3],[1,0,0]) -> [3,0,2,1,0,0];
([1,1,0],[3]) -> [0,1,1,3];
([0,1,3],[2,3]) -> [3,1,0,2,3];
([],[0,3,2]) -> [0,3,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0129380000001 true true

([],[]) -> [];
([2,2,1],[2,0,3]) -> [1,2,2,2,0,3];
([0,1,3],[3]) -> [3,1,0,3];
([2,0,0],[2,3,0]) -> [0,0,2,2,3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00818600000002 true true

([3,0],[]) -> [0,3];
([0],[0]) -> [0,0];
([],[]) -> [];
([3],[1,0]) -> [3,1,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00673899999992 true true

([2],[1,1]) -> [2,1,1];
([],[]) -> [];
([0],[1,0]) -> [0,1,0];
([],[0]) -> [0];
([2,0],[]) -> [0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0103779999999 true true

([0,2,3],[2,2,1]) -> [3,2,0,2,2,1];
([3],[0]) -> [3,0];
([3,0],[2]) -> [0,3,2];
([2,0],[0,1,3]) -> [0,2,0,1,3];
([0],[0,3,0]) -> [0,0,3,0];

=================================
NOSOL

([],[2]) -> [2];
([1,0,0],[0,2,3]) -> [0,0,1,0,2,3];
([1],[]) -> [1];
([1,3],[1,2,1]) -> [3,1,1,2,1];
([0],[1,0,2]) -> [0,1,0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.017075 true true

([3,1,0],[]) -> [0,1,3];
([3],[1]) -> [3,1];
([1],[3,3,3]) -> [1,3,3,3];
([],[3]) -> [3];
([0],[]) -> [0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0153640000001 true true

([0,3],[]) -> [3,0];
([],[0,1,0]) -> [0,1,0];
([2],[3,1,1]) -> [2,3,1,1];
([3,1],[]) -> [1,3];
([0],[3,1,2]) -> [0,3,1,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0166039999999 true true

([1,0,1],[3,0,1]) -> [1,0,1,3,0,1];
([3,3],[0,2,3]) -> [3,3,0,2,3];
([0,0,1],[3,0,0]) -> [1,0,0,3,0,0];
([1],[2,1,2]) -> [1,2,1,2];
([],[]) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.01875 true true

([2,2,0],[2,3]) -> [0,2,2,2,3];
([3,0],[1,1]) -> [0,3,1,1];
([2,1,2],[1]) -> [2,1,2,1];
([3],[0]) -> [3,0];
([],[0]) -> [0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0220810000001 true true

([3],[2,3,2]) -> [3,2,3,2];
([0,2],[1,0]) -> [2,0,1,0];
([2,0],[]) -> [0,2];
([2,2],[0,1,1]) -> [2,2,0,1,1];
([],[1,3]) -> [1,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.018493 true true

([],[0]) -> [0];
([3,3],[]) -> [3,3];
([],[1,1]) -> [1,1];
([3,0,3],[]) -> [3,0,3];
([],[1,1,0]) -> [1,1,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      xs

    Cons y1 -> 
      acc in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_rev_tailcall (#2.2 y1) acc
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0127520000001 false false

([1],[3,2,3]) -> [1,3,2,3];
([],[1,3]) -> [1,3];
([2,3],[3,2,3]) -> [3,2,3,2,3];
([1,1,1],[2]) -> [1,1,1,2];
([1],[]) -> [1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.020972 true true

([3],[]) -> [3];
([2],[]) -> [2];
([1,1,1],[1,0]) -> [1,1,1,1,0];
([3,2,1],[2,2]) -> [1,2,3,2,2];
([2,2,3],[]) -> [3,2,2];
([1],[3]) -> [1,3];

=================================
NOSOL

([],[]) -> [];
([2],[]) -> [2];
([0],[2,2,2]) -> [0,2,2,2];
([0],[0]) -> [0,0];
([1],[2,1,2]) -> [1,2,1,2];
([],[2,3,3]) -> [2,3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons (#2.1 y1, acc) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_rev_tailcall (#2.2 y1) acc
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00862099999995 false false

([0],[]) -> [0];
([],[1,1]) -> [1,1];
([0,0],[2,2,0]) -> [0,0,2,2,0];
([3],[1,3]) -> [3,1,3];
([],[2,3]) -> [2,3];
([2,1,1],[3]) -> [1,1,2,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.011853 true true

([3,2,0],[]) -> [0,2,3];
([2,0,1],[2,1,1]) -> [1,0,2,2,1,1];
([],[]) -> [];
([1,0],[]) -> [0,1];
([1,2],[1,1]) -> [2,1,1,1];
([],[1,2]) -> [1,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0086960000001 true true

([3],[2]) -> [3,2];
([2,3,2],[1]) -> [2,3,2,1];
([],[1]) -> [1];
([2],[0,3,2]) -> [2,0,3,2];
([0,1,2],[3,1]) -> [2,1,0,3,1];
([2,2],[]) -> [2,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0297370000001 true true

([],[1]) -> [1];
([1,3,3],[3,3]) -> [3,3,1,3,3];
([0,0],[]) -> [0,0];
([],[0,1]) -> [0,1];
([3,0,3],[1]) -> [3,0,3,1];
([3],[0,3,3]) -> [3,0,3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0143909999999 true true

([0],[2,1]) -> [0,2,1];
([0],[]) -> [0];
([1],[2,1,2]) -> [1,2,1,2];
([],[0,0]) -> [0,0];
([],[0]) -> [0];
([1,0,3],[1,1]) -> [3,0,1,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.014698 true true

([0],[1]) -> [0,1];
([3,2],[]) -> [2,3];
([3,1],[3]) -> [1,3,3];
([1],[0]) -> [1,0];
([],[0,2,2]) -> [0,2,2];
([2,3,3],[]) -> [3,3,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.015909 true true

([3,3,2],[2,2]) -> [2,3,3,2,2];
([2,1,3],[1,0]) -> [3,1,2,1,0];
([1],[2]) -> [1,2];
([0,1,3],[3,0,3]) -> [3,1,0,3,0,3];
([],[3]) -> [3];
([1,2],[1,3]) -> [2,1,1,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0177839999999 true true

([1],[]) -> [1];
([2],[2]) -> [2,2];
([3,0,1],[]) -> [1,0,3];
([1,0,0],[3,0,2]) -> [0,0,1,3,0,2];
([],[0]) -> [0];
([3,1],[3,0]) -> [1,3,3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0155999999999 true true

([0,0],[2,2,0]) -> [0,0,2,2,0];
([],[2,2]) -> [2,2];
([],[3]) -> [3];
([0,0,0],[3,2]) -> [0,0,0,3,2];
([1,3,1],[]) -> [1,3,1];
([2,3,3],[0]) -> [3,3,2,0];
([0],[0]) -> [0,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.019088 true true

([1,3,0],[2]) -> [0,3,1,2];
([],[]) -> [];
([2,2,3],[]) -> [3,2,2];
([1],[1,2,3]) -> [1,1,2,3];
([1,2,3],[1,1,1]) -> [3,2,1,1,1,1];
([3],[]) -> [3];
([0,3,0],[1,1,0]) -> [0,3,0,1,1,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00965700000006 true true

([],[]) -> [];
([1],[]) -> [1];
([3,2],[1,3]) -> [2,3,1,3];
([1],[2,2,2]) -> [1,2,2,2];
([],[2]) -> [2];
([0],[0,1]) -> [0,0,1];
([1,2],[2]) -> [2,1,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00848399999995 true true

([1],[1]) -> [1,1];
([],[0,1,0]) -> [0,1,0];
([2,0],[2,1]) -> [0,2,2,1];
([0,2],[0]) -> [2,0,0];
([0,1],[3,2]) -> [1,0,3,2];
([3,1,2],[]) -> [2,1,3];
([],[3,3,1]) -> [3,3,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.01397 true true

([3],[0]) -> [3,0];
([3,1,3],[]) -> [3,1,3];
([1,1],[2,1,2]) -> [1,1,2,1,2];
([0,2],[0,3,2]) -> [2,0,0,3,2];
([2,2,1],[3,2]) -> [1,2,2,3,2];
([],[0,1]) -> [0,1];
([2],[0]) -> [2,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.02169 true true

([0,0],[3,2,2]) -> [0,0,3,2,2];
([1,1],[]) -> [1,1];
([2,3,0],[]) -> [0,3,2];
([],[2]) -> [2];
([],[]) -> [];
([0,3],[2,0,0]) -> [3,0,2,0,0];
([3,0],[0]) -> [0,3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0129710000001 true true

([1,0,0],[0,2,0]) -> [0,0,1,0,2,0];
([3,0,2],[2,2]) -> [2,0,3,2,2];
([0],[]) -> [0];
([0,1],[]) -> [1,0];
([1,0],[1,0]) -> [0,1,1,0];
([3,0,1],[3]) -> [1,0,3,3];
([3,0],[0]) -> [0,3,0];

=================================
NOSOL

([],[2,3]) -> [2,3];
([1,0,1],[0,1,2]) -> [1,0,1,0,1,2];
([],[]) -> [];
([1,1],[]) -> [1,1];
([2,3,0],[2]) -> [0,3,2,2];
([],[0,1,2]) -> [0,1,2];
([0],[1]) -> [0,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.012381 true true

([1,1],[]) -> [1,1];
([],[2]) -> [2];
([1,0],[0,1,1]) -> [0,1,0,1,1];
([0,0,3],[1,3,0]) -> [3,0,0,1,3,0];
([3,0],[3,2,2]) -> [0,3,3,2,2];
([1,2,2],[0,0]) -> [2,2,1,0,0];
([2,3,2],[3,2,1]) -> [2,3,2,3,2,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.010634 true true

([3,2,3],[0,3]) -> [3,2,3,0,3];
([0,0],[0]) -> [0,0,0];
([1],[0,0,2]) -> [1,0,0,2];
([],[3,2]) -> [3,2];
([0,1,2],[]) -> [2,1,0];
([0,2],[2]) -> [2,0,2];
([2,2],[]) -> [2,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00982799999997 true true

([1,1,1],[2]) -> [1,1,1,2];
([1,2],[2]) -> [2,1,2];
([2,1],[]) -> [1,2];
([3,2],[]) -> [2,3];
([0,3,2],[3,1]) -> [2,3,0,3,1];
([3],[2,1]) -> [3,2,1];
([2],[1,3]) -> [2,1,3];
([3,1,1],[3,2]) -> [1,1,3,3,2];

=================================
NOSOL

([2,3,0],[0,0]) -> [0,3,2,0,0];
([1],[0]) -> [1,0];
([],[0,0]) -> [0,0];
([0],[1,1]) -> [0,1,1];
([3],[]) -> [3];
([],[1,2]) -> [1,2];
([1,3],[3,1]) -> [3,1,3,1];
([],[1]) -> [1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.018356 true true

([],[2,0,1]) -> [2,0,1];
([0,0,0],[2,1]) -> [0,0,0,2,1];
([],[3]) -> [3];
([1],[3]) -> [1,3];
([3,1],[]) -> [1,3];
([0],[2]) -> [0,2];
([],[0,3,2]) -> [0,3,2];
([],[3,3,1]) -> [3,3,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.017382 true true

([1,0],[0,1,2]) -> [0,1,0,1,2];
([0,1],[3]) -> [1,0,3];
([3,0,1],[2]) -> [1,0,3,2];
([1,1,3],[1,1]) -> [3,1,1,1,1];
([1],[1,3,3]) -> [1,1,3,3];
([0],[3]) -> [0,3];
([3,1],[3,2]) -> [1,3,3,2];
([],[3,3]) -> [3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.011403 true true

([1,2,2],[2]) -> [2,2,1,2];
([0,0],[2]) -> [0,0,2];
([],[2]) -> [2];
([0,1,1],[]) -> [1,1,0];
([],[]) -> [];
([2,0,0],[1,2,1]) -> [0,0,2,1,2,1];
([3,3,3],[]) -> [3,3,3];
([],[2,2,0]) -> [2,2,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.012146 true true

([],[3,3,3]) -> [3,3,3];
([3],[2,3,1]) -> [3,2,3,1];
([],[2,3]) -> [2,3];
([],[2]) -> [2];
([],[0,1]) -> [0,1];
([3,2],[0]) -> [2,3,0];
([1],[1,0]) -> [1,1,0];
([3],[0,0]) -> [3,0,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0103180000001 true true

([0],[]) -> [0];
([0],[2,1,1]) -> [0,2,1,1];
([2,2],[3,0,3]) -> [2,2,3,0,3];
([],[2,0,3]) -> [2,0,3];
([3],[3]) -> [3,3];
([],[2]) -> [2];
([],[3,2]) -> [3,2];
([1],[]) -> [1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_rev_tailcall (#2.2 y1) acc
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_rev_tailcall (#2.2 y1) acc
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.010434 false false

([0,0],[3,2]) -> [0,0,3,2];
([],[2]) -> [2];
([3,0],[3,0]) -> [0,3,3,0];
([3],[3,1]) -> [3,3,1];
([2,0,2],[3,1]) -> [2,0,2,3,1];
([2],[0,1,0]) -> [2,0,1,0];
([2],[1,0]) -> [2,1,0];
([],[]) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0092259999999 true true

([2],[2,0,2]) -> [2,2,0,2];
([],[1,0,1]) -> [1,0,1];
([],[]) -> [];
([1,3],[]) -> [3,1];
([0,2],[0]) -> [2,0,0];
([2],[3,3,3]) -> [2,3,3,3];
([0],[1]) -> [0,1];
([],[2]) -> [2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00872600000002 true true

([],[2]) -> [2];
([],[3,1]) -> [3,1];
([0],[3]) -> [0,3];
([1,2],[1]) -> [2,1,1];
([3,0,1],[1]) -> [1,0,3,1];
([3],[3,3]) -> [3,3,3];
([],[2,3]) -> [2,3];
([2],[0,0]) -> [2,0,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00765500000011 true true

([3,0],[]) -> [0,3];
([3,3,1],[]) -> [1,3,3];
([2,3,0],[]) -> [0,3,2];
([3,3],[]) -> [3,3];
([1,0,1],[3]) -> [1,0,1,3];
([2,1],[]) -> [1,2];
([1],[2,2,2]) -> [1,2,2,2];
([],[1,1]) -> [1,1];
([3,2],[2,1,2]) -> [2,3,2,1,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0191130000001 true true

([3,3,1],[2]) -> [1,3,3,2];
([],[3,1]) -> [3,1];
([],[3,1,2]) -> [3,1,2];
([],[0]) -> [0];
([1,0],[0,3]) -> [0,1,0,3];
([1],[3,2]) -> [1,3,2];
([3,0],[1,0]) -> [0,3,1,0];
([0,1],[3,2,0]) -> [1,0,3,2,0];
([0,0],[0]) -> [0,0,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.014023 true true

([2],[]) -> [2];
([0],[]) -> [0];
([3,2],[3,0,1]) -> [2,3,3,0,1];
([3,1,2],[3,3]) -> [2,1,3,3,3];
([1],[3,2]) -> [1,3,2];
([],[1,3]) -> [1,3];
([0],[3,1]) -> [0,3,1];
([1],[]) -> [1];
([2,2,1],[3,3]) -> [1,2,2,3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0113879999999 true true

([0],[1,3]) -> [0,1,3];
([0,2],[2]) -> [2,0,2];
([2,1,1],[0,2,3]) -> [1,1,2,0,2,3];
([1,1],[0,3]) -> [1,1,0,3];
([3],[3,0,3]) -> [3,3,0,3];
([2],[]) -> [2];
([],[1]) -> [1];
([],[0,1,1]) -> [0,1,1];
([3,3],[1]) -> [3,3,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.01133 true true

([0,0,2],[1]) -> [2,0,0,1];
([3,0],[3,0,1]) -> [0,3,3,0,1];
([1,1],[2,1]) -> [1,1,2,1];
([],[0]) -> [0];
([0,2],[1,2]) -> [2,0,1,2];
([1,2,2],[2,2]) -> [2,2,1,2,2];
([3],[]) -> [3];
([3,2,1],[2,3]) -> [1,2,3,2,3];
([],[]) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.015699 true true

([3,3],[0,1,3]) -> [3,3,0,1,3];
([],[3,2]) -> [3,2];
([2,1],[2,1,0]) -> [1,2,2,1,0];
([],[3]) -> [3];
([0],[]) -> [0];
([],[3,0,2]) -> [3,0,2];
([1,2,2],[2,3,0]) -> [2,2,1,2,3,0];
([3,0,1],[1,0]) -> [1,0,3,1,0];
([],[0,3,0]) -> [0,3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.012103 true true

([3,1],[1]) -> [1,3,1];
([1,2,3],[1]) -> [3,2,1,1];
([3],[2]) -> [3,2];
([],[3,2]) -> [3,2];
([0,0,3],[]) -> [3,0,0];
([],[2]) -> [2];
([1,3,3],[0]) -> [3,3,1,0];
([3,0],[0,0]) -> [0,3,0,0];
([1,0,1],[]) -> [1,0,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.015165 true true

([2],[2]) -> [2,2];
([],[1,3]) -> [1,3];
([],[3]) -> [3];
([2,3],[3,0]) -> [3,2,3,0];
([],[]) -> [];
([2,2,3],[0]) -> [3,2,2,0];
([],[0,2,2]) -> [0,2,2];
([3,3],[1]) -> [3,3,1];
([],[0]) -> [0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0251559999999 true true

([3,0,3],[1,0]) -> [3,0,3,1,0];
([],[]) -> [];
([2,2],[3,3,1]) -> [2,2,3,3,1];
([0,3,1],[0,3,2]) -> [1,3,0,0,3,2];
([0,1,3],[2,1]) -> [3,1,0,2,1];
([1,2,0],[]) -> [0,2,1];
([3,0],[0]) -> [0,3,0];
([0,2],[3,3,2]) -> [2,0,3,3,2];
([0],[]) -> [0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0182689999999 true true

([],[1]) -> [1];
([3],[2,2,3]) -> [3,2,2,3];
([3],[1,1]) -> [3,1,1];
([3,0,3],[3,1]) -> [3,0,3,3,1];
([3],[0,2,3]) -> [3,0,2,3];
([],[]) -> [];
([3,0],[3]) -> [0,3,3];
([],[1,0,2]) -> [1,0,2];
([0,0],[]) -> [0,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0156899999999 true true

([3],[0]) -> [3,0];
([3],[1,0]) -> [3,1,0];
([],[]) -> [];
([3,0],[]) -> [0,3];
([],[1,3,1]) -> [1,3,1];
([1],[2]) -> [1,2];
([1,3,0],[2]) -> [0,3,1,2];
([1],[1,1]) -> [1,1,1];
([2],[3]) -> [2,3];
([2],[0,1,2]) -> [2,0,1,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.015517 true true

([0,0],[]) -> [0,0];
([1,0,2],[2,0,0]) -> [2,0,1,2,0,0];
([],[]) -> [];
([],[1,2,2]) -> [1,2,2];
([2],[0]) -> [2,0];
([],[2]) -> [2];
([0,0],[0]) -> [0,0,0];
([1,3,2],[0,2,0]) -> [2,3,1,0,2,0];
([3,0],[1]) -> [0,3,1];
([3],[]) -> [3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00916899999993 true true

([3,1,3],[1,0]) -> [3,1,3,1,0];
([1,3,1],[]) -> [1,3,1];
([2,3],[2,2,2]) -> [3,2,2,2,2];
([3,2,2],[3,2,0]) -> [2,2,3,3,2,0];
([0],[1,0]) -> [0,1,0];
([3,2,2],[0,1,3]) -> [2,2,3,0,1,3];
([],[0,3,1]) -> [0,3,1];
([1],[0,2,2]) -> [1,0,2,2];
([2],[0]) -> [2,0];
([3,0],[]) -> [0,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0190869999999 true true

([],[3,0]) -> [3,0];
([],[0,3]) -> [0,3];
([0,1,3],[0,0,3]) -> [3,1,0,0,0,3];
([3,2,1],[]) -> [1,2,3];
([1],[3,2,0]) -> [1,3,2,0];
([],[1]) -> [1];
([0,1],[2]) -> [1,0,2];
([2,2,3],[0,3,2]) -> [3,2,2,0,3,2];
([2,2],[3,1,2]) -> [2,2,3,1,2];
([1,1],[1]) -> [1,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.022766 true true

([3,0],[]) -> [0,3];
([],[1]) -> [1];
([3,2],[3]) -> [2,3,3];
([0],[]) -> [0];
([3],[]) -> [3];
([3,1],[1,1,0]) -> [1,3,1,1,0];
([0],[1]) -> [0,1];
([],[1,0]) -> [1,0];
([3],[1,0,2]) -> [3,1,0,2];
([0,0],[2,1,2]) -> [0,0,2,1,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0192979999999 true true

([3,1,1],[0]) -> [1,1,3,0];
([],[2,0,1]) -> [2,0,1];
([],[3,1]) -> [3,1];
([],[]) -> [];
([],[3]) -> [3];
([0],[0]) -> [0,0];
([],[3,0,2]) -> [3,0,2];
([],[2,3]) -> [2,3];
([2,3,3],[]) -> [3,3,2];
([2,0,1],[3,1]) -> [1,0,2,3,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00800000000004 true true

([3,2,2],[0]) -> [2,2,3,0];
([],[2,0,1]) -> [2,0,1];
([],[2,2]) -> [2,2];
([1],[0,3]) -> [1,0,3];
([3,0],[1]) -> [0,3,1];
([1,1,0],[0]) -> [0,1,1,0];
([1,3],[2]) -> [3,1,2];
([0],[2,0]) -> [0,2,0];
([1,3],[2,3]) -> [3,1,2,3];
([1],[3]) -> [1,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0133949999999 true true

([],[1,3]) -> [1,3];
([3,0,2],[3,2]) -> [2,0,3,3,2];
([],[]) -> [];
([1],[]) -> [1];
([3,3,3],[3]) -> [3,3,3,3];
([3],[2,3,0]) -> [3,2,3,0];
([3,1],[2]) -> [1,3,2];
([],[1,1]) -> [1,1];
([1],[1]) -> [1,1];
([],[0]) -> [0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0119299999999 true true

([0,0,3],[1,2]) -> [3,0,0,1,2];
([2],[1]) -> [2,1];
([3,1],[1]) -> [1,3,1];
([2,3,1],[0]) -> [1,3,2,0];
([3,3],[]) -> [3,3];
([2],[3,1]) -> [2,3,1];
([3,2],[]) -> [2,3];
([1],[1,1,0]) -> [1,1,1,0];
([],[2,1,3]) -> [2,1,3];
([1,3,2],[]) -> [2,3,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.034048 true true

([2,3,2],[3]) -> [2,3,2,3];
([0,3,0],[0,0,3]) -> [0,3,0,0,0,3];
([1,2],[]) -> [2,1];
([0,3,0],[2,2,2]) -> [0,3,0,2,2,2];
([3,2,0],[2]) -> [0,2,3,2];
([2,1,3],[1]) -> [3,1,2,1];
([1,2,3],[]) -> [3,2,1];
([1,1,2],[2,3,1]) -> [2,1,1,2,3,1];
([2],[1,1,2]) -> [2,1,1,2];
([0,2],[1,0,1]) -> [2,0,1,0,1];

=================================
NOSOL

([],[1]) -> [1];
([1,0,0],[]) -> [0,0,1];
([1,1],[0,2]) -> [1,1,0,2];
([2,1,1],[2,0,3]) -> [1,1,2,2,0,3];
([],[2,3,3]) -> [2,3,3];
([1,3],[]) -> [3,1];
([],[]) -> [];
([0,0,2],[]) -> [2,0,0];
([1,0,1],[]) -> [1,0,1];
([3,0,1],[0,0,2]) -> [1,0,3,0,0,2];
([2],[3,3]) -> [2,3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0145050000001 true true

([2,2,1],[3,1]) -> [1,2,2,3,1];
([0,2,1],[1,3]) -> [1,2,0,1,3];
([2,0],[3,1,3]) -> [0,2,3,1,3];
([],[2]) -> [2];
([0],[2]) -> [0,2];
([1,1,2],[1]) -> [2,1,1,1];
([],[1,1]) -> [1,1];
([3,2],[1,2]) -> [2,3,1,2];
([],[3,0]) -> [3,0];
([1,2,3],[0,1]) -> [3,2,1,0,1];
([3,0],[0]) -> [0,3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0113449999999 true true

([0],[0]) -> [0,0];
([1,0,2],[1]) -> [2,0,1,1];
([],[2]) -> [2];
([1,2,3],[1]) -> [3,2,1,1];
([2,1,2],[2,1]) -> [2,1,2,2,1];
([],[3,1]) -> [3,1];
([3],[3,0,3]) -> [3,3,0,3];
([1,3],[]) -> [3,1];
([0,0],[3]) -> [0,0,3];
([],[]) -> [];
([3],[2,2,2]) -> [3,2,2,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0156770000001 true true

([],[3,1,2]) -> [3,1,2];
([0],[3]) -> [0,3];
([2],[]) -> [2];
([1,3,0],[3,0]) -> [0,3,1,3,0];
([2,2,1],[2,2,0]) -> [1,2,2,2,2,0];
([1,0,1],[3,1]) -> [1,0,1,3,1];
([],[1]) -> [1];
([3],[3,1,2]) -> [3,3,1,2];
([3,1,2],[1]) -> [2,1,3,1];
([2,3],[2,0,1]) -> [3,2,2,0,1];
([2,1],[3]) -> [1,2,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0112770000001 true true

([2],[0,2,3]) -> [2,0,2,3];
([],[2,2]) -> [2,2];
([1,3,2],[0,3]) -> [2,3,1,0,3];
([],[]) -> [];
([2,0],[0,0,0]) -> [0,2,0,0,0];
([1],[]) -> [1];
([0],[1,1]) -> [0,1,1];
([0,0,3],[1,1,1]) -> [3,0,0,1,1,1];
([1],[0]) -> [1,0];
([],[0]) -> [0];
([1,0],[0,1,1]) -> [0,1,0,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0158180000001 true true

([1,0],[0,1,2]) -> [0,1,0,1,2];
([2,2],[0,2,3]) -> [2,2,0,2,3];
([0],[3,0]) -> [0,3,0];
([0],[3,1,3]) -> [0,3,1,3];
([2],[2,0]) -> [2,2,0];
([2,3,2],[3,1,3]) -> [2,3,2,3,1,3];
([2,0,2],[1]) -> [2,0,2,1];
([],[]) -> [];
([0,1,0],[2,2]) -> [0,1,0,2,2];
([1,1,2],[]) -> [2,1,1];
([0],[2,0]) -> [0,2,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0144740000001 true true

([],[]) -> [];
([0],[2,1,3]) -> [0,2,1,3];
([0,2,3],[0,3]) -> [3,2,0,0,3];
([0],[]) -> [0];
([3],[3]) -> [3,3];
([0,0,3],[2]) -> [3,0,0,2];
([2,3,2],[2,3,2]) -> [2,3,2,2,3,2];
([2],[2]) -> [2,2];
([0,3,1],[2]) -> [1,3,0,2];
([1,0,1],[0]) -> [1,0,1,0];
([3,3],[]) -> [3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.011025 true true

([1,3,0],[2]) -> [0,3,1,2];
([3,1,1],[0,0]) -> [1,1,3,0,0];
([],[3]) -> [3];
([3],[2,1]) -> [3,2,1];
([],[3,0]) -> [3,0];
([3],[]) -> [3];
([3],[1,1]) -> [3,1,1];
([2,3,3],[0,1]) -> [3,3,2,0,1];
([3,1],[1]) -> [1,3,1];
([1],[]) -> [1];
([],[]) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.015148 true true

([1],[]) -> [1];
([3],[0]) -> [3,0];
([1],[3,2,2]) -> [1,3,2,2];
([],[0]) -> [0];
([1,1],[2,2]) -> [1,1,2,2];
([1,1],[1]) -> [1,1,1];
([1,1],[3,3,2]) -> [1,1,3,3,2];
([1,2],[]) -> [2,1];
([2,3,2],[0,3,3]) -> [2,3,2,0,3,3];
([2,3],[0,1,0]) -> [3,2,0,1,0];
([],[3,2]) -> [3,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0198370000001 true true

([1,0,1],[0,2]) -> [1,0,1,0,2];
([2,3,0],[]) -> [0,3,2];
([1,1,2],[2]) -> [2,1,1,2];
([3,0],[3,1]) -> [0,3,3,1];
([0],[3]) -> [0,3];
([1],[3,2]) -> [1,3,2];
([3,1],[2,1,2]) -> [1,3,2,1,2];
([0,3,0],[2]) -> [0,3,0,2];
([1],[0,1]) -> [1,0,1];
([1,1,2],[]) -> [2,1,1];
([],[2]) -> [2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.015083 true true

([2],[3]) -> [2,3];
([0],[1]) -> [0,1];
([1],[1]) -> [1,1];
([0,3],[0]) -> [3,0,0];
([],[0]) -> [0];
([],[0,3]) -> [0,3];
([2,0,1],[1]) -> [1,0,2,1];
([1],[2,0]) -> [1,2,0];
([2],[]) -> [2];
([],[1,2,2]) -> [1,2,2];
([],[1]) -> [1];
([0,2,0],[1,1]) -> [0,2,0,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0220409999999 true true

([3],[1,3]) -> [3,1,3];
([0,2],[1,1,0]) -> [2,0,1,1,0];
([0,3],[]) -> [3,0];
([0,1,2],[3,3,1]) -> [2,1,0,3,3,1];
([0,0],[2,2]) -> [0,0,2,2];
([0,3],[2,3]) -> [3,0,2,3];
([],[2,2]) -> [2,2];
([0],[3,1]) -> [0,3,1];
([3,2,0],[2,3,0]) -> [0,2,3,2,3,0];
([2],[2,2,2]) -> [2,2,2,2];
([2,0],[]) -> [0,2];
([1,1,2],[]) -> [2,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.01217 true true

([3,3,2],[3]) -> [2,3,3,3];
([2,2],[]) -> [2,2];
([3,1,1],[3]) -> [1,1,3,3];
([3,0],[1,0]) -> [0,3,1,0];
([2],[]) -> [2];
([],[2,2]) -> [2,2];
([2,1,0],[2,0]) -> [0,1,2,2,0];
([],[1]) -> [1];
([0,3,1],[3,2,3]) -> [1,3,0,3,2,3];
([3,2],[2,0,2]) -> [2,3,2,0,2];
([2,1],[1,1,3]) -> [1,2,1,1,3];
([2],[0,2,0]) -> [2,0,2,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.017298 true true

([2,2],[3,0]) -> [2,2,3,0];
([0,2],[]) -> [2,0];
([2],[3,3,1]) -> [2,3,3,1];
([0,1,2],[3,0]) -> [2,1,0,3,0];
([0,0],[0,3,3]) -> [0,0,0,3,3];
([3,3],[0]) -> [3,3,0];
([1,1,3],[0]) -> [3,1,1,0];
([1],[0,3,0]) -> [1,0,3,0];
([],[1]) -> [1];
([],[2]) -> [2];
([1],[2,3,1]) -> [1,2,3,1];
([],[3,0]) -> [3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.019982 true true

([3,3,1],[0]) -> [1,3,3,0];
([3],[1]) -> [3,1];
([1],[3,1]) -> [1,3,1];
([0,0,2],[1,1]) -> [2,0,0,1,1];
([],[]) -> [];
([1,3],[3,1]) -> [3,1,3,1];
([0,1,2],[1,1,3]) -> [2,1,0,1,1,3];
([0,1],[2,1]) -> [1,0,2,1];
([1,2],[3,1,0]) -> [2,1,3,1,0];
([2,2],[2]) -> [2,2,2];
([3,1,2],[2,0,1]) -> [2,1,3,2,0,1];
([],[3]) -> [3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.011479 true true

([1],[]) -> [1];
([],[]) -> [];
([0,3,3],[1,1,0]) -> [3,3,0,1,1,0];
([1,1,0],[0,2]) -> [0,1,1,0,2];
([],[0]) -> [0];
([3,3,2],[3,3]) -> [2,3,3,3,3];
([1,3,3],[3,2]) -> [3,3,1,3,2];
([3],[3,1,1]) -> [3,3,1,1];
([2,3],[1,0]) -> [3,2,1,0];
([3,3],[0]) -> [3,3,0];
([0],[]) -> [0];
([3,3,3],[3,0]) -> [3,3,3,3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00744699999996 true true

([],[0,0]) -> [0,0];
([0],[0,0]) -> [0,0,0];
([2],[]) -> [2];
([3],[]) -> [3];
([0],[]) -> [0];
([],[]) -> [];
([1,2,2],[0,2]) -> [2,2,1,0,2];
([2,3],[1]) -> [3,2,1];
([0],[0,2]) -> [0,0,2];
([],[2,0,2]) -> [2,0,2];
([2],[3,2,0]) -> [2,3,2,0];
([1,1],[1,0,1]) -> [1,1,1,0,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00901599999997 true true

([0,1],[3]) -> [1,0,3];
([3],[]) -> [3];
([],[]) -> [];
([],[1]) -> [1];
([1],[0,3,1]) -> [1,0,3,1];
([0,1,1],[2,2,0]) -> [1,1,0,2,2,0];
([2,0,2],[0,2,2]) -> [2,0,2,0,2,2];
([3,0,0],[0]) -> [0,0,3,0];
([0],[1,2]) -> [0,1,2];
([],[1,0]) -> [1,0];
([0,0],[0,0,2]) -> [0,0,0,0,2];
([1,3,2],[3,1,2]) -> [2,3,1,3,1,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0144419999999 true true

([3],[1,0,3]) -> [3,1,0,3];
([2,2],[]) -> [2,2];
([1,0,1],[0,1,0]) -> [1,0,1,0,1,0];
([0],[]) -> [0];
([0,0,3],[]) -> [3,0,0];
([],[0]) -> [0];
([2,3],[2]) -> [3,2,2];
([0,1,2],[3,1,3]) -> [2,1,0,3,1,3];
([1,1,0],[3,3]) -> [0,1,1,3,3];
([0],[2]) -> [0,2];
([3,1],[]) -> [1,3];
([],[]) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.009096 true true

([],[3,2]) -> [3,2];
([],[1,1]) -> [1,1];
([2,1],[1,3]) -> [1,2,1,3];
([],[1,3,2]) -> [1,3,2];
([3,3,1],[2,3,0]) -> [1,3,3,2,3,0];
([3],[]) -> [3];
([1,0,0],[0,1]) -> [0,0,1,0,1];
([1],[2]) -> [1,2];
([],[2,2]) -> [2,2];
([],[3]) -> [3];
([2,0],[2,2,3]) -> [0,2,2,2,3];
([2,3],[0,3]) -> [3,2,0,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0183039999999 true true

([1,0],[]) -> [0,1];
([0,2,2],[1,3,0]) -> [2,2,0,1,3,0];
([0,2],[3,1]) -> [2,0,3,1];
([2],[3,2]) -> [2,3,2];
([],[]) -> [];
([],[2,2,2]) -> [2,2,2];
([],[1]) -> [1];
([],[0,1,1]) -> [0,1,1];
([3,3],[]) -> [3,3];
([2,2,1],[0,2,1]) -> [1,2,2,0,2,1];
([2,0],[3]) -> [0,2,3];
([],[3,1]) -> [3,1];
([0,1,1],[0]) -> [1,1,0,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0147870000001 true true

([2,3,2],[2,0]) -> [2,3,2,2,0];
([3,2,2],[3]) -> [2,2,3,3];
([],[1,2]) -> [1,2];
([2],[2,3]) -> [2,2,3];
([],[]) -> [];
([2,0],[2,0]) -> [0,2,2,0];
([],[0,0,0]) -> [0,0,0];
([],[0]) -> [0];
([1],[0,0]) -> [1,0,0];
([1,1],[3]) -> [1,1,3];
([0],[0,1,3]) -> [0,0,1,3];
([2,0],[1,1,2]) -> [0,2,1,1,2];
([0,1,3],[0,1]) -> [3,1,0,0,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00939100000005 true true

([3,0],[3]) -> [0,3,3];
([0],[3,1,1]) -> [0,3,1,1];
([],[3,1]) -> [3,1];
([],[3,1,0]) -> [3,1,0];
([],[1]) -> [1];
([],[0]) -> [0];
([1],[1,1,1]) -> [1,1,1,1];
([],[0,2]) -> [0,2];
([3,3],[2]) -> [3,3,2];
([3,0,0],[1]) -> [0,0,3,1];
([],[2]) -> [2];
([0],[]) -> [0];
([3,2],[]) -> [2,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.018319 true true

([],[]) -> [];
([3,1,0],[]) -> [0,1,3];
([3],[2,0]) -> [3,2,0];
([],[2,1]) -> [2,1];
([0,1,3],[]) -> [3,1,0];
([1],[1,0,1]) -> [1,1,0,1];
([2,3],[0,2]) -> [3,2,0,2];
([0,0,3],[]) -> [3,0,0];
([1,3,0],[2]) -> [0,3,1,2];
([],[2]) -> [2];
([3,3,2],[]) -> [2,3,3];
([2],[0]) -> [2,0];
([0,3],[2]) -> [3,0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0145689999999 true true

([3],[2,2]) -> [3,2,2];
([1,0],[0,3]) -> [0,1,0,3];
([],[2]) -> [2];
([],[3,0]) -> [3,0];
([],[3]) -> [3];
([],[1]) -> [1];
([1,0,1],[1]) -> [1,0,1,1];
([0,1],[0,3]) -> [1,0,0,3];
([0],[2,0]) -> [0,2,0];
([1,3,0],[2]) -> [0,3,1,2];
([3,2],[]) -> [2,3];
([1,0,0],[2]) -> [0,0,1,2];
([3,3],[]) -> [3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0181230000001 true true

([0,1,0],[3,1,3]) -> [0,1,0,3,1,3];
([1,0],[]) -> [0,1];
([],[3,3]) -> [3,3];
([1,0,2],[]) -> [2,0,1];
([1],[2,2]) -> [1,2,2];
([0],[1,3,2]) -> [0,1,3,2];
([],[0]) -> [0];
([2,1,3],[2,3]) -> [3,1,2,2,3];
([1,3,3],[1]) -> [3,3,1,1];
([3,3,3],[0]) -> [3,3,3,0];
([0,0],[0]) -> [0,0,0];
([0],[3,0]) -> [0,3,0];
([2,3,1],[0,2]) -> [1,3,2,0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.029755 true true

([3,3,0],[0,3]) -> [0,3,3,0,3];
([0],[]) -> [0];
([],[]) -> [];
([],[0,1,3]) -> [0,1,3];
([1,3,0],[]) -> [0,3,1];
([3,2,3],[3]) -> [3,2,3,3];
([2,2,3],[]) -> [3,2,2];
([2,0],[1,0]) -> [0,2,1,0];
([2,3,2],[2]) -> [2,3,2,2];
([1,3],[3,0]) -> [3,1,3,0];
([0,3],[]) -> [3,0];
([0,0],[3,3,0]) -> [0,0,3,3,0];
([3,1],[]) -> [1,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0157529999999 true true

([1],[]) -> [1];
([3,0,3],[1]) -> [3,0,3,1];
([3],[1,0]) -> [3,1,0];
([1,2],[1]) -> [2,1,1];
([],[]) -> [];
([3],[1]) -> [3,1];
([],[2,1,3]) -> [2,1,3];
([],[2]) -> [2];
([],[1,0,3]) -> [1,0,3];
([0,3,2],[2,2]) -> [2,3,0,2,2];
([0,0,2],[2,1,1]) -> [2,0,0,2,1,1];
([3,2,2],[0,2,2]) -> [2,2,3,0,2,2];
([1],[2,0]) -> [1,2,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.027227 true true

([],[3]) -> [3];
([3,0,2],[]) -> [2,0,3];
([2],[1,2,0]) -> [2,1,2,0];
([3,0,2],[1,0,2]) -> [2,0,3,1,0,2];
([0],[1,0]) -> [0,1,0];
([],[2,3]) -> [2,3];
([0,2],[3]) -> [2,0,3];
([1,2],[2,2,1]) -> [2,1,2,2,1];
([0],[2,3]) -> [0,2,3];
([0,3,0],[3,0]) -> [0,3,0,3,0];
([0,1,2],[]) -> [2,1,0];
([2,1],[2,2]) -> [1,2,2,2];
([0,2],[2,0,1]) -> [2,0,2,0,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.016905 true true

([3,2],[]) -> [2,3];
([2,0,0],[]) -> [0,0,2];
([2,1],[0,3,3]) -> [1,2,0,3,3];
([1,1],[3]) -> [1,1,3];
([3],[3,2]) -> [3,3,2];
([3,2],[0,2]) -> [2,3,0,2];
([],[0]) -> [0];
([2,0],[1,0,3]) -> [0,2,1,0,3];
([1,1],[2,3]) -> [1,1,2,3];
([2,2,1],[]) -> [1,2,2];
([2],[2,1,3]) -> [2,2,1,3];
([1,3,2],[1,0]) -> [2,3,1,1,0];
([0,2,0],[1,2]) -> [0,2,0,1,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.016554 true true

([],[2,2,2]) -> [2,2,2];
([0,2,2],[3,3]) -> [2,2,0,3,3];
([2],[]) -> [2];
([0,3],[3,2,2]) -> [3,0,3,2,2];
([1,0,0],[3,2,2]) -> [0,0,1,3,2,2];
([0],[]) -> [0];
([0,0],[1,1]) -> [0,0,1,1];
([0],[1]) -> [0,1];
([0,3],[2]) -> [3,0,2];
([1,3],[3,0]) -> [3,1,3,0];
([1],[1,1]) -> [1,1,1];
([2,1,3],[0]) -> [3,1,2,0];
([3,1],[1]) -> [1,3,1];
([1,0],[0,2,1]) -> [0,1,0,2,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0156899999999 true true

([],[2]) -> [2];
([3],[2,1]) -> [3,2,1];
([2,1],[3,0,1]) -> [1,2,3,0,1];
([],[3,3]) -> [3,3];
([1,1,3],[0,3]) -> [3,1,1,0,3];
([1],[3]) -> [1,3];
([0,2],[0,3]) -> [2,0,0,3];
([],[]) -> [];
([],[2,1,0]) -> [2,1,0];
([2],[1,1]) -> [2,1,1];
([1,3,1],[3]) -> [1,3,1,3];
([3,2,0],[]) -> [0,2,3];
([],[1,3,2]) -> [1,3,2];
([3],[3]) -> [3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0146010000001 true true

([0],[1,1]) -> [0,1,1];
([2,1,1],[0,3]) -> [1,1,2,0,3];
([1],[]) -> [1];
([],[]) -> [];
([],[1]) -> [1];
([1,0,1],[0]) -> [1,0,1,0];
([0],[0,0]) -> [0,0,0];
([],[0,3,2]) -> [0,3,2];
([0],[0]) -> [0,0];
([3,3,2],[2,0,3]) -> [2,3,3,2,0,3];
([0,1],[2,2,3]) -> [1,0,2,2,3];
([0],[0,1]) -> [0,0,1];
([0,1,0],[0,2]) -> [0,1,0,0,2];
([2,1],[]) -> [1,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00830599999995 true true

([0,2,2],[2]) -> [2,2,0,2];
([2,1,0],[1]) -> [0,1,2,1];
([0,2,0],[0,0,0]) -> [0,2,0,0,0,0];
([],[2,0,3]) -> [2,0,3];
([0,2],[0,1]) -> [2,0,0,1];
([0,3],[]) -> [3,0];
([1,1],[3,0]) -> [1,1,3,0];
([],[3,2,0]) -> [3,2,0];
([2],[2,0]) -> [2,2,0];
([],[0,1,2]) -> [0,1,2];
([3,0,2],[3,0]) -> [2,0,3,3,0];
([3,1,2],[0]) -> [2,1,3,0];
([3,0,2],[1,1]) -> [2,0,3,1,1];
([1,1,0],[1]) -> [0,1,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.01226 true true

([2],[1,1]) -> [2,1,1];
([3,1],[2,3]) -> [1,3,2,3];
([1],[]) -> [1];
([2,1],[]) -> [1,2];
([2,0,1],[]) -> [1,0,2];
([1,2],[0]) -> [2,1,0];
([],[]) -> [];
([1,3],[]) -> [3,1];
([2],[3,3,0]) -> [2,3,3,0];
([2,0],[0]) -> [0,2,0];
([],[2]) -> [2];
([1,0],[]) -> [0,1];
([1],[3]) -> [1,3];
([2],[2]) -> [2,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0135250000001 true true

([],[0,2,3]) -> [0,2,3];
([0,1,2],[0]) -> [2,1,0,0];
([0,3,1],[0]) -> [1,3,0,0];
([1,2,2],[1,1]) -> [2,2,1,1,1];
([2,3],[2,0,1]) -> [3,2,2,0,1];
([3],[3,3]) -> [3,3,3];
([2,1,2],[1,0,2]) -> [2,1,2,1,0,2];
([1],[1,2]) -> [1,1,2];
([3],[]) -> [3];
([2],[2]) -> [2,2];
([0,3,0],[1,2,3]) -> [0,3,0,1,2,3];
([],[]) -> [];
([1],[1,0,2]) -> [1,1,0,2];
([],[3,0,2]) -> [3,0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.014255 true true

([],[2]) -> [2];
([],[2,2,2]) -> [2,2,2];
([],[0,1,1]) -> [0,1,1];
([0,1,2],[3,0,3]) -> [2,1,0,3,0,3];
([3,3,3],[0]) -> [3,3,3,0];
([],[1,1,1]) -> [1,1,1];
([0,2,1],[1]) -> [1,2,0,1];
([3,3],[0,3]) -> [3,3,0,3];
([],[]) -> [];
([3,3,0],[0]) -> [0,3,3,0];
([1,2],[]) -> [2,1];
([2,3,1],[2,0]) -> [1,3,2,2,0];
([],[1,3]) -> [1,3];
([],[3]) -> [3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0136660000001 true true

([1,3],[3,2,2]) -> [3,1,3,2,2];
([2],[]) -> [2];
([1],[0]) -> [1,0];
([],[2,1,3]) -> [2,1,3];
([1],[]) -> [1];
([1],[1,1,0]) -> [1,1,1,0];
([0],[1,1,1]) -> [0,1,1,1];
([],[]) -> [];
([3,0,2],[2,0]) -> [2,0,3,2,0];
([3,0,2],[2,1]) -> [2,0,3,2,1];
([3],[3]) -> [3,3];
([0],[3,3]) -> [0,3,3];
([1,2],[3,0,2]) -> [2,1,3,0,2];
([3],[0,0,1]) -> [3,0,0,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00968400000011 true true

([1,1,3],[2,3,3]) -> [3,1,1,2,3,3];
([3],[]) -> [3];
([2,1,1],[3,1]) -> [1,1,2,3,1];
([],[2]) -> [2];
([0,2],[3,0]) -> [2,0,3,0];
([0,1],[0,3,1]) -> [1,0,0,3,1];
([3,0,3],[1,1,3]) -> [3,0,3,1,1,3];
([0,2],[2,2]) -> [2,0,2,2];
([2,0],[2]) -> [0,2,2];
([2],[3,2,3]) -> [2,3,2,3];
([2],[0,2]) -> [2,0,2];
([2],[1]) -> [2,1];
([3,1],[2,3]) -> [1,3,2,3];
([0],[]) -> [0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0207399999999 true true

([],[1,3,2]) -> [1,3,2];
([],[3]) -> [3];
([],[3,2]) -> [3,2];
([],[]) -> [];
([],[3,1]) -> [3,1];
([3],[]) -> [3];
([2],[3]) -> [2,3];
([],[0]) -> [0];
([0],[]) -> [0];
([2,2,3],[3,1]) -> [3,2,2,3,1];
([],[2,3]) -> [2,3];
([],[1]) -> [1];
([1,3],[2,2]) -> [3,1,2,2];
([1,0,3],[0,2,2]) -> [3,0,1,0,2,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00925699999993 true true

([1],[2,3]) -> [1,2,3];
([1,0,3],[]) -> [3,0,1];
([2,1,3],[2,3,0]) -> [3,1,2,2,3,0];
([1,3],[]) -> [3,1];
([0,3],[]) -> [3,0];
([0,0,3],[0]) -> [3,0,0,0];
([],[0]) -> [0];
([],[0,0]) -> [0,0];
([1,0,3],[0,1,2]) -> [3,0,1,0,1,2];
([],[]) -> [];
([2,0,1],[]) -> [1,0,2];
([2,2],[]) -> [2,2];
([0],[]) -> [0];
([],[0,1]) -> [0,1];
([2],[3]) -> [2,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0162330000001 true true

([],[3]) -> [3];
([],[2,3]) -> [2,3];
([],[2]) -> [2];
([1,0,2],[]) -> [2,0,1];
([],[2,1]) -> [2,1];
([],[3,2,0]) -> [3,2,0];
([3,1,1],[]) -> [1,1,3];
([1],[0]) -> [1,0];
([0,1],[3,1,2]) -> [1,0,3,1,2];
([2,0,1],[2]) -> [1,0,2,2];
([3,1,3],[1]) -> [3,1,3,1];
([2,2],[]) -> [2,2];
([],[]) -> [];
([3,0],[3]) -> [0,3,3];
([1],[0,2]) -> [1,0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0143519999999 true true

([],[3]) -> [3];
([0,2,3],[0,0]) -> [3,2,0,0,0];
([0],[1,0]) -> [0,1,0];
([1,0,0],[3,2,1]) -> [0,0,1,3,2,1];
([2],[2,0,1]) -> [2,2,0,1];
([3,2],[0]) -> [2,3,0];
([3],[1]) -> [3,1];
([],[2,0]) -> [2,0];
([3],[3]) -> [3,3];
([1,2,0],[3,1,2]) -> [0,2,1,3,1,2];
([2,3,2],[1,0]) -> [2,3,2,1,0];
([1,1],[3,2]) -> [1,1,3,2];
([],[3,3]) -> [3,3];
([1,1,0],[]) -> [0,1,1];
([2,1],[]) -> [1,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.019076 true true

([1,1,2],[3,3,2]) -> [2,1,1,3,3,2];
([2],[3]) -> [2,3];
([],[2]) -> [2];
([],[1,0]) -> [1,0];
([2,3],[]) -> [3,2];
([1,2,0],[2]) -> [0,2,1,2];
([1],[1]) -> [1,1];
([],[2,3,1]) -> [2,3,1];
([2,2,2],[0]) -> [2,2,2,0];
([0],[1]) -> [0,1];
([2,1,0],[0]) -> [0,1,2,0];
([2,1],[]) -> [1,2];
([3,3,3],[0,2,0]) -> [3,3,3,0,2,0];
([3],[0,3,3]) -> [3,0,3,3];
([2,1,0],[]) -> [0,1,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0188840000001 true true

([0],[]) -> [0];
([3,1],[3]) -> [1,3,3];
([],[3,1]) -> [3,1];
([],[]) -> [];
([2,1,1],[]) -> [1,1,2];
([3,3],[3,0]) -> [3,3,3,0];
([1,3],[]) -> [3,1];
([],[1,1]) -> [1,1];
([1],[1]) -> [1,1];
([3,2,1],[0,3]) -> [1,2,3,0,3];
([],[0,3,0]) -> [0,3,0];
([],[2]) -> [2];
([3,0,2],[1]) -> [2,0,3,1];
([2,3],[]) -> [3,2];
([1,0,3],[0]) -> [3,0,1,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.013792 true true

([2],[]) -> [2];
([1,2,2],[1,2,0]) -> [2,2,1,1,2,0];
([1],[1,2]) -> [1,1,2];
([],[3,3]) -> [3,3];
([],[3,0]) -> [3,0];
([],[0,3,0]) -> [0,3,0];
([],[]) -> [];
([],[1,3,0]) -> [1,3,0];
([3],[1,2,3]) -> [3,1,2,3];
([2,2,2],[3]) -> [2,2,2,3];
([1,0],[1]) -> [0,1,1];
([2,2,0],[0]) -> [0,2,2,0];
([0],[1]) -> [0,1];
([2,0],[2,1]) -> [0,2,2,1];
([2],[1,3,1]) -> [2,1,3,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.016453 true true

([],[3]) -> [3];
([2,1,2],[2]) -> [2,1,2,2];
([],[]) -> [];
([1,3,0],[]) -> [0,3,1];
([0,1,3],[0,3]) -> [3,1,0,0,3];
([3],[2,3,3]) -> [3,2,3,3];
([3,1,2],[]) -> [2,1,3];
([3],[0,3,0]) -> [3,0,3,0];
([1,2],[0]) -> [2,1,0];
([3],[]) -> [3];
([1],[3,2]) -> [1,3,2];
([0],[]) -> [0];
([0,2,2],[3,3]) -> [2,2,0,3,3];
([0],[0,0]) -> [0,0,0];
([2,3,3],[2,0,1]) -> [3,3,2,2,0,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0212859999999 true true

([],[3,0]) -> [3,0];
([],[0,0,2]) -> [0,0,2];
([],[1,3]) -> [1,3];
([3],[3,1,2]) -> [3,3,1,2];
([0,2],[1]) -> [2,0,1];
([3,0,3],[3,1]) -> [3,0,3,3,1];
([3,3],[3]) -> [3,3,3];
([],[2,2,2]) -> [2,2,2];
([0,3],[]) -> [3,0];
([1,1,3],[2]) -> [3,1,1,2];
([],[0]) -> [0];
([],[3,2]) -> [3,2];
([],[]) -> [];
([0],[3,2]) -> [0,3,2];
([],[0,1]) -> [0,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0088760000001 true true

([3],[1,3,3]) -> [3,1,3,3];
([],[2,2]) -> [2,2];
([1],[]) -> [1];
([3,2],[0,0,1]) -> [2,3,0,0,1];
([],[2]) -> [2];
([3,1,1],[0]) -> [1,1,3,0];
([1,2,3],[3]) -> [3,2,1,3];
([3,3],[1]) -> [3,3,1];
([0,0],[2]) -> [0,0,2];
([2,0,1],[0,1,0]) -> [1,0,2,0,1,0];
([0],[2,3,1]) -> [0,2,3,1];
([1,1],[2,2]) -> [1,1,2,2];
([2,2],[]) -> [2,2];
([3],[2]) -> [3,2];
([3],[1,2,0]) -> [3,1,2,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0205100000001 true true

([],[0,1]) -> [0,1];
([3,3,2],[1]) -> [2,3,3,1];
([3,0],[1]) -> [0,3,1];
([0],[0,1,3]) -> [0,0,1,3];
([3],[1]) -> [3,1];
([1,3,3],[1,3]) -> [3,3,1,1,3];
([],[0]) -> [0];
([2,0],[3,3,2]) -> [0,2,3,3,2];
([1,1],[]) -> [1,1];
([2,0],[2,1]) -> [0,2,2,1];
([3,1,2],[3,3]) -> [2,1,3,3,3];
([],[]) -> [];
([],[1,1,2]) -> [1,1,2];
([2],[0]) -> [2,0];
([3],[2]) -> [3,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0147910000001 true true

([0,3,3],[1,1]) -> [3,3,0,1,1];
([3],[0,0,3]) -> [3,0,0,3];
([],[2,1,0]) -> [2,1,0];
([3,1,3],[]) -> [3,1,3];
([3,1],[2,2,2]) -> [1,3,2,2,2];
([3],[2,3]) -> [3,2,3];
([0,2,2],[]) -> [2,2,0];
([],[3,2]) -> [3,2];
([],[0,3,3]) -> [0,3,3];
([2],[]) -> [2];
([3,3,0],[2,3,3]) -> [0,3,3,2,3,3];
([0,2],[3,2]) -> [2,0,3,2];
([0,3],[]) -> [3,0];
([2],[2,0]) -> [2,2,0];
([3],[1,2,1]) -> [3,1,2,1];
([1,1],[]) -> [1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.019078 true true

([],[2,2]) -> [2,2];
([],[2,1,3]) -> [2,1,3];
([0,2],[1,2,2]) -> [2,0,1,2,2];
([3],[]) -> [3];
([3,1,0],[]) -> [0,1,3];
([1,0],[]) -> [0,1];
([3,1,0],[3,2,0]) -> [0,1,3,3,2,0];
([],[1,0,2]) -> [1,0,2];
([1,1,3],[2]) -> [3,1,1,2];
([3,3,0],[]) -> [0,3,3];
([2,0,2],[3,1,3]) -> [2,0,2,3,1,3];
([1,1],[2]) -> [1,1,2];
([2],[]) -> [2];
([1,1,0],[2]) -> [0,1,1,2];
([0],[3]) -> [0,3];
([1],[1,2,2]) -> [1,1,2,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0128729999999 true true

([],[]) -> [];
([],[0,1,3]) -> [0,1,3];
([],[2]) -> [2];
([3,0],[]) -> [0,3];
([3,3],[3,0]) -> [3,3,3,0];
([],[3,1,2]) -> [3,1,2];
([1],[0]) -> [1,0];
([3],[]) -> [3];
([0,1],[3,0,1]) -> [1,0,3,0,1];
([0,2],[2,3,1]) -> [2,0,2,3,1];
([],[3]) -> [3];
([1,2],[1,3]) -> [2,1,1,3];
([2,3,0],[]) -> [0,3,2];
([3],[2]) -> [3,2];
([3,3],[1,0]) -> [3,3,1,0];
([],[1,3]) -> [1,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00885900000003 true true

([1,1,0],[1,1]) -> [0,1,1,1,1];
([3,2],[1,3]) -> [2,3,1,3];
([0,0],[]) -> [0,0];
([3,0,2],[]) -> [2,0,3];
([1],[0,0,3]) -> [1,0,0,3];
([3],[]) -> [3];
([],[3]) -> [3];
([1],[]) -> [1];
([],[0,0]) -> [0,0];
([0,0,1],[1,3,3]) -> [1,0,0,1,3,3];
([3,3,3],[]) -> [3,3,3];
([0,3,2],[]) -> [2,3,0];
([1,0],[]) -> [0,1];
([],[]) -> [];
([3,3],[0,1]) -> [3,3,0,1];
([0,3,3],[0]) -> [3,3,0,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.016241 true true

([],[2]) -> [2];
([],[]) -> [];
([3],[1]) -> [3,1];
([1],[2]) -> [1,2];
([1],[0]) -> [1,0];
([],[2,3,3]) -> [2,3,3];
([2,2,3],[0,2,3]) -> [3,2,2,0,2,3];
([1],[1]) -> [1,1];
([0],[0,0]) -> [0,0,0];
([2],[3,0]) -> [2,3,0];
([0],[]) -> [0];
([3],[2,0,0]) -> [3,2,0,0];
([3,0],[1,1,3]) -> [0,3,1,1,3];
([],[2,1,0]) -> [2,1,0];
([3],[0,2,0]) -> [3,0,2,0];
([2,0],[0,2]) -> [0,2,0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0175609999999 true true

([1],[2,2,0]) -> [1,2,2,0];
([],[2,2]) -> [2,2];
([1,0,3],[3,3]) -> [3,0,1,3,3];
([2],[1,1]) -> [2,1,1];
([1,2],[]) -> [2,1];
([2],[1,0]) -> [2,1,0];
([],[0,1,3]) -> [0,1,3];
([0],[3,3,1]) -> [0,3,3,1];
([1],[1,1,3]) -> [1,1,1,3];
([],[]) -> [];
([1,2,1],[]) -> [1,2,1];
([],[3,0,3]) -> [3,0,3];
([3],[]) -> [3];
([2,1,3],[2]) -> [3,1,2,2];
([],[1,3]) -> [1,3];
([],[0,2,0]) -> [0,2,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.010616 true true

([],[2]) -> [2];
([2],[]) -> [2];
([1],[]) -> [1];
([1,3],[2,3,1]) -> [3,1,2,3,1];
([0,2],[0,2,2]) -> [2,0,0,2,2];
([3],[]) -> [3];
([1],[3,1]) -> [1,3,1];
([],[0]) -> [0];
([1,3,2],[]) -> [2,3,1];
([3,1,3],[]) -> [3,1,3];
([1,2],[2]) -> [2,1,2];
([1,1,2],[0,0]) -> [2,1,1,0,0];
([3,2],[0,0,1]) -> [2,3,0,0,1];
([],[]) -> [];
([2,0,1],[3]) -> [1,0,2,3];
([3,3,2],[0]) -> [2,3,3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.009728 true true

([],[1,3]) -> [1,3];
([],[2,2,3]) -> [2,2,3];
([2],[]) -> [2];
([],[3,2,2]) -> [3,2,2];
([0,3,1],[]) -> [1,3,0];
([],[3]) -> [3];
([3],[3]) -> [3,3];
([],[3,1]) -> [3,1];
([0,3,2],[3,0,1]) -> [2,3,0,3,0,1];
([2,2],[2,3]) -> [2,2,2,3];
([0,2],[1]) -> [2,0,1];
([1],[1,0]) -> [1,1,0];
([0,1,1],[2,1,3]) -> [1,1,0,2,1,3];
([1],[0,3]) -> [1,0,3];
([],[]) -> [];
([1,2],[]) -> [2,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00905699999998 true true

([2,1],[3,2,0]) -> [1,2,3,2,0];
([0,2],[1,2]) -> [2,0,1,2];
([],[1]) -> [1];
([2,2,1],[1]) -> [1,2,2,1];
([],[2,0,0]) -> [2,0,0];
([2,3],[0,1,2]) -> [3,2,0,1,2];
([1],[3]) -> [1,3];
([3,1,3],[3]) -> [3,1,3,3];
([1],[1]) -> [1,1];
([0],[]) -> [0];
([0],[0]) -> [0,0];
([2],[2,0]) -> [2,2,0];
([2],[2,3]) -> [2,2,3];
([],[]) -> [];
([2,3,3],[3]) -> [3,3,2,3];
([2,2,0],[3,1]) -> [0,2,2,3,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00906099999997 true true

([2],[]) -> [2];
([2,2,0],[3,0]) -> [0,2,2,3,0];
([3,0],[2,2,1]) -> [0,3,2,2,1];
([2],[1]) -> [2,1];
([3,2],[3,3,0]) -> [2,3,3,3,0];
([],[1,1]) -> [1,1];
([2],[1,2,3]) -> [2,1,2,3];
([3],[]) -> [3];
([],[2,1]) -> [2,1];
([2,2],[0]) -> [2,2,0];
([],[2]) -> [2];
([],[0,1,3]) -> [0,1,3];
([0,1,0],[]) -> [0,1,0];
([3,3,2],[]) -> [2,3,3];
([2,2],[1,1,1]) -> [2,2,1,1,1];
([1,3],[3,3]) -> [3,1,3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0108869999999 true true

([1,0,0],[3]) -> [0,0,1,3];
([0,2,0],[]) -> [0,2,0];
([3,3,2],[2,1]) -> [2,3,3,2,1];
([1],[0]) -> [1,0];
([3,2],[0,2]) -> [2,3,0,2];
([],[1,0]) -> [1,0];
([3,3],[3]) -> [3,3,3];
([3,2,3],[]) -> [3,2,3];
([0,0,0],[2]) -> [0,0,0,2];
([3,3],[3,0]) -> [3,3,3,0];
([2],[1,3]) -> [2,1,3];
([],[3,1]) -> [3,1];
([2,1,1],[2]) -> [1,1,2,2];
([3],[]) -> [3];
([1],[1,0]) -> [1,1,0];
([],[]) -> [];
([1],[]) -> [1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0086490000001 true true

([],[3,3]) -> [3,3];
([3],[2,3,3]) -> [3,2,3,3];
([],[]) -> [];
([],[3,2,0]) -> [3,2,0];
([2],[0,1,3]) -> [2,0,1,3];
([0,3,2],[1]) -> [2,3,0,1];
([2],[3,0]) -> [2,3,0];
([1],[3]) -> [1,3];
([1,3],[3,0]) -> [3,1,3,0];
([0,2],[]) -> [2,0];
([],[3]) -> [3];
([0,1],[2]) -> [1,0,2];
([],[2,2,0]) -> [2,2,0];
([3,3],[]) -> [3,3];
([2,1,0],[1,3,1]) -> [0,1,2,1,3,1];
([2,3,1],[]) -> [1,3,2];
([3,1,1],[2,1,3]) -> [1,1,3,2,1,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00966500000004 true true

([3],[0,2,2]) -> [3,0,2,2];
([2],[]) -> [2];
([3],[3,0]) -> [3,3,0];
([3,3,0],[1,0]) -> [0,3,3,1,0];
([0,3],[1,0]) -> [3,0,1,0];
([2,0,1],[0,3]) -> [1,0,2,0,3];
([0,0,2],[]) -> [2,0,0];
([3,2,1],[3,1]) -> [1,2,3,3,1];
([],[0,3]) -> [0,3];
([2,2,0],[]) -> [0,2,2];
([0],[0]) -> [0,0];
([],[3,1]) -> [3,1];
([0],[]) -> [0];
([0,2],[3,3]) -> [2,0,3,3];
([],[]) -> [];
([3,1,0],[3,0]) -> [0,1,3,3,0];
([3],[2,2]) -> [3,2,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00864700000011 true true

([2,0],[]) -> [0,2];
([3,0,1],[]) -> [1,0,3];
([],[3,1]) -> [3,1];
([3,1,0],[]) -> [0,1,3];
([3,1],[1]) -> [1,3,1];
([],[1,1,2]) -> [1,1,2];
([1,0],[3,0,3]) -> [0,1,3,0,3];
([0,2,0],[]) -> [0,2,0];
([2,3],[2,2]) -> [3,2,2,2];
([0,3],[1]) -> [3,0,1];
([3],[0,1,1]) -> [3,0,1,1];
([2,2],[3]) -> [2,2,3];
([],[0]) -> [0];
([0,0],[2,0,0]) -> [0,0,2,0,0];
([1,1],[0]) -> [1,1,0];
([1],[1,1,1]) -> [1,1,1,1];
([1],[]) -> [1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.012154 true true

([3,0],[]) -> [0,3];
([3],[0,2]) -> [3,0,2];
([1],[]) -> [1];
([3,2],[2,3]) -> [2,3,2,3];
([],[3,0]) -> [3,0];
([0,0,2],[0]) -> [2,0,0,0];
([],[]) -> [];
([1,1],[1,3]) -> [1,1,1,3];
([3,0,3],[1]) -> [3,0,3,1];
([1,2],[1]) -> [2,1,1];
([3,3],[]) -> [3,3];
([1,0,1],[3,1,1]) -> [1,0,1,3,1,1];
([3,2,2],[]) -> [2,2,3];
([1,1,1],[3,1]) -> [1,1,1,3,1];
([3,1,2],[3,3]) -> [2,1,3,3,3];
([1,3,1],[3,0,0]) -> [1,3,1,3,0,0];
([3,1],[]) -> [1,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00944400000003 true true

([],[3,3]) -> [3,3];
([],[0,2]) -> [0,2];
([],[0,1,0]) -> [0,1,0];
([3],[]) -> [3];
([2,0],[2,0,0]) -> [0,2,2,0,0];
([],[]) -> [];
([1],[3,1,1]) -> [1,3,1,1];
([2],[2]) -> [2,2];
([3],[1,2]) -> [3,1,2];
([3],[2,3,2]) -> [3,2,3,2];
([1],[0,1]) -> [1,0,1];
([3,2],[1,2,0]) -> [2,3,1,2,0];
([3,0,3],[]) -> [3,0,3];
([2,0],[2,1]) -> [0,2,2,1];
([2],[]) -> [2];
([],[1,1]) -> [1,1];
([],[0,3,3]) -> [0,3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00908099999992 true true

([2,2],[2,0]) -> [2,2,2,0];
([2,1],[2,0,0]) -> [1,2,2,0,0];
([],[2]) -> [2];
([0],[1]) -> [0,1];
([],[]) -> [];
([],[0,1]) -> [0,1];
([2,0],[1,3,2]) -> [0,2,1,3,2];
([3,0],[0,3,2]) -> [0,3,0,3,2];
([0,3,1],[2]) -> [1,3,0,2];
([0,2],[]) -> [2,0];
([2],[]) -> [2];
([],[3,3,0]) -> [3,3,0];
([3,3,2],[]) -> [2,3,3];
([3],[0]) -> [3,0];
([0],[3,3,0]) -> [0,3,3,0];
([3],[3,2]) -> [3,3,2];
([0],[0,2,3]) -> [0,0,2,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00888000000009 true true

([0],[1,1]) -> [0,1,1];
([],[1,1,0]) -> [1,1,0];
([],[2,2,2]) -> [2,2,2];
([],[]) -> [];
([1,0],[3]) -> [0,1,3];
([3,0,1],[]) -> [1,0,3];
([0,1],[2,0,3]) -> [1,0,2,0,3];
([2,2],[0]) -> [2,2,0];
([1,2],[3,3,3]) -> [2,1,3,3,3];
([3],[2,1]) -> [3,2,1];
([0,2,1],[]) -> [1,2,0];
([3],[1,3,2]) -> [3,1,3,2];
([2],[2,0]) -> [2,2,0];
([0,1],[1]) -> [1,0,1];
([],[3,0]) -> [3,0];
([2,0],[1,3]) -> [0,2,1,3];
([2,2,3],[]) -> [3,2,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00975100000005 true true

([3,2],[1,1,0]) -> [2,3,1,1,0];
([2,2,3],[]) -> [3,2,2];
([0,1,3],[2,2]) -> [3,1,0,2,2];
([3],[2]) -> [3,2];
([],[1]) -> [1];
([1,0],[1]) -> [0,1,1];
([0,1,2],[3]) -> [2,1,0,3];
([2],[2]) -> [2,2];
([1,2],[2,0]) -> [2,1,2,0];
([3,2,1],[3]) -> [1,2,3,3];
([2,3,0],[]) -> [0,3,2];
([3,1],[0,1,0]) -> [1,3,0,1,0];
([],[]) -> [];
([1,1,0],[]) -> [0,1,1];
([3],[0]) -> [3,0];
([1],[1]) -> [1,1];
([1,0],[]) -> [0,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00978000000009 true true

([2],[]) -> [2];
([],[]) -> [];
([2,2],[]) -> [2,2];
([1,2],[0,1]) -> [2,1,0,1];
([2,1,1],[]) -> [1,1,2];
([1],[3,1]) -> [1,3,1];
([0,0,3],[2,1,1]) -> [3,0,0,2,1,1];
([3],[3,0]) -> [3,3,0];
([0],[3,3]) -> [0,3,3];
([0],[3]) -> [0,3];
([],[3,1,3]) -> [3,1,3];
([],[2,3,1]) -> [2,3,1];
([1,2],[0]) -> [2,1,0];
([1],[3]) -> [1,3];
([0,0,3],[1,0,3]) -> [3,0,0,1,0,3];
([2],[2]) -> [2,2];
([1,1],[3]) -> [1,1,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00916800000005 true true

([0,1,1],[2,1,2]) -> [1,1,0,2,1,2];
([1,2],[1,3,3]) -> [2,1,1,3,3];
([3,3,2],[2,0,0]) -> [2,3,3,2,0,0];
([2,1],[0,1,1]) -> [1,2,0,1,1];
([1,2,0],[3,0]) -> [0,2,1,3,0];
([3,0],[3,0]) -> [0,3,3,0];
([1,3,2],[2,1]) -> [2,3,1,2,1];
([2,2],[1,0,3]) -> [2,2,1,0,3];
([],[]) -> [];
([0,0,0],[1,2]) -> [0,0,0,1,2];
([1,2],[3]) -> [2,1,3];
([0,3],[]) -> [3,0];
([1,1],[]) -> [1,1];
([1],[2,2,0]) -> [1,2,2,0];
([],[1]) -> [1];
([0,0],[2,1,1]) -> [0,0,2,1,1];
([],[0,3]) -> [0,3];
([3],[]) -> [3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00870299999997 true true

([],[]) -> [];
([2],[1]) -> [2,1];
([1,2,1],[]) -> [1,2,1];
([1],[0]) -> [1,0];
([1,3],[]) -> [3,1];
([],[1,1]) -> [1,1];
([0,2,3],[]) -> [3,2,0];
([0],[0]) -> [0,0];
([2,2,2],[2,1]) -> [2,2,2,2,1];
([],[2,0]) -> [2,0];
([1,2,2],[2,2]) -> [2,2,1,2,2];
([3,2],[3,0,1]) -> [2,3,3,0,1];
([1,1,1],[1,2,0]) -> [1,1,1,1,2,0];
([],[3]) -> [3];
([1],[]) -> [1];
([1,0],[1,1,2]) -> [0,1,1,1,2];
([],[3,1,1]) -> [3,1,1];
([3],[]) -> [3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00907099999995 true true

([],[3]) -> [3];
([2,0],[2]) -> [0,2,2];
([0],[]) -> [0];
([1,1,3],[1]) -> [3,1,1,1];
([1],[1,1,1]) -> [1,1,1,1];
([0],[1,2,3]) -> [0,1,2,3];
([],[]) -> [];
([],[2]) -> [2];
([],[2,0,0]) -> [2,0,0];
([1],[]) -> [1];
([1,0],[3,1,1]) -> [0,1,3,1,1];
([3],[1]) -> [3,1];
([0,0],[2]) -> [0,0,2];
([3,2],[1]) -> [2,3,1];
([1,2],[]) -> [2,1];
([0],[3]) -> [0,3];
([],[0]) -> [0];
([2],[0,0,2]) -> [2,0,0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00816899999995 true true

([2,3,0],[]) -> [0,3,2];
([0,1],[2]) -> [1,0,2];
([2,0,1],[1,0,3]) -> [1,0,2,1,0,3];
([3],[1]) -> [3,1];
([],[3]) -> [3];
([0],[2,2]) -> [0,2,2];
([2,2],[0,0,2]) -> [2,2,0,0,2];
([],[0,2,0]) -> [0,2,0];
([],[]) -> [];
([],[0]) -> [0];
([],[1]) -> [1];
([0,0,3],[3,1,1]) -> [3,0,0,3,1,1];
([3],[3]) -> [3,3];
([0],[]) -> [0];
([],[2,3,0]) -> [2,3,0];
([3,0],[]) -> [0,3];
([],[0,1,1]) -> [0,1,1];
([2,3],[3]) -> [3,2,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00925400000006 true true

([0,0],[0,0,0]) -> [0,0,0,0,0];
([],[2]) -> [2];
([2,2,0],[2]) -> [0,2,2,2];
([2,3,3],[]) -> [3,3,2];
([],[]) -> [];
([2,2],[2,3,3]) -> [2,2,2,3,3];
([0,3,1],[3,0]) -> [1,3,0,3,0];
([1],[1]) -> [1,1];
([2],[]) -> [2];
([0,3,0],[1,3]) -> [0,3,0,1,3];
([0,0,0],[2,3]) -> [0,0,0,2,3];
([3],[2,1]) -> [3,2,1];
([],[1]) -> [1];
([],[2,2]) -> [2,2];
([0,1,2],[0]) -> [2,1,0,0];
([0,2],[0]) -> [2,0,0];
([0,3],[]) -> [3,0];
([1,2,2],[2,1,1]) -> [2,2,1,2,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0091460000001 true true

([],[3]) -> [3];
([2],[1,0,3]) -> [2,1,0,3];
([0,3,0],[2]) -> [0,3,0,2];
([],[3,2]) -> [3,2];
([1],[]) -> [1];
([2],[1]) -> [2,1];
([1],[1]) -> [1,1];
([1,1,0],[]) -> [0,1,1];
([3,3,2],[3,3]) -> [2,3,3,3,3];
([],[3,0,1]) -> [3,0,1];
([3,0],[]) -> [0,3];
([2,0,2],[3,3]) -> [2,0,2,3,3];
([],[2]) -> [2];
([3,3,1],[]) -> [1,3,3];
([3],[3,0]) -> [3,3,0];
([0,0],[]) -> [0,0];
([0],[3,3,1]) -> [0,3,3,1];
([2,3,3],[]) -> [3,3,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0124069999999 true true

([2,1],[1,3,2]) -> [1,2,1,3,2];
([0,0],[2,0]) -> [0,0,2,0];
([0,2,3],[0]) -> [3,2,0,0];
([0,1],[1,0]) -> [1,0,1,0];
([0],[]) -> [0];
([3,3,3],[1]) -> [3,3,3,1];
([2,0],[1]) -> [0,2,1];
([1,3],[2]) -> [3,1,2];
([],[]) -> [];
([3],[2,1,0]) -> [3,2,1,0];
([0],[0]) -> [0,0];
([],[2]) -> [2];
([],[0,0,0]) -> [0,0,0];
([1],[0,0,2]) -> [1,0,0,2];
([1,1],[2,2]) -> [1,1,2,2];
([2],[2,2]) -> [2,2,2];
([2,1,2],[3]) -> [2,1,2,3];
([1,0],[2,0]) -> [0,1,2,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00991399999998 true true

([0],[2,3]) -> [0,2,3];
([0,2,2],[2]) -> [2,2,0,2];
([],[0,1,0]) -> [0,1,0];
([2],[2]) -> [2,2];
([],[2,0,1]) -> [2,0,1];
([2,3,2],[]) -> [2,3,2];
([3,2],[0]) -> [2,3,0];
([],[3]) -> [3];
([3,3,1],[0]) -> [1,3,3,0];
([],[0,2,2]) -> [0,2,2];
([3,2],[]) -> [2,3];
([1],[3]) -> [1,3];
([1],[3,3]) -> [1,3,3];
([2],[3,0,0]) -> [2,3,0,0];
([2,1],[]) -> [1,2];
([3],[2,2,0]) -> [3,2,2,0];
([2,0],[]) -> [0,2];
([],[1,3,1]) -> [1,3,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.011618 true true

([3],[3,1]) -> [3,3,1];
([3,0],[2]) -> [0,3,2];
([1,0],[3]) -> [0,1,3];
([3,2],[3,1]) -> [2,3,3,1];
([1,1],[0,0]) -> [1,1,0,0];
([],[0]) -> [0];
([],[1,3]) -> [1,3];
([],[3,1]) -> [3,1];
([2,3],[1,0,0]) -> [3,2,1,0,0];
([2,2,2],[]) -> [2,2,2];
([0],[2,0,1]) -> [0,2,0,1];
([],[]) -> [];
([],[2]) -> [2];
([],[1]) -> [1];
([2,0,1],[1,3,1]) -> [1,0,2,1,3,1];
([1,0],[1,2]) -> [0,1,1,2];
([],[0,3,3]) -> [0,3,3];
([1,1,1],[1,1]) -> [1,1,1,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0100689999999 true true

([2],[3,0,2]) -> [2,3,0,2];
([1],[0]) -> [1,0];
([0,0],[]) -> [0,0];
([],[0,3]) -> [0,3];
([],[3]) -> [3];
([1],[1,1,1]) -> [1,1,1,1];
([3,3],[3,1]) -> [3,3,3,1];
([],[1,3,1]) -> [1,3,1];
([],[2,1]) -> [2,1];
([],[1]) -> [1];
([1,1,2],[3]) -> [2,1,1,3];
([],[1,1]) -> [1,1];
([1,3],[3,3]) -> [3,1,3,3];
([0,2],[3,1,1]) -> [2,0,3,1,1];
([],[3,1,3]) -> [3,1,3];
([1],[0,3]) -> [1,0,3];
([2,2,1],[1,2]) -> [1,2,2,1,2];
([],[3,1,1]) -> [3,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.01242 true true

([1],[]) -> [1];
([3],[3,2,2]) -> [3,3,2,2];
([3],[]) -> [3];
([],[0,2]) -> [0,2];
([],[]) -> [];
([1,2],[3,3]) -> [2,1,3,3];
([],[3,3,3]) -> [3,3,3];
([2,1,0],[0,0,1]) -> [0,1,2,0,0,1];
([3,2],[3,1]) -> [2,3,3,1];
([0,2],[2]) -> [2,0,2];
([],[2]) -> [2];
([2,2],[]) -> [2,2];
([],[3,3]) -> [3,3];
([2,2,3],[3]) -> [3,2,2,3];
([1,1,1],[2]) -> [1,1,1,2];
([2],[]) -> [2];
([1,0,1],[3,2,0]) -> [1,0,1,3,2,0];
([2],[2,0,3]) -> [2,2,0,3];
([1,3],[]) -> [3,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00896400000011 true true

([3],[2,0]) -> [3,2,0];
([2],[2]) -> [2,2];
([3],[]) -> [3];
([2,2],[0,2]) -> [2,2,0,2];
([3,3],[1,1]) -> [3,3,1,1];
([1,3],[1,2]) -> [3,1,1,2];
([0,3],[0]) -> [3,0,0];
([2,2],[]) -> [2,2];
([1,3,1],[1,1,3]) -> [1,3,1,1,1,3];
([1,3],[]) -> [3,1];
([],[0,1]) -> [0,1];
([2,3],[1]) -> [3,2,1];
([2,2,1],[]) -> [1,2,2];
([],[0,0]) -> [0,0];
([],[]) -> [];
([],[1,3]) -> [1,3];
([3,1,3],[0,1,3]) -> [3,1,3,0,1,3];
([0,0],[]) -> [0,0];
([0],[3,3]) -> [0,3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.013383 true true

([],[2]) -> [2];
([1],[0]) -> [1,0];
([1,3,2],[1]) -> [2,3,1,1];
([3,0],[0]) -> [0,3,0];
([1,0],[3,0,2]) -> [0,1,3,0,2];
([3,1,1],[]) -> [1,1,3];
([2,3],[2,0]) -> [3,2,2,0];
([1,2],[2]) -> [2,1,2];
([],[3,0,0]) -> [3,0,0];
([2,3,0],[2,2]) -> [0,3,2,2,2];
([2],[]) -> [2];
([3],[2,2]) -> [3,2,2];
([3,1],[0]) -> [1,3,0];
([],[2,0]) -> [2,0];
([1,0,2],[]) -> [2,0,1];
([],[]) -> [];
([1],[2,1]) -> [1,2,1];
([1,3,2],[]) -> [2,3,1];
([],[1]) -> [1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00891999999999 true true

([3,2,1],[3,0,3]) -> [1,2,3,3,0,3];
([],[2]) -> [2];
([0],[]) -> [0];
([3,1],[0,1,1]) -> [1,3,0,1,1];
([1],[2]) -> [1,2];
([],[0,1]) -> [0,1];
([3,3,0],[]) -> [0,3,3];
([],[]) -> [];
([2,0],[1,3]) -> [0,2,1,3];
([],[3]) -> [3];
([3],[0,0,2]) -> [3,0,0,2];
([],[0]) -> [0];
([0,0,1],[0,3,2]) -> [1,0,0,0,3,2];
([2,1],[]) -> [1,2];
([3],[1]) -> [3,1];
([1,3,0],[]) -> [0,3,1];
([3],[3,1]) -> [3,3,1];
([2],[0,0]) -> [2,0,0];
([],[3,0]) -> [3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00912900000003 true true

([0,1,2],[3,1]) -> [2,1,0,3,1];
([3,3,2],[]) -> [2,3,3];
([1,2,1],[2,3,0]) -> [1,2,1,2,3,0];
([0],[2,3,2]) -> [0,2,3,2];
([1,2,2],[2,1,0]) -> [2,2,1,2,1,0];
([],[0]) -> [0];
([0,0,2],[2]) -> [2,0,0,2];
([0],[3]) -> [0,3];
([0,0,2],[1]) -> [2,0,0,1];
([],[]) -> [];
([0,2,1],[2]) -> [1,2,0,2];
([1,0],[]) -> [0,1];
([1,2],[0]) -> [2,1,0];
([1,1,0],[3,3,0]) -> [0,1,1,3,3,0];
([],[3]) -> [3];
([0,1],[0,1]) -> [1,0,0,1];
([3],[3]) -> [3,3];
([2],[]) -> [2];
([],[2]) -> [2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00872000000004 true true

([],[3]) -> [3];
([],[1,2]) -> [1,2];
([],[]) -> [];
([2],[2,3,0]) -> [2,2,3,0];
([2],[1]) -> [2,1];
([2,1,2],[]) -> [2,1,2];
([2],[3,1,3]) -> [2,3,1,3];
([2,3],[0]) -> [3,2,0];
([],[3,0,2]) -> [3,0,2];
([3],[3,2,0]) -> [3,3,2,0];
([1,3,3],[]) -> [3,3,1];
([2,2],[2,3,2]) -> [2,2,2,3,2];
([1],[]) -> [1];
([],[1]) -> [1];
([0,1,2],[]) -> [2,1,0];
([2],[]) -> [2];
([1],[3,2]) -> [1,3,2];
([2],[0,0,1]) -> [2,0,0,1];
([1,0,3],[3,0]) -> [3,0,1,3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0102420000001 true true

([0],[2,2,0]) -> [0,2,2,0];
([3],[0]) -> [3,0];
([],[0,1]) -> [0,1];
([2,0],[]) -> [0,2];
([],[]) -> [];
([0],[2]) -> [0,2];
([2,0],[2]) -> [0,2,2];
([],[2,2]) -> [2,2];
([],[1,1]) -> [1,1];
([2],[]) -> [2];
([1,3,3],[0,1]) -> [3,3,1,0,1];
([0],[]) -> [0];
([2,0,3],[]) -> [3,0,2];
([2],[0]) -> [2,0];
([],[2,3]) -> [2,3];
([1,0,1],[0,2,0]) -> [1,0,1,0,2,0];
([2,0,3],[3,3,1]) -> [3,0,2,3,3,1];
([2,2],[1,2]) -> [2,2,1,2];
([],[1,2,2]) -> [1,2,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00922999999989 true true

([0,3,0],[2,0]) -> [0,3,0,2,0];
([1,3],[1]) -> [3,1,1];
([1,0],[2,3,1]) -> [0,1,2,3,1];
([1,0],[3,1,1]) -> [0,1,3,1,1];
([2,2,3],[2,1]) -> [3,2,2,2,1];
([3,0],[3]) -> [0,3,3];
([0,3,1],[0]) -> [1,3,0,0];
([],[1]) -> [1];
([3,2,3],[]) -> [3,2,3];
([0,1],[]) -> [1,0];
([0],[0]) -> [0,0];
([3],[]) -> [3];
([1,1,3],[]) -> [3,1,1];
([],[2,2]) -> [2,2];
([0],[]) -> [0];
([3,1],[0,3,3]) -> [1,3,0,3,3];
([2,3],[1]) -> [3,2,1];
([1,2,0],[0,3,0]) -> [0,2,1,0,3,0];
([0,1,0],[3,0]) -> [0,1,0,3,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0199030000001 true true

([],[1,3,0]) -> [1,3,0];
([],[3,2]) -> [3,2];
([0,1,2],[3,3,3]) -> [2,1,0,3,3,3];
([3],[]) -> [3];
([1,2,1],[]) -> [1,2,1];
([3,1,3],[0,2,0]) -> [3,1,3,0,2,0];
([0],[0,1,1]) -> [0,0,1,1];
([2,0,3],[0,3]) -> [3,0,2,0,3];
([3,1,2],[1]) -> [2,1,3,1];
([0],[]) -> [0];
([1,3,1],[1]) -> [1,3,1,1];
([],[3,0]) -> [3,0];
([0,1,0],[1,0,2]) -> [0,1,0,1,0,2];
([0,2],[2,1,0]) -> [2,0,2,1,0];
([0,0,2],[2,3]) -> [2,0,0,2,3];
([2],[1,0,3]) -> [2,1,0,3];
([],[1,2,0]) -> [1,2,0];
([2,0],[]) -> [0,2];
([2],[0,0,1]) -> [2,0,0,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0122670000001 true true

([2,0],[]) -> [0,2];
([0,2,2],[0]) -> [2,2,0,0];
([],[]) -> [];
([2,0],[1,3]) -> [0,2,1,3];
([1,2],[0]) -> [2,1,0];
([3,2,3],[2,3]) -> [3,2,3,2,3];
([0,3,0],[0,0]) -> [0,3,0,0,0];
([0,0],[1,2]) -> [0,0,1,2];
([0,3],[3,0,0]) -> [3,0,3,0,0];
([0],[]) -> [0];
([0,1],[]) -> [1,0];
([1,0,1],[2,1]) -> [1,0,1,2,1];
([1,0],[1]) -> [0,1,1];
([],[0,2]) -> [0,2];
([2,2],[1,1]) -> [2,2,1,1];
([0,3],[3]) -> [3,0,3];
([0],[0]) -> [0,0];
([3,1],[2,3,2]) -> [1,3,2,3,2];
([2,0],[3,0,3]) -> [0,2,3,0,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00940900000001 true true

([0,0],[2,1]) -> [0,0,2,1];
([0,0],[3,1,1]) -> [0,0,3,1,1];
([0,3,3],[2,2,3]) -> [3,3,0,2,2,3];
([1,3,0],[2,0,1]) -> [0,3,1,2,0,1];
([0],[]) -> [0];
([2],[3,0,2]) -> [2,3,0,2];
([0,0],[]) -> [0,0];
([2],[]) -> [2];
([],[0]) -> [0];
([0,3,1],[0,1]) -> [1,3,0,0,1];
([],[]) -> [];
([1,3,2],[3,0,0]) -> [2,3,1,3,0,0];
([1],[]) -> [1];
([1,2],[0,2]) -> [2,1,0,2];
([3],[1]) -> [3,1];
([],[1,1,2]) -> [1,1,2];
([1,3,1],[1,1,0]) -> [1,3,1,1,1,0];
([1],[0]) -> [1,0];
([1],[1,2,0]) -> [1,1,2,0];
([1,3],[2,1,3]) -> [3,1,2,1,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0101480000001 true true

([0,0,1],[1,3,1]) -> [1,0,0,1,3,1];
([],[2]) -> [2];
([1,1],[]) -> [1,1];
([0,0,1],[1,0]) -> [1,0,0,1,0];
([],[]) -> [];
([1,1,3],[3,1]) -> [3,1,1,3,1];
([],[1]) -> [1];
([2,3],[]) -> [3,2];
([3],[0,0]) -> [3,0,0];
([],[0,3,0]) -> [0,3,0];
([3],[2,1,1]) -> [3,2,1,1];
([0],[0]) -> [0,0];
([],[2,1]) -> [2,1];
([1],[0,3]) -> [1,0,3];
([1,1,2],[0,3]) -> [2,1,1,0,3];
([1],[3,1]) -> [1,3,1];
([2,3],[0,3]) -> [3,2,0,3];
([0,2,2],[2,0,3]) -> [2,2,0,2,0,3];
([0,1,0],[0,0]) -> [0,1,0,0,0];
([2,2],[3,0,2]) -> [2,2,3,0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00991700000009 true true

([2],[0,2,3]) -> [2,0,2,3];
([2],[2]) -> [2,2];
([],[1,2]) -> [1,2];
([2,3,3],[2,0,0]) -> [3,3,2,2,0,0];
([0],[2,2]) -> [0,2,2];
([1],[3]) -> [1,3];
([0,1],[]) -> [1,0];
([2,2,2],[3,0,2]) -> [2,2,2,3,0,2];
([],[3,0]) -> [3,0];
([3,1],[0,2]) -> [1,3,0,2];
([2,3,2],[1,0]) -> [2,3,2,1,0];
([2,2],[2,3,2]) -> [2,2,2,3,2];
([1],[1,2]) -> [1,1,2];
([],[0,1,0]) -> [0,1,0];
([0],[0,0]) -> [0,0,0];
([0],[]) -> [0];
([],[]) -> [];
([1],[]) -> [1];
([2,3],[3,0]) -> [3,2,3,0];
([0],[3,2,0]) -> [0,3,2,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0102119999999 true true

([1,0],[]) -> [0,1];
([3,2,0],[1,3,3]) -> [0,2,3,1,3,3];
([2,1],[1]) -> [1,2,1];
([],[2]) -> [2];
([],[1,1,0]) -> [1,1,0];
([3],[0,1,2]) -> [3,0,1,2];
([3],[]) -> [3];
([1],[2,0]) -> [1,2,0];
([0,3],[]) -> [3,0];
([1],[3]) -> [1,3];
([2,1,3],[2,1]) -> [3,1,2,2,1];
([1],[]) -> [1];
([2,2],[]) -> [2,2];
([3],[2,2,1]) -> [3,2,2,1];
([],[0,2,2]) -> [0,2,2];
([1,0,2],[1]) -> [2,0,1,1];
([1,1],[]) -> [1,1];
([3,1],[0,2]) -> [1,3,0,2];
([],[3,0,2]) -> [3,0,2];
([2,0,1],[1,1]) -> [1,0,2,1,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0124929999999 true true

([],[]) -> [];
([3,3,2],[0,1]) -> [2,3,3,0,1];
([2],[0]) -> [2,0];
([3],[2]) -> [3,2];
([2,2,3],[1,0,3]) -> [3,2,2,1,0,3];
([3,3],[3,2]) -> [3,3,3,2];
([3],[]) -> [3];
([1],[]) -> [1];
([3,0,0],[3]) -> [0,0,3,3];
([2,0,3],[3]) -> [3,0,2,3];
([0,0,3],[]) -> [3,0,0];
([0],[]) -> [0];
([3,1,1],[2]) -> [1,1,3,2];
([0],[0]) -> [0,0];
([1,0],[2,1]) -> [0,1,2,1];
([2,3,1],[]) -> [1,3,2];
([2,0,2],[]) -> [2,0,2];
([],[3,2,3]) -> [3,2,3];
([3,2,1],[]) -> [1,2,3];
([1,1,3],[0]) -> [3,1,1,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.011426 true true

([3,0,2],[0,3]) -> [2,0,3,0,3];
([3,2,0],[2,1]) -> [0,2,3,2,1];
([1],[]) -> [1];
([2,0],[0,2,3]) -> [0,2,0,2,3];
([2,2],[0,3]) -> [2,2,0,3];
([],[3,1]) -> [3,1];
([2],[2,2,1]) -> [2,2,2,1];
([3],[2,0,0]) -> [3,2,0,0];
([],[1,1]) -> [1,1];
([3,1,3],[3]) -> [3,1,3,3];
([1,1],[3,3,0]) -> [1,1,3,3,0];
([1,1],[2,2,3]) -> [1,1,2,2,3];
([2],[2]) -> [2,2];
([0,3],[2,3,0]) -> [3,0,2,3,0];
([],[]) -> [];
([],[2]) -> [2];
([],[1,1,1]) -> [1,1,1];
([1,0,0],[3,0,3]) -> [0,0,1,3,0,3];
([2],[2,3]) -> [2,2,3];
([3,3,3],[]) -> [3,3,3];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00934800000005 true true

([1,3,3],[1,3]) -> [3,3,1,1,3];
([],[2]) -> [2];
([3,1],[]) -> [1,3];
([],[]) -> [];
([3,3,2],[0]) -> [2,3,3,0];
([1],[2]) -> [1,2];
([0,3],[2,1]) -> [3,0,2,1];
([1,1,1],[1,2,3]) -> [1,1,1,1,2,3];
([3],[1,1]) -> [3,1,1];
([],[2,3]) -> [2,3];
([1,1],[0,3,1]) -> [1,1,0,3,1];
([1],[3,2]) -> [1,3,2];
([3,3],[3,0,2]) -> [3,3,3,0,2];
([2],[]) -> [2];
([2],[2]) -> [2,2];
([3],[3,1,2]) -> [3,3,1,2];
([3],[2,3]) -> [3,2,3];
([1],[1,3,1]) -> [1,1,3,1];
([0,0],[0]) -> [0,0,0];
([],[2,1]) -> [2,1];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00960000000009 true true

([],[0,3,0]) -> [0,3,0];
([2,3,2],[]) -> [2,3,2];
([],[]) -> [];
([0],[2,3]) -> [0,2,3];
([1,0],[2,2]) -> [0,1,2,2];
([3,0],[2]) -> [0,3,2];
([3,1,1],[1,0,1]) -> [1,1,3,1,0,1];
([3],[]) -> [3];
([2],[2,0,2]) -> [2,2,0,2];
([0],[2]) -> [0,2];
([2],[3]) -> [2,3];
([2,2],[2]) -> [2,2,2];
([0],[1,0]) -> [0,1,0];
([0,3],[1,1]) -> [3,0,1,1];
([0,2,1],[0,3,1]) -> [1,2,0,0,3,1];
([1,1],[]) -> [1,1];
([],[3]) -> [3];
([],[0,1,2]) -> [0,1,2];
([0,1],[3]) -> [1,0,3];
([2,2,1],[]) -> [1,2,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00982500000009 true true

([],[0,1]) -> [0,1];
([2,3,0],[1,2,1]) -> [0,3,2,1,2,1];
([3,3,1],[3]) -> [1,3,3,3];
([],[3,3,2]) -> [3,3,2];
([1,2],[]) -> [2,1];
([0,0],[0,2,1]) -> [0,0,0,2,1];
([1,3,2],[1]) -> [2,3,1,1];
([2,0],[]) -> [0,2];
([0,2,0],[3]) -> [0,2,0,3];
([2],[0,2]) -> [2,0,2];
([1],[1,3]) -> [1,1,3];
([2,0,2],[2,3,0]) -> [2,0,2,2,3,0];
([3,3],[]) -> [3,3];
([3],[]) -> [3];
([2,2,2],[3,2]) -> [2,2,2,3,2];
([2,3],[3]) -> [3,2,3];
([],[0,0,2]) -> [0,0,2];
([2,1],[1,3]) -> [1,2,1,3];
([0,0],[3,0,0]) -> [0,0,3,0,0];
([3,3,2],[3,0,2]) -> [2,3,3,3,0,2];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.013639 true true

([0,1],[3,2]) -> [1,0,3,2];
([],[2]) -> [2];
([0],[1,3]) -> [0,1,3];
([3,1,2],[2,3]) -> [2,1,3,2,3];
([2,0],[]) -> [0,2];
([3,3,0],[3,0,0]) -> [0,3,3,3,0,0];
([1,2,0],[1]) -> [0,2,1,1];
([0,3],[]) -> [3,0];
([0,2],[3,0]) -> [2,0,3,0];
([0],[]) -> [0];
([3,0,3],[3]) -> [3,0,3,3];
([],[2,2]) -> [2,2];
([1,1,0],[2]) -> [0,1,1,2];
([],[1,0,2]) -> [1,0,2];
([],[2,1,2]) -> [2,1,2];
([0,0],[1,0]) -> [0,0,1,0];
([3,2],[3,0,3]) -> [2,3,3,0,3];
([0,2],[0]) -> [2,0,0];
([2,0,0],[3]) -> [0,0,2,3];
([3],[1,1,0]) -> [3,1,1,0];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0125479999999 true true

