[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00329899999997 false false

[3,1] -> [3,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00324300000011 false false

[1,2] -> [1,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00322200000005 false false

[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00271199999997 false false

[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00305400000002 false false

[3,1,3] -> [3,1,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00345599999991 false false

[2,0,0] -> [2,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [2, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00340499999993 false false

[1,1] -> [1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0032470000001 false false

[3,3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [3] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00334199999998 false false

[3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00306300000011 false false

[2,1,1] -> [2,1];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1, 1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00538400000005 false false

[0,0,2] -> [0,2];
[0,1] -> [0,1];

=================================
NOSOL

[2] -> [2];
[1,3] -> [1,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00326100000007 false false

[0,2,1] -> [0,2,1];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00291500000003 false false

[2] -> [2];
[0,2] -> [0,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00319399999989 false false

[3] -> [3];
[1,2,3] -> [1,2,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00297799999998 false false

[2] -> [2];
[3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0030220000001 false false

[0,0,3] -> [0,3];
[3] -> [3];

=================================
NOSOL

[0,1,1] -> [0,1];
[1,1,0] -> [1,0];

=================================
NOSOL

[0] -> [0];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00299700000005 false false

[1,1,2] -> [1,2];
[3,0] -> [3,0];
[2,2,2] -> [2];

=================================
NOSOL

[3,1,3] -> [3,1,3];
[0,1,2] -> [0,1,2];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0031570000001 false false

[1] -> [1];
[] -> [];
[1,1] -> [1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00441300000011 false false

[] -> [];
[2] -> [2];
[0,3,0] -> [0,3,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00294600000007 false false

[1,1] -> [1];
[2] -> [2];
[0] -> [0];

=================================
NOSOL

[1,1] -> [1];
[0,2,3] -> [0,2,3];
[2,3] -> [2,3];

=================================
NOSOL

[] -> [];
[1,2] -> [1,2];
[1] -> [1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00297999999998 false false

[0,0,1] -> [0,1];
[3] -> [3];
[1,3,3] -> [1,3];

=================================
NOSOL

[2] -> [2];
[3,2] -> [3,2];
[0,2,3] -> [0,2,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00325199999997 false false

[2,3] -> [2,3];
[] -> [];
[3,0,2] -> [3,0,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00272100000007 false false

[3,0] -> [3,0];
[0,0] -> [0];
[] -> [];
[2,2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              #2.2 y1

            Cons y3 -> 
              xs

        EQ y2 -> 
          [0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              #2.2 y1

            Cons y3 -> 
              xs

        EQ y2 -> 
          [0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0873349999999 false false

[] -> [];
[3,1] -> [3,1];
[2,2,2] -> [2];
[0,1,0] -> [0,1,0];

=================================
NOSOL

[] -> [];
[2,3,3] -> [2,3];
[1,0,0] -> [1,0];
[1,2] -> [1,2];

=================================
NOSOL

[0,3] -> [0,3];
[] -> [];
[1] -> [1];
[1,2,3] -> [1,2,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00271500000008 false false

[] -> [];
[3,1,2] -> [3,1,2];
[1,2] -> [1,2];
[2,2,1] -> [2,1];

=================================
NOSOL

[1] -> [1];
[] -> [];
[2,0] -> [2,0];
[0,0,2] -> [0,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          #2.2 y1

        S y2 -> 
          xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.019959 false false

[3] -> [3];
[2,3,0] -> [2,3,0];
[3,0,3] -> [3,0,3];
[3,1,0] -> [3,1,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00307300000009 false false

[1] -> [1];
[3] -> [3];
[1,2,2] -> [1,2];
[1,1] -> [1];

=================================
NOSOL

[] -> [];
[0,2,3] -> [0,2,3];
[0,3] -> [0,3];
[2,3] -> [2,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00272900000004 false false

[3,0,0] -> [3,0];
[2,2,3] -> [2,3];
[0,2,1] -> [0,2,1];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              []

            Cons y3 -> 
              [0, #2.1 y3, 1]

        S y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              [3, 0]

            Cons y3 -> 
              [2, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              []

            Cons y3 -> 
              [0, #2.1 y3, 1]

        S y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              [3, 0]

            Cons y3 -> 
              [2, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.131255 false false

[3,0,0] -> [3,0];
[3] -> [3];
[1] -> [1];
[3,3,2] -> [3,2];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0229959999999 false false

[2,3,3] -> [2,3];
[] -> [];
[2] -> [2];
[2,2,0] -> [2,0];
[2,0] -> [2,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (2, #2.2 y2)

            GT y3 -> 
              [2, 0]

            EQ y3 -> 
              [2, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (2, #2.2 y2)

            GT y3 -> 
              Cons
                ( 2
                , Cons (0, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              [2, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.400508 false false

[0,2] -> [0,2];
[0,3,1] -> [0,3,1];
[1,1] -> [1];
[] -> [];
[0] -> [0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          xs

        S y2 -> 
          #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0206989999999 false false

[0,1] -> [0,1];
[2,1] -> [2,1];
[1,0,3] -> [1,0,3];
[2,0] -> [2,0];
[3,2,2] -> [3,2];

=================================
NOSOL

[2,3] -> [2,3];
[] -> [];
[2] -> [2];
[2,1,0] -> [2,1,0];
[3,3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [2, #2.1 y2]

            GT y3 -> 
              Cons (2, Cons (#2.1 y2, #2.2 y2))

            EQ y3 -> 
              [3] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons
                ( 2
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            GT y3 -> 
              Cons (2, Cons (#2.1 y2, #2.2 y2))

            EQ y3 -> 
              [3] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.108681 false false

[2] -> [2];
[0,2] -> [0,2];
[3,2,1] -> [3,2,1];
[0,3] -> [0,3];
[1,3,1] -> [1,3,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00318900000002 false false

[3,3] -> [3];
[] -> [];
[3,2,2] -> [3,2];
[3,0,0] -> [3,0];
[2,0] -> [2,0];

=================================
NOSOL

[2,3] -> [2,3];
[3] -> [3];
[0,2,2] -> [0,2];
[3,0,0] -> [3,0];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          [#2.1 y1, #2.1 y2] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        (case #2.2 y1 of
          Nil y2 -> 
            (#2.1 y1, list_compress (#2.2 y1))

          Cons y2 -> 
            (#2.1 y1, [#2.1 y2])) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0379129999999 false false

[] -> [];
[1] -> [1];
[1,2] -> [1,2];
[0,3,3] -> [0,3];
[1,3] -> [1,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          [#2.1 y1, #2.1 y2] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons (#2.1 y1, list_compress (#2.2 y1))

        Cons y2 -> 
          [#2.1 y1, #2.1 y2] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.022489 false false

[2,1] -> [2,1];
[] -> [];
[0,3] -> [0,3];
[0,0] -> [0];
[0,2] -> [0,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              Cons (#2.1 y1, #2.2 y1)

        EQ y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              Cons (0, #2.2 y1)

            Cons y3 -> 
              [0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              Cons (#2.1 y1, #2.2 y1)

        EQ y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              Cons (0, #2.2 y1)

            Cons y3 -> 
              [0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.151176 false false

[0,1,1] -> [0,1];
[] -> [];
[3,1] -> [3,1];
[2,1] -> [2,1];
[3,1,2] -> [3,1,2];
[0] -> [0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons (#2.1 y1, #2.2 y1)

        EQ y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              [0]

            Cons y3 -> 
              Cons (0, #2.2 y3) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons (#2.1 y1, #2.2 y1)

        EQ y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              Cons (0, list_compress (#2.2 y1))

            Cons y3 -> 
              Cons (0, #2.2 y3) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.791512 false false

[] -> [];
[2] -> [2];
[2,2] -> [2];
[1,1] -> [1];
[2,1,3] -> [2,1,3];
[0] -> [0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [2]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( S (#2.1 y2)
                , Cons (#2.1 y2, #2.2 y2)
                )

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (2, list_compress (#2.2 y1))

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (2, Cons (#2.1 y2, #2.2 y2))

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.807634 false false

[1,2] -> [1,2];
[3,3] -> [3];
[3] -> [3];
[3,1,2] -> [3,1,2];
[] -> [];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [1, #2.1 y2]

            GT y3 -> 
              Cons (3, Cons (1, #2.2 y2))

            EQ y3 -> 
              [3] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons
                ( 1
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            GT y3 -> 
              Cons (3, Cons (1, #2.2 y2))

            EQ y3 -> 
              [3] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.612761 false false

[0] -> [0];
[] -> [];
[2,1,3] -> [2,1,3];
[1,2,1] -> [1,2,1];
[0,0] -> [0];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [0]

        S y2 -> 
          xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , case #2.1 y1 of
            Z y2 -> 
              []

            S y2 -> 
              list_compress (#2.2 y1)
        ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0189250000001 false false

[0,1] -> [0,1];
[0,0,2] -> [0,2];
[1,3,1] -> [1,3,1];
[] -> [];
[1,1,2] -> [1,2];
[1,2] -> [1,2];

=================================
NOSOL

[2,1] -> [2,1];
[2] -> [2];
[0] -> [0];
[] -> [];
[1,1,2] -> [1,2];
[3,2] -> [3,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [S (#2.1 y2), #2.1 y2]

            EQ y3 -> 
              [1, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( S (#2.1 y2)
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              [1, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.607423 false false

[3] -> [3];
[2] -> [2];
[0] -> [0];
[2,2,3] -> [2,3];
[3,3] -> [3];
[2,1,0] -> [2,1,0];

=================================
NOSOL

[] -> [];
[2,1,0] -> [2,1,0];
[2,0,0] -> [2,0];
[3,0] -> [3,0];
[2,2,3] -> [2,3];
[1,1,0] -> [1,0];

=================================
NOSOL

[2] -> [2];
[3,0] -> [3,0];
[2,0] -> [2,0];
[] -> [];
[3] -> [3];
[1,0] -> [1,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00279 false false

[3,1,2] -> [3,1,2];
[0] -> [0];
[1,1,3] -> [1,3];
[3] -> [3];
[3,1,0] -> [3,1,0];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (3, Cons (1, #2.2 y2))

            EQ y3 -> 
              [1, S (S (#2.1 y1))] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (3, list_compress (#2.2 y1))

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( S (S (#2.1 y2))
                , Cons (#2.1 y2, #2.2 y2)
                )

            EQ y3 -> 
              [1, S (S (#2.1 y1))] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.69713 false false

[0,1,3] -> [0,1,3];
[3] -> [3];
[] -> [];
[0,1,2] -> [0,1,2];
[2] -> [2];
[1,2] -> [1,2];
[1,1] -> [1];

=================================
STACKOVERFLOW

[] -> [];
[3,1] -> [3,1];
[2,3,3] -> [2,3];
[2,1,2] -> [2,1,2];
[1] -> [1];
[1,3] -> [1,3];
[2,1] -> [2,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [#2.1 y1, #2.1 y2]

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              ?? in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [#2.1 y1, #2.1 y2]

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              ?? in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.458396 false false

[3] -> [3];
[1,2,1] -> [1,2,1];
[2] -> [2];
[] -> [];
[1,3,0] -> [1,3,0];
[0,0,3] -> [0,3];
[2,2,0] -> [2,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (1, #2.2 y1)

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.852874 false false

[3] -> [3];
[1,0,1] -> [1,0,1];
[0] -> [0];
[] -> [];
[2,2,3] -> [2,3];
[3,0] -> [3,0];
[3,0,2] -> [3,0,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, Cons (0, #2.2 y2))

            EQ y3 -> 
              [2, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y1
                , Cons (0, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              [2, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.679727 false false

[1,3] -> [1,3];
[0,2,3] -> [0,2,3];
[2,2] -> [2];
[] -> [];
[2] -> [2];
[0,0,3] -> [0,3];
[0,3,3] -> [0,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              ??

            EQ y3 -> 
              #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              ??

            EQ y3 -> 
              #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.673435 false false

[3,2] -> [3,2];
[1,2] -> [1,2];
[] -> [];
[1] -> [1];
[0,3] -> [0,3];
[1,2,2] -> [1,2];
[2,3,3] -> [2,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          [#2.1 y1, #2.1 y2] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        (case #2.2 y1 of
          Nil y2 -> 
            (#2.1 y1, list_compress (#2.2 y1))

          Cons y2 -> 
            (#2.1 y1, [#2.1 y2])) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0412329999999 false false

[0,2] -> [0,2];
[1] -> [1];
[] -> [];
[3,0] -> [3,0];
[2,0] -> [2,0];
[1,1,1] -> [1];
[3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              xs

            Cons y3 -> 
              Cons (#2.1 y1, #2.2 y3)

        EQ y2 -> 
          Cons
            ( 0
            , Cons
                ( case #2.2 y1 of
                    Nil y3 -> 
                      0

                    Cons y3 -> 
                      #2.1 y3
                , case #2.2 y1 of
                    Nil y3 -> 
                      []

                    Cons y3 -> 
                      []
                )
            ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              xs

            Cons y3 -> 
              Cons (#2.1 y1, #2.2 y3)

        EQ y2 -> 
          Cons
            ( 0
            , Cons
                ( case #2.2 y1 of
                    Nil y3 -> 
                      0

                    Cons y3 -> 
                      #2.1 y3
                , case #2.2 y1 of
                    Nil y3 -> 
                      []

                    Cons y3 -> 
                      []
                )
            ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.444327 false false

[0,1] -> [0,1];
[] -> [];
[3] -> [3];
[1,3] -> [1,3];
[2,1] -> [2,1];
[3,1] -> [3,1];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00278600000001 false false

[0,2] -> [0,2];
[1,0,3] -> [1,0,3];
[2,1] -> [2,1];
[2] -> [2];
[3,0] -> [3,0];
[3,1] -> [3,1];
[3,2] -> [3,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00350400000002 false false

[3] -> [3];
[1,0,0] -> [1,0];
[3,0] -> [3,0];
[] -> [];
[1] -> [1];
[0,0,1] -> [0,1];
[2,1,0] -> [2,1,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              xs

            Cons y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

        EQ y2 -> 
          #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              xs

            Cons y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

        EQ y2 -> 
          #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.944602 false false

[0,2] -> [0,2];
[] -> [];
[1,2,3] -> [1,2,3];
[1,0] -> [1,0];
[0,3] -> [0,3];
[2] -> [2];
[1,2] -> [1,2];
[2,1,0] -> [2,1,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00293499999998 false false

[2,2] -> [2];
[3,3,3] -> [3];
[3,0] -> [3,0];
[] -> [];
[1,2,1] -> [1,2,1];
[1,1] -> [1];
[1,0] -> [1,0];
[2,2,1] -> [2,1];

=================================
NOSOL

[3,1,2] -> [3,1,2];
[3] -> [3];
[] -> [];
[0] -> [0];
[3,3,3] -> [3];
[0,2,3] -> [0,2,3];
[2,0] -> [2,0];
[1] -> [1];

=================================
None
[1,2,3] -> [1,2,3];
[] -> [];
[0] -> [0];
[3,3] -> [3];
[1,3] -> [1,3];
[1,0,2] -> [1,0,2];
[1,2,2] -> [1,2];
[0,2] -> [0,2];

=================================
None
[1] -> [1];
[1,1] -> [1];
[0,0,1] -> [0,1];
[0,2,0] -> [0,2,0];
[1,2] -> [1,2];
[1,0,3] -> [1,0,3];
[3] -> [3];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, Cons (#2.1 y2, #2.2 y2))

            GT y3 -> 
              Cons (1, Cons (0, #2.2 y2))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons
                ( #2.1 y1
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            GT y3 -> 
              Cons (1, Cons (0, #2.2 y2))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.055742 false false

[2,0,1] -> [2,0,1];
[] -> [];
[0] -> [0];
[1,2,1] -> [1,2,1];
[1,1,1] -> [1];
[3] -> [3];
[2,2] -> [2];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (1, Cons (#2.1 y2, #2.2 y2))

            GT y3 -> 
              Cons (2, Cons (0, #2.2 y2))

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons
                ( 1
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            GT y3 -> 
              Cons (2, Cons (0, #2.2 y2))

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.232832 false false

[2,2,2] -> [2];
[1,0,0] -> [1,0];
[2] -> [2];
[3,2] -> [3,2];
[2,1,2] -> [2,1,2];
[0,3] -> [0,3];
[1] -> [1];
[3,1] -> [3,1];

=================================
NOSOL

[] -> [];
[3,1] -> [3,1];
[1] -> [1];
[0,0,1] -> [0,1];
[1,1] -> [1];
[3] -> [3];
[0,1] -> [0,1];
[2,0,3] -> [2,0,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, #2.2 y1)

            GT y3 -> 
              Cons
                ( S (S (#2.1 y2))
                , Cons (#2.1 y2, #2.2 y2)
                )

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, #2.2 y1)

            GT y3 -> 
              Cons
                ( S (S (#2.1 y2))
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.923145 false false

[] -> [];
[3,2] -> [3,2];
[2] -> [2];
[1,2,2] -> [1,2];
[2,2,0] -> [2,0];
[3,0] -> [3,0];
[0,0] -> [0];
[0,3,1] -> [0,3,1];

=================================
None
[] -> [];
[0] -> [0];
[2] -> [2];
[1] -> [1];
[0,0,1] -> [0,1];
[0,2,3] -> [0,2,3];
[0,2] -> [0,2];
[0,0,2] -> [0,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, Cons (#2.1 y2, #2.2 y2))

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (0, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons
                ( 0
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (0, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.275825 false false

[2,1,3] -> [2,1,3];
[3] -> [3];
[1,1] -> [1];
[3,1] -> [3,1];
[] -> [];
[0,0] -> [0];
[0,3] -> [0,3];
[1] -> [1];
[1,2,0] -> [1,2,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.566516 false false

[0,3] -> [0,3];
[1,0] -> [1,0];
[0] -> [0];
[2] -> [2];
[0,1] -> [0,1];
[2,2] -> [2];
[1] -> [1];
[1,1,3] -> [1,3];
[1,3,1] -> [1,3,1];

=================================
NOSOL

[3,3,2] -> [3,2];
[2] -> [2];
[3] -> [3];
[] -> [];
[3,2,1] -> [3,2,1];
[0,0,2] -> [0,2];
[2,1,1] -> [2,1];
[2,0,2] -> [2,0,2];
[3,2,0] -> [3,2,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            ( #2.1 y1
            , Nil
                (case #2.1 y1 of
                  Z y3 -> 
                    ()

                  S y3 -> 
                    ())
            )

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [0, 2]

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            ( #2.1 y1
            , Nil
                (case #2.1 y1 of
                  Z y3 -> 
                    ()

                  S y3 -> 
                    ())
            )

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [0, 2]

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
6.365293 false false

[] -> [];
[3] -> [3];
[0,3,0] -> [0,3,0];
[3,2,0] -> [3,2,0];
[1] -> [1];
[3,3] -> [3];
[0,2] -> [0,2];
[1,2] -> [1,2];
[0] -> [0];

=================================
None
[0,1,2] -> [0,1,2];
[1] -> [1];
[2,2,0] -> [2,0];
[1,3,3] -> [1,3];
[0,1,3] -> [0,1,3];
[2,1] -> [2,1];
[0,0] -> [0];
[] -> [];
[1,2] -> [1,2];

=================================
None
[0,3,2] -> [0,3,2];
[0] -> [0];
[2] -> [2];
[2,3] -> [2,3];
[] -> [];
[1,2] -> [1,2];
[3,1,3] -> [3,1,3];
[1,2,2] -> [1,2];
[3] -> [3];

=================================
None
[] -> [];
[0] -> [0];
[2,1] -> [2,1];
[2,2] -> [2];
[1,0,2] -> [1,0,2];
[2] -> [2];
[3,1] -> [3,1];
[3,3,3] -> [3];
[3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.335351 false false

[2,2,0] -> [2,0];
[0,3,2] -> [0,3,2];
[2,2] -> [2];
[0,0,2] -> [0,2];
[0,1] -> [0,1];
[0,0,0] -> [0];
[3,3] -> [3];
[2,2,3] -> [2,3];
[3,1] -> [3,1];

=================================
NOSOL

[] -> [];
[1,3] -> [1,3];
[1,0] -> [1,0];
[3,0] -> [3,0];
[3,3,0] -> [3,0];
[2,3] -> [2,3];
[0,2] -> [0,2];
[1,2] -> [1,2];
[3,2,2] -> [3,2];

=================================
NOSOL

[1,1] -> [1];
[1,2,3] -> [1,2,3];
[2] -> [2];
[1] -> [1];
[] -> [];
[3,2] -> [3,2];
[0] -> [0];
[1,0,2] -> [1,0,2];
[1,1,1] -> [1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (1, Cons (#2.1 y2, #2.2 y2))

            GT y3 -> 
              Cons
                ( S (#2.1 y2)
                , Cons (#2.1 y2, #2.2 y2)
                )

            EQ y3 -> 
              [1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons
                ( 1
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            GT y3 -> 
              Cons
                ( S (#2.1 y2)
                , Cons (#2.1 y2, #2.2 y2)
                )

            EQ y3 -> 
              [1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.131276 false false

[3] -> [3];
[2,1] -> [2,1];
[2,0] -> [2,0];
[1,1,0] -> [1,0];
[] -> [];
[0] -> [0];
[2,1,1] -> [2,1];
[1,3,2] -> [1,3,2];
[1,1,1] -> [1];
[0,3,0] -> [0,3,0];

=================================
None
[2,2] -> [2];
[0,0] -> [0];
[3] -> [3];
[3,2,2] -> [3,2];
[2] -> [2];
[1] -> [1];
[3,0] -> [3,0];
[] -> [];
[1,3] -> [1,3];
[2,3,1] -> [2,3,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (3, list_compress (#2.2 y1))

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (3, list_compress (#2.2 y1))

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.39768 false false

[2,2,0] -> [2,0];
[] -> [];
[2,1] -> [2,1];
[3,2] -> [3,2];
[0,3] -> [0,3];
[3] -> [3];
[3,1] -> [3,1];
[0,2,1] -> [0,2,1];
[0,0] -> [0];
[2,3] -> [2,3];

=================================
None
[3] -> [3];
[3,0] -> [3,0];
[2] -> [2];
[] -> [];
[2,0] -> [2,0];
[0,0] -> [0];
[1] -> [1];
[2,0,3] -> [2,0,3];
[0,2] -> [0,2];
[0] -> [0];

=================================
None
[3,3] -> [3];
[] -> [];
[2] -> [2];
[0] -> [0];
[0,1,0] -> [0,1,0];
[3] -> [3];
[1,0] -> [1,0];
[1,1,2] -> [1,2];
[1,2] -> [1,2];
[3,3,3] -> [3];

=================================
None
[2] -> [2];
[1] -> [1];
[] -> [];
[2,2,2] -> [2];
[0,0] -> [0];
[0,0,1] -> [0,1];
[0] -> [0];
[3,1,0] -> [3,1,0];
[3,3] -> [3];
[1,2] -> [1,2];

=================================
None
[0,0,3] -> [0,3];
[3] -> [3];
[3,0,0] -> [3,0];
[] -> [];
[3,2,0] -> [3,2,0];
[2,1,3] -> [2,1,3];
[2,1] -> [2,1];
[3,0] -> [3,0];
[2] -> [2];
[0,0] -> [0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              xs

            Cons y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

        EQ y2 -> 
          #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              xs

            Cons y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

        EQ y2 -> 
          #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.993443 false false

[2,2] -> [2];
[] -> [];
[3,0] -> [3,0];
[2] -> [2];
[1] -> [1];
[3,2,2] -> [3,2];
[0,1,1] -> [0,1];
[3,1] -> [3,1];
[3] -> [3];
[3,3,2] -> [3,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, #2.2 y2)

            GT y3 -> 
              Cons (3, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, #2.2 y2)

            GT y3 -> 
              Cons (3, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
7.640604 false false

[0] -> [0];
[3,1] -> [3,1];
[2,1,3] -> [2,1,3];
[0,1,0] -> [0,1,0];
[1,0,1] -> [1,0,1];
[3,1,1] -> [3,1];
[2,0] -> [2,0];
[0,1,2] -> [0,1,2];
[0,0,0] -> [0];
[1,2,3] -> [1,2,3];

=================================
NOSOL

[3,1,3] -> [3,1,3];
[0] -> [0];
[] -> [];
[2,3,3] -> [2,3];
[1] -> [1];
[3,1] -> [3,1];
[0,3,2] -> [0,3,2];
[3,2,2] -> [3,2];
[2] -> [2];
[2,1] -> [2,1];

=================================
None
[3] -> [3];
[2,2,3] -> [2,3];
[1] -> [1];
[] -> [];
[3,0,3] -> [3,0,3];
[3,2] -> [3,2];
[1,3,1] -> [1,3,1];
[2,1] -> [2,1];
[2] -> [2];
[1,1,3] -> [1,3];
[3,3,3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.895594 false false

[2,3] -> [2,3];
[3,2,0] -> [3,2,0];
[0,1] -> [0,1];
[2,1] -> [2,1];
[1,2] -> [1,2];
[] -> [];
[2,0] -> [2,0];
[0,1,3] -> [0,1,3];
[0,2] -> [0,2];
[2,3,3] -> [2,3];
[1] -> [1];

=================================
None
[] -> [];
[2] -> [2];
[2,0,2] -> [2,0,2];
[3,1,2] -> [3,1,2];
[3,2,0] -> [3,2,0];
[2,3] -> [2,3];
[1,1,0] -> [1,0];
[0,1] -> [0,1];
[3,3] -> [3];
[0,3,1] -> [0,3,1];
[2,1,1] -> [2,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
23.537261 false false

[2,3] -> [2,3];
[0,1] -> [0,1];
[2,3,0] -> [2,3,0];
[2,0,2] -> [2,0,2];
[2,1,2] -> [2,1,2];
[3,3,0] -> [3,0];
[] -> [];
[0] -> [0];
[0,1,2] -> [0,1,2];
[1] -> [1];
[1,2] -> [1,2];

=================================
None
[3,1] -> [3,1];
[2,3] -> [2,3];
[] -> [];
[2,3,3] -> [2,3];
[1,2] -> [1,2];
[3,3] -> [3];
[3,2] -> [3,2];
[2,0] -> [2,0];
[0] -> [0];
[0,1,0] -> [0,1,0];
[2] -> [2];

=================================
None
[] -> [];
[0,3,1] -> [0,3,1];
[0,3] -> [0,3];
[1] -> [1];
[3,1] -> [3,1];
[2] -> [2];
[1,3] -> [1,3];
[0,1,3] -> [0,1,3];
[0] -> [0];
[2,0,0] -> [2,0];
[3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              [#2.1 y1]

            Cons y3 -> 
              [#2.1 y1, #2.1 y3]

        EQ y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              [0]

            Cons y3 -> 
              Cons (0, #2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            Cons y3 -> 
              [#2.1 y1, #2.1 y3]

        EQ y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              [0]

            Cons y3 -> 
              Cons (0, #2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.769959 false false

[2,3] -> [2,3];
[3,3,1] -> [3,1];
[] -> [];
[0,0] -> [0];
[0,1] -> [0,1];
[2] -> [2];
[3,3] -> [3];
[0,3,2] -> [0,3,2];
[3] -> [3];
[1,3,3] -> [1,3];
[1,1,2] -> [1,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              [3, #2.1 y2]

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              [3, #2.1 y2]

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
11.598313 false false

[1,1] -> [1];
[1,1,2] -> [1,2];
[] -> [];
[3] -> [3];
[0,0,2] -> [0,2];
[2,2] -> [2];
[2] -> [2];
[3,3,1] -> [3,1];
[0,1,1] -> [0,1];
[1] -> [1];
[0,1] -> [0,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, list_compress (#2.2 y1))

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, list_compress (#2.2 y1))

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
8.582846 false false

[] -> [];
[0,0,3] -> [0,3];
[2,3,0] -> [2,3,0];
[3,2] -> [3,2];
[3,2,0] -> [3,2,0];
[1] -> [1];
[2] -> [2];
[1,2,0] -> [1,2,0];
[2,3,3] -> [2,3];
[0] -> [0];
[3] -> [3];

=================================
None
[0,0] -> [0];
[] -> [];
[2,2] -> [2];
[1,2] -> [1,2];
[1,3] -> [1,3];
[1,0] -> [1,0];
[2] -> [2];
[3] -> [3];
[1,2,2] -> [1,2];
[0,0,2] -> [0,2];
[0,2,1] -> [0,2,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
5.626945 false false

[] -> [];
[0] -> [0];
[3,3] -> [3];
[1,1,2] -> [1,2];
[0,0,1] -> [0,1];
[1] -> [1];
[0,3] -> [0,3];
[0,2,2] -> [0,2];
[2,3] -> [2,3];
[3,1] -> [3,1];
[2,0,2] -> [2,0,2];
[3,0] -> [3,0];

=================================
None
[2,2] -> [2];
[] -> [];
[0,0] -> [0];
[0,2] -> [0,2];
[1,3,2] -> [1,3,2];
[2,0] -> [2,0];
[1] -> [1];
[2,0,1] -> [2,0,1];
[2,3,0] -> [2,3,0];
[0,3,1] -> [0,3,1];
[0,2,1] -> [0,2,1];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (2, #2.2 y1)

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons
                ( 2
                , Cons (0, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
34.02066 false false

[0,1] -> [0,1];
[3] -> [3];
[2,2,0] -> [2,0];
[0,1,1] -> [0,1];
[0,0] -> [0];
[2,3,3] -> [2,3];
[0] -> [0];
[3,0,0] -> [3,0];
[2,1] -> [2,1];
[2] -> [2];
[] -> [];
[3,2,1] -> [3,2,1];

=================================
None
[0,2,1] -> [0,2,1];
[2] -> [2];
[3] -> [3];
[3,2,3] -> [3,2,3];
[] -> [];
[1] -> [1];
[0,2] -> [0,2];
[2,3,0] -> [2,3,0];
[1,0,1] -> [1,0,1];
[2,0,0] -> [2,0];
[3,1,0] -> [3,1,0];
[0] -> [0];

=================================
None
[2,1,0] -> [2,1,0];
[0,3,3] -> [0,3];
[] -> [];
[3,1] -> [3,1];
[3] -> [3];
[2,3] -> [2,3];
[2] -> [2];
[1,0] -> [1,0];
[3,0] -> [3,0];
[3,0,1] -> [3,0,1];
[0,3,2] -> [0,3,2];
[3,2] -> [3,2];

=================================
None
[3,1,2] -> [3,1,2];
[] -> [];
[0] -> [0];
[2] -> [2];
[0,0] -> [0];
[3] -> [3];
[1] -> [1];
[2,0] -> [2,0];
[3,1] -> [3,1];
[1,3] -> [1,3];
[2,0,0] -> [2,0];
[1,0,0] -> [1,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , case #2.1 y1 of
            Z y2 -> 
              []

            S y2 -> 
              list_compress (#2.2 y1)
        ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , case #2.1 y1 of
            Z y2 -> 
              []

            S y2 -> 
              list_compress (#2.2 y1)
        ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.028014 false false

[2,2,0] -> [2,0];
[2,1,0] -> [2,1,0];
[3,0] -> [3,0];
[0] -> [0];
[3,3] -> [3];
[0,3,1] -> [0,3,1];
[0,3,2] -> [0,3,2];
[1,1,1] -> [1];
[] -> [];
[0,3] -> [0,3];
[3,1,3] -> [3,1,3];
[3] -> [3];

=================================
None
[3] -> [3];
[2,1,3] -> [2,1,3];
[] -> [];
[2,1] -> [2,1];
[0,1] -> [0,1];
[1,1,0] -> [1,0];
[1,2] -> [1,2];
[0,1,3] -> [0,1,3];
[3,1] -> [3,1];
[3,1,3] -> [3,1,3];
[0] -> [0];
[3,0,3] -> [3,0,3];

=================================
None
[3,3,3] -> [3];
[] -> [];
[0,0,2] -> [0,2];
[1,1,3] -> [1,3];
[1] -> [1];
[3] -> [3];
[2,1] -> [2,1];
[0,3] -> [0,3];
[3,3,2] -> [3,2];
[0] -> [0];
[2] -> [2];
[1,2] -> [1,2];

=================================
None
[] -> [];
[3,0] -> [3,0];
[2] -> [2];
[2,1] -> [2,1];
[0] -> [0];
[0,3] -> [0,3];
[0,3,3] -> [0,3];
[1] -> [1];
[2,0] -> [2,0];
[1,0,2] -> [1,0,2];
[1,3,3] -> [1,3];
[2,0,0] -> [2,0];

=================================
None
[0,0] -> [0];
[0,2] -> [0,2];
[] -> [];
[0,3,3] -> [0,3];
[0] -> [0];
[3,2,1] -> [3,2,1];
[3,2,3] -> [3,2,3];
[3,0,1] -> [3,0,1];
[2,3,1] -> [2,3,1];
[0,2,3] -> [0,2,3];
[0,3] -> [0,3];
[1,0] -> [1,0];
[1] -> [1];

=================================
None
[1,1] -> [1];
[2,2,0] -> [2,0];
[] -> [];
[2,1,1] -> [2,1];
[3] -> [3];
[2] -> [2];
[2,1,2] -> [2,1,2];
[1] -> [1];
[0,0] -> [0];
[0,2] -> [0,2];
[3,2,0] -> [3,2,0];
[2,2,2] -> [2];
[3,1] -> [3,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [#2.1 y1, #2.1 y2]

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [#2.1 y1, #2.1 y2]

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
61.460103 false false

[0,3,3] -> [0,3];
[3,1,1] -> [3,1];
[] -> [];
[2,3] -> [2,3];
[3,2] -> [3,2];
[2] -> [2];
[2,1] -> [2,1];
[2,3,3] -> [2,3];
[1] -> [1];
[3,1] -> [3,1];
[3] -> [3];
[0] -> [0];
[2,1,2] -> [2,1,2];

=================================
None
[0] -> [0];
[] -> [];
[3,2,2] -> [3,2];
[0,1] -> [0,1];
[3] -> [3];
[0,1,1] -> [0,1];
[1,1] -> [1];
[1,2,0] -> [1,2,0];
[1,2] -> [1,2];
[1,1,3] -> [1,3];
[1,0,1] -> [1,0,1];
[1,3] -> [1,3];
[2,1] -> [2,1];

=================================
None
[0] -> [0];
[1] -> [1];
[] -> [];
[2] -> [2];
[0,2] -> [0,2];
[3,0,1] -> [3,0,1];
[1,3,3] -> [1,3];
[3,0] -> [3,0];
[1,2,1] -> [1,2,1];
[1,2] -> [1,2];
[3] -> [3];
[3,1,0] -> [3,1,0];
[1,1,2] -> [1,2];

=================================
None
[1,3] -> [1,3];
[2,3,0] -> [2,3,0];
[] -> [];
[0,3] -> [0,3];
[0] -> [0];
[2,1,1] -> [2,1];
[2] -> [2];
[1] -> [1];
[1,1] -> [1];
[0,1] -> [0,1];
[1,3,0] -> [1,3,0];
[3,0,2] -> [3,0,2];
[3,2,1] -> [3,2,1];

=================================
None
[] -> [];
[3] -> [3];
[1] -> [1];
[3,1,0] -> [3,1,0];
[0,3] -> [0,3];
[2] -> [2];
[2,3] -> [2,3];
[0,3,0] -> [0,3,0];
[0] -> [0];
[3,3,1] -> [3,1];
[1,2] -> [1,2];
[0,1,0] -> [0,1,0];
[0,2,0] -> [0,2,0];

=================================
None
[3,1] -> [3,1];
[1,3,2] -> [1,3,2];
[1,2] -> [1,2];
[2] -> [2];
[2,3] -> [2,3];
[0] -> [0];
[3,0,0] -> [3,0];
[0,1] -> [0,1];
[2,0] -> [2,0];
[3] -> [3];
[] -> [];
[0,0] -> [0];
[1,0] -> [1,0];

=================================
None
[0,2,3] -> [0,2,3];
[2,3] -> [2,3];
[3,3] -> [3];
[1,2] -> [1,2];
[3,2] -> [3,2];
[3] -> [3];
[1,1,1] -> [1];
[3,1] -> [3,1];
[0,3] -> [0,3];
[] -> [];
[0] -> [0];
[1] -> [1];
[2] -> [2];

=================================
None
[3,1] -> [3,1];
[2] -> [2];
[2,1,0] -> [2,1,0];
[0,3,2] -> [0,3,2];
[] -> [];
[2,0,1] -> [2,0,1];
[0,0,3] -> [0,3];
[1,2] -> [1,2];
[3,0] -> [3,0];
[3,3,0] -> [3,0];
[1,0,0] -> [1,0];
[2,2,2] -> [2];
[1,3,1] -> [1,3,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              xs

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              xs

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
54.246392 false false

[0,0,1] -> [0,1];
[1] -> [1];
[3,1,0] -> [3,1,0];
[2,1,0] -> [2,1,0];
[2] -> [2];
[3] -> [3];
[0,1,3] -> [0,1,3];
[0,0,0] -> [0];
[] -> [];
[0,2,2] -> [0,2];
[2,0,3] -> [2,0,3];
[1,0,0] -> [1,0];
[1,1,1] -> [1];
[1,2] -> [1,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) 0 of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) 0 of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
75.051716 true true

[3,1,0] -> [3,1,0];
[2,0] -> [2,0];
[0,1,3] -> [0,1,3];
[1,1] -> [1];
[] -> [];
[1,0,1] -> [1,0,1];
[0] -> [0];
[1] -> [1];
[0,1,2] -> [0,1,2];
[2] -> [2];
[1,2] -> [1,2];
[2,2] -> [2];
[2,3,1] -> [2,3,1];
[0,2,2] -> [0,2];

=================================
None
[1,3] -> [1,3];
[2,3,0] -> [2,3,0];
[3,1,0] -> [3,1,0];
[3,0] -> [3,0];
[1] -> [1];
[3] -> [3];
[2,3] -> [2,3];
[] -> [];
[3,2] -> [3,2];
[0,2] -> [0,2];
[0,0] -> [0];
[0] -> [0];
[2,1,2] -> [2,1,2];
[3,1,1] -> [3,1];

=================================
None
[3] -> [3];
[2,0] -> [2,0];
[0,0,0] -> [0];
[] -> [];
[0,2,2] -> [0,2];
[3,2,0] -> [3,2,0];
[2,1,0] -> [2,1,0];
[1] -> [1];
[0,1,3] -> [0,1,3];
[3,2,1] -> [3,2,1];
[3,2] -> [3,2];
[1,2] -> [1,2];
[3,3] -> [3];
[0,1,2] -> [0,1,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              xs

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              xs

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
84.297835 false false

[] -> [];
[0] -> [0];
[1] -> [1];
[1,2,3] -> [1,2,3];
[3,2] -> [3,2];
[3] -> [3];
[1,0] -> [1,0];
[0,1,1] -> [0,1];
[2,0,2] -> [2,0,2];
[0,2,1] -> [0,2,1];
[3,1] -> [3,1];
[2,1,2] -> [2,1,2];
[0,0] -> [0];
[2,3] -> [2,3];

=================================
None
[2,2] -> [2];
[0] -> [0];
[3] -> [3];
[0,1,0] -> [0,1,0];
[3,1] -> [3,1];
[1,3,3] -> [1,3];
[] -> [];
[2,0] -> [2,0];
[0,0] -> [0];
[1,0] -> [1,0];
[2,1] -> [2,1];
[2,2,1] -> [2,1];
[2,2,3] -> [2,3];
[2] -> [2];

=================================
None
[0,2] -> [0,2];
[0] -> [0];
[0,3] -> [0,3];
[1] -> [1];
[3] -> [3];
[2,1] -> [2,1];
[] -> [];
[0,0,3] -> [0,3];
[0,1] -> [0,1];
[3,0] -> [3,0];
[3,1,0] -> [3,1,0];
[1,2,3] -> [1,2,3];
[1,3,3] -> [1,3];
[2,3,2] -> [2,3,2];

=================================
None
[] -> [];
[1,1,3] -> [1,3];
[1,2,0] -> [1,2,0];
[1] -> [1];
[2,0,0] -> [2,0];
[2,1] -> [2,1];
[2] -> [2];
[3,2] -> [3,2];
[0,0] -> [0];
[0,2] -> [0,2];
[2,3] -> [2,3];
[3,2,2] -> [3,2];
[0,1,0] -> [0,1,0];
[1,0,1] -> [1,0,1];

=================================
None
[3] -> [3];
[3,0,3] -> [3,0,3];
[] -> [];
[1,2] -> [1,2];
[2,1,2] -> [2,1,2];
[2,3] -> [2,3];
[2,0] -> [2,0];
[3,0,2] -> [3,0,2];
[0,0,0] -> [0];
[1,0] -> [1,0];
[2] -> [2];
[1,2,2] -> [1,2];
[3,1] -> [3,1];
[1] -> [1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
93.882683 false false

[1,2] -> [1,2];
[0] -> [0];
[] -> [];
[1,3] -> [1,3];
[3,1,2] -> [3,1,2];
[0,3,1] -> [0,3,1];
[3,3,1] -> [3,1];
[3] -> [3];
[0,1,0] -> [0,1,0];
[2,1] -> [2,1];
[3,3] -> [3];
[2] -> [2];
[0,3] -> [0,3];
[0,0,0] -> [0];

=================================
None
[2] -> [2];
[0] -> [0];
[] -> [];
[1,1,0] -> [1,0];
[3,3,3] -> [3];
[0,2] -> [0,2];
[1] -> [1];
[2,2] -> [2];
[3] -> [3];
[2,0,0] -> [2,0];
[0,2,0] -> [0,2,0];
[0,2,3] -> [0,2,3];
[2,3] -> [2,3];
[3,2,1] -> [3,2,1];
[2,0] -> [2,0];

=================================
None
[] -> [];
[0] -> [0];
[1,2,2] -> [1,2];
[2,3,1] -> [2,3,1];
[1,0] -> [1,0];
[2] -> [2];
[2,3,2] -> [2,3,2];
[0,0,3] -> [0,3];
[3] -> [3];
[2,1] -> [2,1];
[0,3,2] -> [0,3,2];
[1,0,3] -> [1,0,3];
[2,3,0] -> [2,3,0];
[3,2] -> [3,2];
[1] -> [1];

=================================
None
[0,1,0] -> [0,1,0];
[] -> [];
[2,2,2] -> [2];
[0] -> [0];
[0,1] -> [0,1];
[2,3] -> [2,3];
[2,0,1] -> [2,0,1];
[3,0] -> [3,0];
[2,0,0] -> [2,0];
[2,0] -> [2,0];
[3,1,0] -> [3,1,0];
[1,1] -> [1];
[2] -> [2];
[3,2] -> [3,2];
[3] -> [3];

=================================
None
[0] -> [0];
[1,2] -> [1,2];
[] -> [];
[3,1,1] -> [3,1];
[2] -> [2];
[3] -> [3];
[3,1] -> [3,1];
[1,0] -> [1,0];
[1,3] -> [1,3];
[0,3,3] -> [0,3];
[0,1,1] -> [0,1];
[1] -> [1];
[1,1] -> [1];
[2,3] -> [2,3];
[2,3,2] -> [2,3,2];

=================================
None
[3,1,1] -> [3,1];
[] -> [];
[2,1,2] -> [2,1,2];
[1,1,3] -> [1,3];
[2,1] -> [2,1];
[1,3] -> [1,3];
[0,0] -> [0];
[1] -> [1];
[1,2] -> [1,2];
[3] -> [3];
[0] -> [0];
[3,0,2] -> [3,0,2];
[2,3] -> [2,3];
[0,0,2] -> [0,2];
[3,2,2] -> [3,2];

=================================
None
[3,3] -> [3];
[0] -> [0];
[1] -> [1];
[1,1] -> [1];
[2,1] -> [2,1];
[3,2,3] -> [3,2,3];
[3,1] -> [3,1];
[] -> [];
[3] -> [3];
[0,1] -> [0,1];
[1,1,3] -> [1,3];
[0,3,2] -> [0,3,2];
[3,1,0] -> [3,1,0];
[2,3] -> [2,3];
[2,0] -> [2,0];

=================================
None
[2] -> [2];
[] -> [];
[3] -> [3];
[0,0,3] -> [0,3];
[2,1] -> [2,1];
[0] -> [0];
[1] -> [1];
[3,1,0] -> [3,1,0];
[2,2] -> [2];
[3,3] -> [3];
[0,3] -> [0,3];
[3,3,2] -> [3,2];
[2,3,1] -> [2,3,1];
[3,0,0] -> [3,0];
[2,3,0] -> [2,3,0];

=================================
None
[3] -> [3];
[3,0,3] -> [3,0,3];
[] -> [];
[1] -> [1];
[1,3] -> [1,3];
[1,1,2] -> [1,2];
[1,1,3] -> [1,3];
[3,3,1] -> [3,1];
[0,0] -> [0];
[0,0,1] -> [0,1];
[1,2] -> [1,2];
[0,3] -> [0,3];
[2,0] -> [2,0];
[2] -> [2];
[0] -> [0];

=================================
None
[3,1] -> [3,1];
[] -> [];
[0,2] -> [0,2];
[3,0] -> [3,0];
[0,3,1] -> [0,3,1];
[3,3,2] -> [3,2];
[2,2,0] -> [2,0];
[1] -> [1];
[1,1] -> [1];
[1,2] -> [1,2];
[3] -> [3];
[3,2,2] -> [3,2];
[2] -> [2];
[0,3,0] -> [0,3,0];
[0,3] -> [0,3];

=================================
None
[0,2,1] -> [0,2,1];
[2] -> [2];
[1,1,2] -> [1,2];
[3,3] -> [3];
[3,3,3] -> [3];
[1,1] -> [1];
[2,3,1] -> [2,3,1];
[0,2] -> [0,2];
[1,2] -> [1,2];
[1] -> [1];
[3] -> [3];
[1,0] -> [1,0];
[2,2] -> [2];
[0] -> [0];
[2,3] -> [2,3];

=================================
NOSOL

[3,0,2] -> [3,0,2];
[1,3] -> [1,3];
[] -> [];
[1] -> [1];
[3,1,3] -> [3,1,3];
[1,1,0] -> [1,0];
[2,1,0] -> [2,1,0];
[0,2,2] -> [0,2];
[0,2,1] -> [0,2,1];
[2,1] -> [2,1];
[3,1] -> [3,1];
[1,0,2] -> [1,0,2];
[1,2] -> [1,2];
[1,2,2] -> [1,2];
[2,1,3] -> [2,1,3];
[1,3,3] -> [1,3];

=================================
None
[] -> [];
[3,3] -> [3];
[0,0] -> [0];
[0] -> [0];
[2,0] -> [2,0];
[2,2,3] -> [2,3];
[2] -> [2];
[3,1,3] -> [3,1,3];
[3] -> [3];
[0,3] -> [0,3];
[2,3] -> [2,3];
[2,1,3] -> [2,1,3];
[0,2,3] -> [0,2,3];
[1,2] -> [1,2];
[3,3,3] -> [3];
[2,2,2] -> [2];

=================================
None
[2,0,3] -> [2,0,3];
[3,1,2] -> [3,1,2];
[0,1,2] -> [0,1,2];
[1] -> [1];
[0,3] -> [0,3];
[1,0] -> [1,0];
[3,3,2] -> [3,2];
[] -> [];
[3] -> [3];
[1,1] -> [1];
[1,1,2] -> [1,2];
[0] -> [0];
[3,2] -> [3,2];
[0,2] -> [0,2];
[3,1,3] -> [3,1,3];
[3,0] -> [3,0];

=================================
None
[2] -> [2];
[2,3] -> [2,3];
[3,0,0] -> [3,0];
[2,1] -> [2,1];
[] -> [];
[1] -> [1];
[3,1,2] -> [3,1,2];
[0,0] -> [0];
[2,0,2] -> [2,0,2];
[3,3,1] -> [3,1];
[3,2] -> [3,2];
[3,0] -> [3,0];
[1,2] -> [1,2];
[1,0,0] -> [1,0];
[3] -> [3];
[0,2] -> [0,2];

=================================
None
[1,3] -> [1,3];
[3,3] -> [3];
[0,3] -> [0,3];
[3] -> [3];
[] -> [];
[3,0] -> [3,0];
[2,2] -> [2];
[1] -> [1];
[0] -> [0];
[2] -> [2];
[2,2,1] -> [2,1];
[2,1] -> [2,1];
[3,0,2] -> [3,0,2];
[0,3,1] -> [0,3,1];
[3,3,1] -> [3,1];
[0,1,3] -> [0,1,3];

=================================
None
[1,3,2] -> [1,3,2];
[1,1,1] -> [1];
[2] -> [2];
[0] -> [0];
[] -> [];
[0,0] -> [0];
[2,1] -> [2,1];
[2,2] -> [2];
[1,0] -> [1,0];
[2,0] -> [2,0];
[2,3] -> [2,3];
[1,3,1] -> [1,3,1];
[1] -> [1];
[3,1,1] -> [3,1];
[3,1,3] -> [3,1,3];
[0,0,2] -> [0,2];

=================================
None
[3] -> [3];
[2,2,3] -> [2,3];
[1] -> [1];
[0] -> [0];
[] -> [];
[1,3,1] -> [1,3,1];
[1,3] -> [1,3];
[3,1] -> [3,1];
[3,1,3] -> [3,1,3];
[2,1] -> [2,1];
[0,1] -> [0,1];
[3,0,3] -> [3,0,3];
[2,0] -> [2,0];
[0,0] -> [0];
[1,1] -> [1];
[2,1,1] -> [2,1];

=================================
None
[0,2,2] -> [0,2];
[] -> [];
[3,0] -> [3,0];
[1,3,0] -> [1,3,0];
[2] -> [2];
[1] -> [1];
[0,0,2] -> [0,2];
[0,1] -> [0,1];
[3,2,1] -> [3,2,1];
[2,3,0] -> [2,3,0];
[0] -> [0];
[1,1,3] -> [1,3];
[1,1,2] -> [1,2];
[3] -> [3];
[3,2] -> [3,2];
[0,3,3] -> [0,3];

=================================
None
[2,1] -> [2,1];
[1,2] -> [1,2];
[0] -> [0];
[] -> [];
[0,0,0] -> [0];
[1,2,1] -> [1,2,1];
[0,2,0] -> [0,2,0];
[2] -> [2];
[3,0,2] -> [3,0,2];
[3,1,2] -> [3,1,2];
[2,3] -> [2,3];
[3] -> [3];
[0,3,0] -> [0,3,0];
[0,2] -> [0,2];
[3,3,0] -> [3,0];
[0,0,1] -> [0,1];

=================================
None
[2,3,2] -> [2,3,2];
[1] -> [1];
[] -> [];
[3] -> [3];
[3,1,3] -> [3,1,3];
[2] -> [2];
[0] -> [0];
[1,0] -> [1,0];
[2,2] -> [2];
[0,3,1] -> [0,3,1];
[1,3] -> [1,3];
[1,2] -> [1,2];
[2,3,0] -> [2,3,0];
[2,0,1] -> [2,0,1];
[2,3,3] -> [2,3];
[1,1] -> [1];

=================================
None
[2] -> [2];
[0] -> [0];
[0,3,2] -> [0,3,2];
[0,2] -> [0,2];
[3,3,3] -> [3];
[1,2,3] -> [1,2,3];
[0,3,1] -> [0,3,1];
[3,0,1] -> [3,0,1];
[] -> [];
[3,2,2] -> [3,2];
[3,0,3] -> [3,0,3];
[1] -> [1];
[1,1,3] -> [1,3];
[0,3] -> [0,3];
[2,0] -> [2,0];
[3,1] -> [3,1];
[2,1,3] -> [2,1,3];

=================================
None
[2] -> [2];
[3] -> [3];
[0] -> [0];
[] -> [];
[3,0] -> [3,0];
[3,0,1] -> [3,0,1];
[2,3,1] -> [2,3,1];
[3,2] -> [3,2];
[3,2,2] -> [3,2];
[2,1] -> [2,1];
[0,0,2] -> [0,2];
[2,0,3] -> [2,0,3];
[0,0] -> [0];
[0,2] -> [0,2];
[1,2] -> [1,2];
[3,3] -> [3];
[2,0,0] -> [2,0];

=================================
None
[3] -> [3];
[1] -> [1];
[] -> [];
[2] -> [2];
[3,2] -> [3,2];
[0,0,2] -> [0,2];
[0,1,3] -> [0,1,3];
[0,0,0] -> [0];
[1,3,3] -> [1,3];
[3,3] -> [3];
[1,3] -> [1,3];
[3,3,1] -> [3,1];
[1,2] -> [1,2];
[0] -> [0];
[2,0,2] -> [2,0,2];
[0,2] -> [0,2];
[1,0,2] -> [1,0,2];

=================================
None
[] -> [];
[3,0,1] -> [3,0,1];
[1] -> [1];
[1,3] -> [1,3];
[2,3,0] -> [2,3,0];
[0,0,1] -> [0,1];
[0] -> [0];
[2,0,3] -> [2,0,3];
[2] -> [2];
[3] -> [3];
[3,1,3] -> [3,1,3];
[1,3,1] -> [1,3,1];
[2,0] -> [2,0];
[2,0,0] -> [2,0];
[0,3] -> [0,3];
[1,1] -> [1];
[2,3,3] -> [2,3];

=================================
None
[2,2,2] -> [2];
[3] -> [3];
[1] -> [1];
[2,0,1] -> [2,0,1];
[] -> [];
[1,3,0] -> [1,3,0];
[2,2] -> [2];
[0] -> [0];
[3,1] -> [3,1];
[0,2] -> [0,2];
[2,2,1] -> [2,1];
[2,3,1] -> [2,3,1];
[2] -> [2];
[0,3,1] -> [0,3,1];
[1,1,1] -> [1];
[3,2] -> [3,2];
[1,2] -> [1,2];

=================================
None
[] -> [];
[3,2,1] -> [3,2,1];
[0,0] -> [0];
[0,1] -> [0,1];
[1] -> [1];
[2] -> [2];
[0,2] -> [0,2];
[3,3,3] -> [3];
[3,1,0] -> [3,1,0];
[2,3,1] -> [2,3,1];
[2,1,0] -> [2,1,0];
[0,0,0] -> [0];
[0,2,2] -> [0,2];
[0] -> [0];
[3,2,3] -> [3,2,3];
[3] -> [3];
[2,0,1] -> [2,0,1];

=================================
None
[3] -> [3];
[] -> [];
[3,1] -> [3,1];
[3,3,3] -> [3];
[2,0] -> [2,0];
[0,1] -> [0,1];
[0,1,1] -> [0,1];
[3,2] -> [3,2];
[3,0,3] -> [3,0,3];
[1,2,0] -> [1,2,0];
[1,3,0] -> [1,3,0];
[2,2,2] -> [2];
[1,1,0] -> [1,0];
[2,0,2] -> [2,0,2];
[0,3,0] -> [0,3,0];
[1,2,1] -> [1,2,1];
[2] -> [2];

=================================
None
[3,0] -> [3,0];
[0,2,1] -> [0,2,1];
[1,0,0] -> [1,0];
[1,1,3] -> [1,3];
[1] -> [1];
[] -> [];
[3] -> [3];
[2,2,1] -> [2,1];
[1,2,0] -> [1,2,0];
[2] -> [2];
[1,3] -> [1,3];
[2,2,3] -> [2,3];
[1,3,3] -> [1,3];
[2,0] -> [2,0];
[0,1,2] -> [0,1,2];
[0,2,3] -> [0,2,3];
[0,0] -> [0];

=================================
None
[1] -> [1];
[2,3] -> [2,3];
[] -> [];
[3] -> [3];
[0,3] -> [0,3];
[1,0,1] -> [1,0,1];
[3,1] -> [3,1];
[1,3] -> [1,3];
[1,2,0] -> [1,2,0];
[0,3,1] -> [0,3,1];
[1,3,3] -> [1,3];
[3,3] -> [3];
[0,2,1] -> [0,2,1];
[3,0,2] -> [3,0,2];
[3,0,0] -> [3,0];
[2,1] -> [2,1];
[1,1,0] -> [1,0];

=================================
None
[2,3] -> [2,3];
[] -> [];
[0] -> [0];
[2] -> [2];
[2,3,3] -> [2,3];
[2,1,2] -> [2,1,2];
[1,3] -> [1,3];
[1] -> [1];
[2,2] -> [2];
[3] -> [3];
[0,0] -> [0];
[2,1] -> [2,1];
[2,1,0] -> [2,1,0];
[2,3,0] -> [2,3,0];
[0,1,0] -> [0,1,0];
[1,1,0] -> [1,0];
[3,0] -> [3,0];

=================================
None
[] -> [];
[1,3] -> [1,3];
[0,3,3] -> [0,3];
[3,1] -> [3,1];
[1] -> [1];
[2] -> [2];
[1,1,3] -> [1,3];
[2,0,3] -> [2,0,3];
[0,1] -> [0,1];
[1,1] -> [1];
[1,2,2] -> [1,2];
[2,3] -> [2,3];
[0,3] -> [0,3];
[0,1,0] -> [0,1,0];
[0,1,1] -> [0,1];
[1,2] -> [1,2];
[2,2] -> [2];
[3] -> [3];

=================================
STACKOVERFLOW

[1,3,2] -> [1,3,2];
[0,0,0] -> [0];
[3,1,2] -> [3,1,2];
[] -> [];
[3,2,3] -> [3,2,3];
[2] -> [2];
[3,1,0] -> [3,1,0];
[2,2] -> [2];
[0] -> [0];
[1,3,0] -> [1,3,0];
[2,0,3] -> [2,0,3];
[3,1,3] -> [3,1,3];
[2,0] -> [2,0];
[3,0] -> [3,0];
[1] -> [1];
[3] -> [3];
[2,0,0] -> [2,0];
[2,2,1] -> [2,1];

=================================
STACKOVERFLOW

[2] -> [2];
[] -> [];
[2,2,0] -> [2,0];
[1,0,2] -> [1,0,2];
[2,2,2] -> [2];
[2,0] -> [2,0];
[0,3,3] -> [0,3];
[0,3,1] -> [0,3,1];
[0,3,0] -> [0,3,0];
[3] -> [3];
[1] -> [1];
[0,0] -> [0];
[3,1,2] -> [3,1,2];
[0,1] -> [0,1];
[1,3,3] -> [1,3];
[2,1] -> [2,1];
[0] -> [0];
[0,2] -> [0,2];

=================================
STACKOVERFLOW

[0,2,0] -> [0,2,0];
[0,0,1] -> [0,1];
[] -> [];
[0,1,3] -> [0,1,3];
[0,2] -> [0,2];
[0] -> [0];
[2,0] -> [2,0];
[3,3,2] -> [3,2];
[2,1,3] -> [2,1,3];
[3] -> [3];
[1] -> [1];
[0,1] -> [0,1];
[2,3] -> [2,3];
[1,2] -> [1,2];
[2] -> [2];
[2,3,2] -> [2,3,2];
[0,3,2] -> [0,3,2];
[2,0,0] -> [2,0];

=================================
STACKOVERFLOW

[] -> [];
[0] -> [0];
[0,1] -> [0,1];
[3,3,0] -> [3,0];
[0,3,3] -> [0,3];
[3,1] -> [3,1];
[2,3] -> [2,3];
[3] -> [3];
[0,0,1] -> [0,1];
[1,1,2] -> [1,2];
[0,2] -> [0,2];
[3,1,3] -> [3,1,3];
[0,0] -> [0];
[1,1] -> [1];
[2,2,1] -> [2,1];
[0,3] -> [0,3];
[1,3] -> [1,3];
[0,3,0] -> [0,3,0];

=================================
STACKOVERFLOW

[] -> [];
[2,1,1] -> [2,1];
[0,1] -> [0,1];
[1,0] -> [1,0];
[0] -> [0];
[3,3] -> [3];
[2,2] -> [2];
[3,2] -> [3,2];
[3,1,0] -> [3,1,0];
[0,0] -> [0];
[2,2,3] -> [2,3];
[2,0,0] -> [2,0];
[2,2,0] -> [2,0];
[2] -> [2];
[1,2,0] -> [1,2,0];
[3] -> [3];
[1,1,3] -> [1,3];
[0,2] -> [0,2];

=================================
STACKOVERFLOW

[0,2,1] -> [0,2,1];
[] -> [];
[1,0] -> [1,0];
[2,2,0] -> [2,0];
[3,0] -> [3,0];
[1] -> [1];
[0,3] -> [0,3];
[2,0,1] -> [2,0,1];
[1,2,0] -> [1,2,0];
[3,1,3] -> [3,1,3];
[1,1] -> [1];
[2] -> [2];
[1,1,0] -> [1,0];
[0] -> [0];
[0,1] -> [0,1];
[0,0] -> [0];
[3,2] -> [3,2];
[3] -> [3];

=================================
STACKOVERFLOW

[2,1] -> [2,1];
[0,0,0] -> [0];
[0,2,2] -> [0,2];
[2,2,0] -> [2,0];
[2,3] -> [2,3];
[0] -> [0];
[] -> [];
[1,1] -> [1];
[1,3,1] -> [1,3,1];
[2] -> [2];
[3,3] -> [3];
[2,1,0] -> [2,1,0];
[2,2] -> [2];
[1,1,1] -> [1];
[0,1] -> [0,1];
[0,1,2] -> [0,1,2];
[3] -> [3];
[0,0] -> [0];

=================================
STACKOVERFLOW

[0,3] -> [0,3];
[] -> [];
[3,0,0] -> [3,0];
[3] -> [3];
[3,2] -> [3,2];
[0,1,3] -> [0,1,3];
[2,2] -> [2];
[1] -> [1];
[3,3] -> [3];
[1,0] -> [1,0];
[0,1] -> [0,1];
[0,1,2] -> [0,1,2];
[2,1] -> [2,1];
[3,2,0] -> [3,2,0];
[3,1] -> [3,1];
[1,3,3] -> [1,3];
[2,1,2] -> [2,1,2];
[0,0,2] -> [0,2];

=================================
STACKOVERFLOW

[] -> [];
[1] -> [1];
[3,1,0] -> [3,1,0];
[2,0] -> [2,0];
[1,1,0] -> [1,0];
[1,0] -> [1,0];
[2,0,0] -> [2,0];
[0,3,3] -> [0,3];
[2] -> [2];
[0,1] -> [0,1];
[0,2] -> [0,2];
[3,1,3] -> [3,1,3];
[3] -> [3];
[3,1] -> [3,1];
[1,1] -> [1];
[1,0,1] -> [1,0,1];
[0] -> [0];
[2,2,2] -> [2];

=================================
STACKOVERFLOW

[1,1] -> [1];
[2,0] -> [2,0];
[] -> [];
[3,1,3] -> [3,1,3];
[0,0] -> [0];
[3,3] -> [3];
[3,1,0] -> [3,1,0];
[0,3,3] -> [0,3];
[2,2,2] -> [2];
[2,2,3] -> [2,3];
[1] -> [1];
[1,2,3] -> [1,2,3];
[2] -> [2];
[0] -> [0];
[3] -> [3];
[1,3,0] -> [1,3,0];
[3,0] -> [3,0];
[3,2,0] -> [3,2,0];
[0,2] -> [0,2];

=================================
STACKOVERFLOW

[3,0] -> [3,0];
[] -> [];
[2,3] -> [2,3];
[1,3,0] -> [1,3,0];
[2,1,0] -> [2,1,0];
[3] -> [3];
[3,3,3] -> [3];
[0,1] -> [0,1];
[0,1,3] -> [0,1,3];
[2,0] -> [2,0];
[0] -> [0];
[2,0,3] -> [2,0,3];
[1] -> [1];
[1,0,2] -> [1,0,2];
[0,3,1] -> [0,3,1];
[2] -> [2];
[0,3,0] -> [0,3,0];
[3,3] -> [3];
[0,1,2] -> [0,1,2];

=================================
STACKOVERFLOW

[2,0,3] -> [2,0,3];
[] -> [];
[1] -> [1];
[3,1,2] -> [3,1,2];
[1,2] -> [1,2];
[0,0] -> [0];
[1,3] -> [1,3];
[1,3,2] -> [1,3,2];
[0] -> [0];
[3,3,2] -> [3,2];
[1,0] -> [1,0];
[1,0,1] -> [1,0,1];
[1,0,3] -> [1,0,3];
[0,2,2] -> [0,2];
[3] -> [3];
[2,0] -> [2,0];
[2,1,3] -> [2,1,3];
[3,2] -> [3,2];
[3,0,3] -> [3,0,3];

=================================
STACKOVERFLOW

[3] -> [3];
[] -> [];
[1] -> [1];
[0] -> [0];
[1,2,2] -> [1,2];
[0,0] -> [0];
[2,1] -> [2,1];
[2] -> [2];
[3,0,3] -> [3,0,3];
[0,1,2] -> [0,1,2];
[2,2] -> [2];
[2,3] -> [2,3];
[1,0,2] -> [1,0,2];
[3,1] -> [3,1];
[0,3] -> [0,3];
[3,0,1] -> [3,0,1];
[2,2,3] -> [2,3];
[3,0] -> [3,0];
[2,0,3] -> [2,0,3];

=================================
STACKOVERFLOW

[] -> [];
[2] -> [2];
[3,0] -> [3,0];
[0,2,2] -> [0,2];
[3,3] -> [3];
[2,1,1] -> [2,1];
[3] -> [3];
[1,2] -> [1,2];
[0,1,2] -> [0,1,2];
[0] -> [0];
[0,1] -> [0,1];
[2,2] -> [2];
[3,1,3] -> [3,1,3];
[3,3,0] -> [3,0];
[2,2,0] -> [2,0];
[0,0,1] -> [0,1];
[1] -> [1];
[2,3] -> [2,3];
[2,0,3] -> [2,0,3];

=================================
STACKOVERFLOW

[1,0] -> [1,0];
[1,0,2] -> [1,0,2];
[3,3,3] -> [3];
[2,3,2] -> [2,3,2];
[3,1,3] -> [3,1,3];
[] -> [];
[0,0,3] -> [0,3];
[3,2] -> [3,2];
[2,0,3] -> [2,0,3];
[3] -> [3];
[0,3,1] -> [0,3,1];
[1,1,0] -> [1,0];
[1,2,2] -> [1,2];
[1] -> [1];
[2,1] -> [2,1];
[2,3] -> [2,3];
[3,2,3] -> [3,2,3];
[2,0,1] -> [2,0,1];
[2,3,3] -> [2,3];

=================================
STACKOVERFLOW

[2,3,3] -> [2,3];
[2,3] -> [2,3];
[3,2,2] -> [3,2];
[1,1] -> [1];
[1,1,0] -> [1,0];
[0] -> [0];
[1] -> [1];
[3] -> [3];
[2,0] -> [2,0];
[1,2] -> [1,2];
[1,0,1] -> [1,0,1];
[0,3] -> [0,3];
[0,0] -> [0];
[1,1,2] -> [1,2];
[2,2,1] -> [2,1];
[] -> [];
[2,1,2] -> [2,1,2];
[3,2,1] -> [3,2,1];
[2] -> [2];

=================================
STACKOVERFLOW

[1,0,1] -> [1,0,1];
[] -> [];
[0,2,3] -> [0,2,3];
[0] -> [0];
[2] -> [2];
[3,3,2] -> [3,2];
[3,1] -> [3,1];
[1,2,3] -> [1,2,3];
[2,3,0] -> [2,3,0];
[3] -> [3];
[1,2,1] -> [1,2,1];
[1,1] -> [1];
[3,1,3] -> [3,1,3];
[2,0,0] -> [2,0];
[1,2] -> [1,2];
[3,0] -> [3,0];
[2,1] -> [2,1];
[0,3] -> [0,3];
[3,2] -> [3,2];

=================================
STACKOVERFLOW

[3] -> [3];
[0,1] -> [0,1];
[3,3,1] -> [3,1];
[3,2,3] -> [3,2,3];
[1,1,3] -> [1,3];
[0,3] -> [0,3];
[1,3] -> [1,3];
[] -> [];
[3,3] -> [3];
[3,3,3] -> [3];
[3,1] -> [3,1];
[1,0,0] -> [1,0];
[0,2,2] -> [0,2];
[2] -> [2];
[3,0,0] -> [3,0];
[0] -> [0];
[0,2] -> [0,2];
[1] -> [1];
[2,3,2] -> [2,3,2];

=================================
STACKOVERFLOW

[2,2] -> [2];
[2] -> [2];
[3] -> [3];
[0,1] -> [0,1];
[] -> [];
[3,1,2] -> [3,1,2];
[3,1,0] -> [3,1,0];
[1,0] -> [1,0];
[0] -> [0];
[0,3,3] -> [0,3];
[0,0] -> [0];
[3,0] -> [3,0];
[2,2,1] -> [2,1];
[2,1,2] -> [2,1,2];
[1,2,3] -> [1,2,3];
[3,3] -> [3];
[1,3,3] -> [1,3];
[0,1,2] -> [0,1,2];
[2,3,0] -> [2,3,0];

=================================
STACKOVERFLOW

[1,1] -> [1];
[1,2,1] -> [1,2,1];
[] -> [];
[3,2] -> [3,2];
[1] -> [1];
[0] -> [0];
[3,1,2] -> [3,1,2];
[2,3] -> [2,3];
[3] -> [3];
[2] -> [2];
[3,1,3] -> [3,1,3];
[1,0,0] -> [1,0];
[1,3] -> [1,3];
[1,0,2] -> [1,0,2];
[2,0] -> [2,0];
[0,1,2] -> [0,1,2];
[1,3,3] -> [1,3];
[0,2,3] -> [0,2,3];
[3,1,0] -> [3,1,0];
[1,0] -> [1,0];

=================================
STACKOVERFLOW

[] -> [];
[0] -> [0];
[3,0,0] -> [3,0];
[2,1] -> [2,1];
[1,3] -> [1,3];
[2] -> [2];
[1] -> [1];
[3] -> [3];
[0,3] -> [0,3];
[3,2,0] -> [3,2,0];
[2,1,1] -> [2,1];
[1,0,2] -> [1,0,2];
[2,2,1] -> [2,1];
[3,0,1] -> [3,0,1];
[1,3,0] -> [1,3,0];
[3,3,1] -> [3,1];
[2,3,2] -> [2,3,2];
[1,2] -> [1,2];
[2,2] -> [2];
[3,2,2] -> [3,2];

=================================
STACKOVERFLOW

[] -> [];
[1] -> [1];
[0,2] -> [0,2];
[0,1,0] -> [0,1,0];
[1,1] -> [1];
[2,0] -> [2,0];
[3,2] -> [3,2];
[0] -> [0];
[3,0,1] -> [3,0,1];
[3,2,0] -> [3,2,0];
[2] -> [2];
[3] -> [3];
[0,1] -> [0,1];
[1,0] -> [1,0];
[3,0,2] -> [3,0,2];
[3,1] -> [3,1];
[3,3] -> [3];
[1,3,0] -> [1,3,0];
[1,3] -> [1,3];
[2,2,0] -> [2,0];

=================================
STACKOVERFLOW

[0] -> [0];
[] -> [];
[2] -> [2];
[1] -> [1];
[1,1] -> [1];
[1,2,0] -> [1,2,0];
[3,2,1] -> [3,2,1];
[2,1,3] -> [2,1,3];
[3,0,1] -> [3,0,1];
[2,1] -> [2,1];
[0,1] -> [0,1];
[3,0,2] -> [3,0,2];
[2,3] -> [2,3];
[0,2] -> [0,2];
[3] -> [3];
[3,0] -> [3,0];
[2,3,1] -> [2,3,1];
[3,3] -> [3];
[1,2] -> [1,2];
[1,0,0] -> [1,0];

=================================
STACKOVERFLOW

[] -> [];
[3] -> [3];
[3,1] -> [3,1];
[2,0] -> [2,0];
[0,3] -> [0,3];
[2,1,3] -> [2,1,3];
[2,0,0] -> [2,0];
[3,3,0] -> [3,0];
[0,0,0] -> [0];
[1,3] -> [1,3];
[3,2] -> [3,2];
[3,0] -> [3,0];
[1,0,2] -> [1,0,2];
[1] -> [1];
[2,0,2] -> [2,0,2];
[0,0,1] -> [0,1];
[0,1,3] -> [0,1,3];
[2] -> [2];
[1,0,3] -> [1,0,3];
[0,2,1] -> [0,2,1];

=================================
STACKOVERFLOW

[0] -> [0];
[1,1] -> [1];
[] -> [];
[0,2] -> [0,2];
[0,3] -> [0,3];
[1,2] -> [1,2];
[2] -> [2];
[3,1,3] -> [3,1,3];
[2,2,3] -> [2,3];
[1,3,0] -> [1,3,0];
[1,3] -> [1,3];
[1,0] -> [1,0];
[1] -> [1];
[0,2,3] -> [0,2,3];
[0,1,1] -> [0,1];
[3,3] -> [3];
[0,2,1] -> [0,2,1];
[2,0,3] -> [2,0,3];
[3,0] -> [3,0];
[2,3,3] -> [2,3];

=================================
STACKOVERFLOW

[1] -> [1];
[2,3] -> [2,3];
[] -> [];
[0,2,0] -> [0,2,0];
[3,1,2] -> [3,1,2];
[2] -> [2];
[0,1,1] -> [0,1];
[2,2,2] -> [2];
[2,1] -> [2,1];
[1,3] -> [1,3];
[3] -> [3];
[3,2,1] -> [3,2,1];
[2,2] -> [2];
[0,2] -> [0,2];
[3,0] -> [3,0];
[3,3,3] -> [3];
[1,2,1] -> [1,2,1];
[1,2,2] -> [1,2];
[0,1,3] -> [0,1,3];
[1,1,3] -> [1,3];

=================================
STACKOVERFLOW

[1,1] -> [1];
[1,2,0] -> [1,2,0];
[0,3,0] -> [0,3,0];
[2,0,1] -> [2,0,1];
[3] -> [3];
[2,2] -> [2];
[2] -> [2];
[0] -> [0];
[1,3,2] -> [1,3,2];
[] -> [];
[0,2,0] -> [0,2,0];
[3,0,0] -> [3,0];
[0,3,1] -> [0,3,1];
[3,1,1] -> [3,1];
[1,3,1] -> [1,3,1];
[1,0,0] -> [1,0];
[3,2,3] -> [3,2,3];
[1] -> [1];
[0,0,1] -> [0,1];
[0,2] -> [0,2];

=================================
STACKOVERFLOW

[1] -> [1];
[] -> [];
[2,0,1] -> [2,0,1];
[3,2] -> [3,2];
[2] -> [2];
[3] -> [3];
[3,3,0] -> [3,0];
[0,3] -> [0,3];
[0] -> [0];
[0,0,0] -> [0];
[1,2,3] -> [1,2,3];
[2,1,0] -> [2,1,0];
[0,1,2] -> [0,1,2];
[0,1,1] -> [0,1];
[1,2,1] -> [1,2,1];
[1,2,0] -> [1,2,0];
[1,1,1] -> [1];
[1,3,1] -> [1,3,1];
[1,0] -> [1,0];
[1,1,3] -> [1,3];

=================================
STACKOVERFLOW

[] -> [];
[2,2] -> [2];
[2,2,2] -> [2];
[1,1] -> [1];
[0,3,3] -> [0,3];
[3,0] -> [3,0];
[3] -> [3];
[0] -> [0];
[3,1,3] -> [3,1,3];
[0,2] -> [0,2];
[1] -> [1];
[1,1,3] -> [1,3];
[0,1,2] -> [0,1,2];
[2,0,2] -> [2,0,2];
[1,1,2] -> [1,2];
[3,1,0] -> [3,1,0];
[3,3,2] -> [3,2];
[1,0] -> [1,0];
[0,3,0] -> [0,3,0];
[2] -> [2];

=================================
STACKOVERFLOW

