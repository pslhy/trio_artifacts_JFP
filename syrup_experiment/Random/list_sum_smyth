[2,1,1] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 4 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.062858 false false

[0,1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 1 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0572460000001 false false

[2,0] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 2 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.160298 false false

[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 0 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0562110000001 false false

[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 0 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0939350000001 false false

[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 0 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.056392 false false

[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 0 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.070242 false false

[1,3] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 4 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0886330000001 false false

[3,2,2] -> 7;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 7 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.077927 false false

[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 0 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0587829999999 false false

[] -> 0;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0699649999999 true false

[2] -> 2;
[3,3] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.117527 true false

[1,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0717110000001 true false

[2,2] -> 4;
[1,2,1] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 4 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.12753 false false

[3,2,1] -> 6;
[3,0,1] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.079886 true false

[] -> 0;
[3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.151298 true false

[] -> 0;
[3,1,0] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0654850000001 true false

[] -> 0;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.052717 true false

[3,3,3] -> 9;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.101323 true false

[1,0,2] -> 3;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0503189999999 true false

[3] -> 3;
[1,0,0] -> 1;
[1,1,0] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0654010000001 true false

[3,1] -> 4;
[3] -> 3;
[1,0,1] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.074267 true false

[1,1] -> 2;
[0,3,0] -> 3;
[2,1,2] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0940869999999 true false

[1] -> 1;
[1,3,2] -> 6;
[0,1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0710779999999 true false

[1,0,3] -> 4;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0596619999999 true false

[] -> 0;
[2,1,0] -> 3;
[3,3] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0500320000001 true false

[3,1,1] -> 5;
[1,0,2] -> 3;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0725170000001 true false

[0,2,1] -> 3;
[] -> 0;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.095611 true false

[2,1] -> 3;
[] -> 0;
[2,3,0] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0602040000001 true false

[2,1] -> 3;
[2] -> 2;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0602799999999 true false

[3] -> 3;
[2,1,1] -> 4;
[] -> 0;
[3,3,2] -> 8;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.063449 true false

[3,2] -> 5;
[1,0] -> 1;
[1] -> 1;
[1,1] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.076517 true false

[] -> 0;
[3,3,3] -> 9;
[2,0] -> 2;
[3,3] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.05738 true false

[2,2,1] -> 5;
[2,0] -> 2;
[3,0] -> 3;
[0,3,1] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.083218 true false

[] -> 0;
[1] -> 1;
[1,0] -> 1;
[3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.111025 true false

[] -> 0;
[2,1,2] -> 5;
[0] -> 0;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.046724 true false

[2,3] -> 5;
[0,0,0] -> 0;
[1,0,0] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.070406 true false

[2,2,1] -> 5;
[2] -> 2;
[] -> 0;
[3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.07006 true false

[3,3] -> 6;
[] -> 0;
[2,0,1] -> 3;
[3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0623700000001 true false

[1,0,3] -> 4;
[] -> 0;
[1,0,0] -> 1;
[3,3] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.080993 true false

[2,0] -> 2;
[0,1] -> 1;
[2,3] -> 5;
[1] -> 1;
[3,2,0] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0617990000001 true false

[0,1,3] -> 4;
[] -> 0;
[3,3] -> 6;
[1,3,1] -> 5;
[0,1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0633760000001 true false

[] -> 0;
[0,0,2] -> 2;
[3,2,1] -> 6;
[3] -> 3;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.062602 true false

[2] -> 2;
[1,3] -> 4;
[1,1,3] -> 5;
[0,2,2] -> 4;
[2,2,3] -> 7;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.098522 true false

[3] -> 3;
[] -> 0;
[3,2,2] -> 7;
[2,3,3] -> 8;
[3,0] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.124067 true false

[0,1] -> 1;
[2] -> 2;
[] -> 0;
[2,1,2] -> 5;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0722490000001 true false

[1] -> 1;
[3,2] -> 5;
[3,0,2] -> 5;
[2,0] -> 2;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.061005 true false

[] -> 0;
[1,0,2] -> 3;
[2,1,2] -> 5;
[1,2,1] -> 4;
[0,2,2] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.069062 true false

[3] -> 3;
[] -> 0;
[3,3,1] -> 7;
[1,2] -> 3;
[2,3,3] -> 8;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0866080000001 true false

[] -> 0;
[0,1] -> 1;
[1,2,0] -> 3;
[1,2,1] -> 4;
[0,2,0] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0650740000001 true false

[] -> 0;
[3,1,0] -> 4;
[0] -> 0;
[3,3,1] -> 7;
[2,2] -> 4;
[1,3,3] -> 7;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.068618 true false

[0,2] -> 2;
[3,1] -> 4;
[] -> 0;
[2] -> 2;
[2,0,0] -> 2;
[3,2] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.103637 true false

[] -> 0;
[0,0,2] -> 2;
[2,0,0] -> 2;
[0,0] -> 0;
[3,1,2] -> 6;
[0,1,3] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0710260000001 true false

[0] -> 0;
[2] -> 2;
[1,0,2] -> 3;
[3,3,0] -> 6;
[1,3] -> 4;
[0,3,0] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0641029999999 true false

[] -> 0;
[2] -> 2;
[3] -> 3;
[0,3,3] -> 6;
[0,3] -> 3;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.062201 true false

[] -> 0;
[1,3,2] -> 6;
[3] -> 3;
[2,2,1] -> 5;
[3,1,0] -> 4;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.066632 true false

[0,1] -> 1;
[] -> 0;
[1,0,2] -> 3;
[0,3,0] -> 3;
[3,3] -> 6;
[3,1,0] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.060596 true false

[] -> 0;
[0,1,1] -> 2;
[1,0,2] -> 3;
[0,2,0] -> 2;
[0] -> 0;
[0,2] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.063126 true false

[1] -> 1;
[2] -> 2;
[3,3] -> 6;
[0,2,1] -> 3;
[2,0] -> 2;
[1,0,1] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0777800000001 true false

[0,2,0] -> 2;
[] -> 0;
[2,2,0] -> 4;
[2,1,2] -> 5;
[2] -> 2;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.127987 true false

[2,0,1] -> 3;
[0,1] -> 1;
[0] -> 0;
[] -> 0;
[1,1] -> 2;
[1,2] -> 3;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.125453 true false

[] -> 0;
[2] -> 2;
[0] -> 0;
[3,0] -> 3;
[1,0,1] -> 2;
[1] -> 1;
[0,2,0] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.058344 true false

[2] -> 2;
[2,1] -> 3;
[1,2,3] -> 6;
[1] -> 1;
[] -> 0;
[2,0,1] -> 3;
[2,0] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0688869999999 true false

[] -> 0;
[0,3,0] -> 3;
[0] -> 0;
[3,3] -> 6;
[2] -> 2;
[0,3] -> 3;
[1,1] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.044251 true false

[3] -> 3;
[0,1] -> 1;
[] -> 0;
[0] -> 0;
[1,1] -> 2;
[1,3] -> 4;
[1,2] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.131628 true false

[1,0] -> 1;
[3,3] -> 6;
[2,2] -> 4;
[] -> 0;
[2,1] -> 3;
[1] -> 1;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.120435 true false

[3,3,3] -> 9;
[0,2] -> 2;
[1,1] -> 2;
[1,3] -> 4;
[2,1] -> 3;
[] -> 0;
[3,0] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0773899999999 true false

[2,0,3] -> 5;
[] -> 0;
[3] -> 3;
[0,2,2] -> 4;
[0,2,1] -> 3;
[2] -> 2;
[3,2] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.085587 true false

[] -> 0;
[0,3,0] -> 3;
[2,2] -> 4;
[0,2,1] -> 3;
[2,3,0] -> 5;
[0,0] -> 0;
[2,1,2] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.120612 true false

[] -> 0;
[3,3] -> 6;
[3,1] -> 4;
[1,1] -> 2;
[2] -> 2;
[0,1] -> 1;
[3,0] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0705109999999 true false

[2,0,1] -> 3;
[2,0] -> 2;
[] -> 0;
[2] -> 2;
[0,0] -> 0;
[0,1,3] -> 4;
[3,0] -> 3;
[0,3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.069581 true false

[2,1] -> 3;
[3] -> 3;
[2] -> 2;
[3,0] -> 3;
[] -> 0;
[1] -> 1;
[0,1,2] -> 3;
[3,3,1] -> 7;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0728899999999 true false

[0,0,2] -> 2;
[0,2] -> 2;
[] -> 0;
[2,0] -> 2;
[3,0] -> 3;
[0,2,1] -> 3;
[0] -> 0;
[2,1,3] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.052574 true false

[3] -> 3;
[2,2] -> 4;
[] -> 0;
[0,1,2] -> 3;
[2,0,3] -> 5;
[1,2] -> 3;
[0] -> 0;
[1,0] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0967920000001 true false

[1,1] -> 2;
[1,3] -> 4;
[1,0] -> 1;
[3,2,3] -> 8;
[3,1,1] -> 5;
[2,3,2] -> 7;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.068681 true false

[3,1,0] -> 4;
[0,1,2] -> 3;
[] -> 0;
[0] -> 0;
[1,1,0] -> 2;
[2] -> 2;
[2,3,3] -> 8;
[1,0,2] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.13294 true false

[2,0] -> 2;
[2,2,0] -> 4;
[3,0,3] -> 6;
[] -> 0;
[2,3,0] -> 5;
[2] -> 2;
[2,1,0] -> 3;
[1,1,3] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0765719999999 true false

[] -> 0;
[1,3] -> 4;
[0,2] -> 2;
[0,1] -> 1;
[1,1,3] -> 5;
[2,2] -> 4;
[1,1,0] -> 2;
[2,3,3] -> 8;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.122274 true false

[2,1] -> 3;
[3,2] -> 5;
[0,0,3] -> 3;
[3] -> 3;
[] -> 0;
[1,2,0] -> 3;
[0,0,2] -> 2;
[0,1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0582219999999 true false

[3] -> 3;
[1,2] -> 3;
[1,3,2] -> 6;
[2] -> 2;
[] -> 0;
[2,3,3] -> 8;
[0,0] -> 0;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.073584 true false

[0,2] -> 2;
[3] -> 3;
[1,1,1] -> 3;
[1,0] -> 1;
[0] -> 0;
[] -> 0;
[3,3,2] -> 8;
[1] -> 1;
[3,2,3] -> 8;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.083756 true false

[] -> 0;
[1,3,0] -> 4;
[2,0] -> 2;
[1,0,1] -> 2;
[0,2] -> 2;
[3,0] -> 3;
[3,1] -> 4;
[3,0,3] -> 6;
[2,3,0] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.059274 true false

[] -> 0;
[1] -> 1;
[0] -> 0;
[2] -> 2;
[1,0] -> 1;
[3,2,2] -> 7;
[3] -> 3;
[0,2,3] -> 5;
[0,1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.068199 true false

[0,0,0] -> 0;
[] -> 0;
[1] -> 1;
[3,1] -> 4;
[0,2] -> 2;
[2,2,1] -> 5;
[1,3] -> 4;
[2,1] -> 3;
[1,3,3] -> 7;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0647039999999 true false

[2,3] -> 5;
[2,1,3] -> 6;
[3,1,0] -> 4;
[] -> 0;
[3,3] -> 6;
[1,2] -> 3;
[1] -> 1;
[1,3] -> 4;
[2,1] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0656630000001 true false

[2,3] -> 5;
[] -> 0;
[2,0,3] -> 5;
[2] -> 2;
[0,3,1] -> 4;
[1] -> 1;
[0,1] -> 1;
[3,1] -> 4;
[1,1,3] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0756739999999 true false

[3,0] -> 3;
[] -> 0;
[3,2,0] -> 5;
[0] -> 0;
[1,0] -> 1;
[1] -> 1;
[1,1] -> 2;
[2,1,3] -> 6;
[3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.098246 true false

[1,0] -> 1;
[2,3,0] -> 5;
[] -> 0;
[2] -> 2;
[3,2,2] -> 7;
[3,1] -> 4;
[2,0] -> 2;
[3] -> 3;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0691200000001 true false

[] -> 0;
[0,3] -> 3;
[1,2,3] -> 6;
[3,2,0] -> 5;
[1,2] -> 3;
[1,3,3] -> 7;
[2] -> 2;
[1] -> 1;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.072498 true false

[0] -> 0;
[3,3] -> 6;
[2,3] -> 5;
[] -> 0;
[1,2,3] -> 6;
[1,2] -> 3;
[2,1,3] -> 6;
[0,1,2] -> 3;
[0,3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.143437 true false

[2,3] -> 5;
[3,1,0] -> 4;
[0,2,3] -> 5;
[1] -> 1;
[1,0,3] -> 4;
[] -> 0;
[3,3,2] -> 8;
[3,1,1] -> 5;
[1,3,3] -> 7;
[0,1,3] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.160425 true false

[1] -> 1;
[1,2,3] -> 6;
[1,1] -> 2;
[] -> 0;
[3,0,3] -> 6;
[2,3,2] -> 7;
[2] -> 2;
[3,3] -> 6;
[3,0] -> 3;
[3,0,1] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0859 true false

[3,3,3] -> 9;
[1,3] -> 4;
[0,1,3] -> 4;
[3,0] -> 3;
[2] -> 2;
[1,2,0] -> 3;
[2,2] -> 4;
[3] -> 3;
[0] -> 0;
[0,0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.060166 true false

[3] -> 3;
[] -> 0;
[2,2,3] -> 7;
[3,1] -> 4;
[1,3,2] -> 6;
[1,1,3] -> 5;
[2,1] -> 3;
[2] -> 2;
[3,2] -> 5;
[1,3] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.074965 true false

[] -> 0;
[2] -> 2;
[0] -> 0;
[2,3] -> 5;
[3,0,0] -> 3;
[1] -> 1;
[3,3,3] -> 9;
[3,1] -> 4;
[1,2,2] -> 5;
[0,0,1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.069266 true false

[3,1,1] -> 5;
[1] -> 1;
[] -> 0;
[0,1] -> 1;
[0] -> 0;
[3,1,3] -> 7;
[3,0] -> 3;
[2] -> 2;
[0,0,2] -> 2;
[2,2,1] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0887009999999 true false

[0,1,1] -> 2;
[2,0] -> 2;
[] -> 0;
[3] -> 3;
[2] -> 2;
[1] -> 1;
[3,1] -> 4;
[0] -> 0;
[1,0] -> 1;
[2,3,1] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0739679999999 true false

[] -> 0;
[0,0] -> 0;
[1,0,1] -> 2;
[3] -> 3;
[1] -> 1;
[0,2,1] -> 3;
[0,1,0] -> 1;
[3,3] -> 6;
[3,2,1] -> 6;
[3,1,1] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0896990000001 true false

[3,0] -> 3;
[3,1,0] -> 4;
[2,1,1] -> 4;
[3,2,0] -> 5;
[] -> 0;
[0,3] -> 3;
[3] -> 3;
[3,3] -> 6;
[2] -> 2;
[1,0] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0743649999999 true false

[3] -> 3;
[1,3] -> 4;
[0] -> 0;
[0,1,0] -> 1;
[] -> 0;
[1,2,2] -> 5;
[1] -> 1;
[1,1,0] -> 2;
[2] -> 2;
[3,2] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.072512 true false

