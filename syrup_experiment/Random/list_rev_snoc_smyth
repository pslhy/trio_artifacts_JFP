[1] -> [1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00574499999993 false false

[3] -> [3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00914400000011 false false

[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> [] in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00908099999992 false false

[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> [] in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.01124 false false

[0,0] -> [0,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00754299999994 false false

[1] -> [1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00731900000005 false false

[1,2,0] -> [0,2,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> [0, 2, 1] in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0128500000001 false false

[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> [] in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0082809999999 false false

[3,2,2] -> [2,2,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> [2, 2, 3] in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0135889999999 false false

[1] -> [1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0107860000001 false false

[] -> [];
[0,1,3] -> [3,1,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0233149999999 true true

[] -> [];
[2,1] -> [1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0160470000001 false true

[1,1,0] -> [0,1,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0240100000001 true true

[1,0] -> [0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0193589999999 false true

[] -> [];
[2] -> [2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0103610000001 false false

[] -> [];
[1,0,1] -> [1,0,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010129 false false

[3,3] -> [3,3];
[1,0] -> [0,1];

=================================
NOSOL

[] -> [];
[1] -> [1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00589300000001 false false

[2,1,0] -> [0,1,2];
[3,1,2] -> [2,1,3];

=================================
NOSOL

[] -> [];
[2,3,1] -> [1,3,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.032649 true true

[3,3] -> [3,3];
[2,1,0] -> [0,1,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0096309999999 true true

[] -> [];
[3,3,3] -> [3,3,3];
[0,3] -> [3,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.024042 false true

[2] -> [2];
[] -> [];
[0] -> [0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011448 false false

[1,1] -> [1,1];
[] -> [];
[2,1] -> [1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.022911 false true

[1,3] -> [3,1];
[2,2,1] -> [1,2,2];
[2,0] -> [0,2];

=================================
NOSOL

[] -> [];
[1,2,3] -> [3,2,1];
[2,1] -> [1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0114980000001 true true

[2,1,2] -> [2,1,2];
[3,1,2] -> [2,1,3];
[1,1,0] -> [0,1,1];

=================================
NOSOL

[3,1,2] -> [2,1,3];
[1] -> [1];
[0,1] -> [1,0];

=================================
NOSOL

[3,2] -> [2,3];
[1,3,1] -> [1,3,1];
[3] -> [3];

=================================
NOSOL

[] -> [];
[0,2,2] -> [2,2,0];
[3,1] -> [1,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011354 false true

[2,0] -> [0,2];
[2,3] -> [3,2];
[0] -> [0];
[0,3] -> [3,0];

=================================
NOSOL

[1] -> [1];
[] -> [];
[3,0] -> [0,3];
[2] -> [2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.01017 false true

[0,2] -> [2,0];
[] -> [];
[3,0,0] -> [0,0,3];
[0] -> [0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.019166 false true

[] -> [];
[0,0] -> [0,0];
[2,1] -> [1,2];
[1,0,3] -> [3,0,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0164950000001 true true

[] -> [];
[3] -> [3];
[2,0,3] -> [3,0,2];
[1,1] -> [1,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.012982 true true

[0,0,3] -> [3,0,0];
[1,3] -> [3,1];
[0,1,3] -> [3,1,0];
[3,0,2] -> [2,0,3];

=================================
NOSOL

[3,0,0] -> [0,0,3];
[3,2,2] -> [2,2,3];
[0] -> [0];
[3] -> [3];

=================================
NOSOL

[1] -> [1];
[3] -> [3];
[] -> [];
[0,2,3] -> [3,2,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.016574 true true

[0] -> [0];
[] -> [];
[1,2] -> [2,1];
[3,0,2] -> [2,0,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0183119999999 true true

[3] -> [3];
[] -> [];
[3,0,0] -> [0,0,3];
[2] -> [2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010389 false true

[2,3,1] -> [1,3,2];
[2,2] -> [2,2];
[] -> [];
[2,1,3] -> [3,1,2];
[2] -> [2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0217399999999 true true

[3,2,2] -> [2,2,3];
[3] -> [3];
[] -> [];
[1,2,3] -> [3,2,1];
[3,1] -> [1,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.021741 true true

[1] -> [1];
[0] -> [0];
[] -> [];
[0,3,3] -> [3,3,0];
[2] -> [2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0175939999999 false true

[1,1] -> [1,1];
[3,2] -> [2,3];
[3] -> [3];
[0] -> [0];
[3,1,1] -> [1,1,3];

=================================
NOSOL

[3,3,1] -> [1,3,3];
[0,0] -> [0,0];
[2,0,1] -> [1,0,2];
[0,0,1] -> [1,0,0];
[3,3] -> [3,3];

=================================
NOSOL

[1,3,2] -> [2,3,1];
[0,1,3] -> [3,1,0];
[] -> [];
[1,1] -> [1,1];
[3,3,2] -> [2,3,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.01487 true true

[] -> [];
[0,1,3] -> [3,1,0];
[1] -> [1];
[2,3] -> [3,2];
[1,0] -> [0,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.016852 true true

[2,2] -> [2,2];
[2,1,0] -> [0,1,2];
[0] -> [0];
[3] -> [3];
[3,1] -> [1,3];

=================================
NOSOL

[2,0,1] -> [1,0,2];
[] -> [];
[3,1] -> [1,3];
[1,0,3] -> [3,0,1];
[0,1,3] -> [3,1,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0239630000001 true true

[0] -> [0];
[] -> [];
[1,2] -> [2,1];
[3] -> [3];
[1,1] -> [1,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0165509999999 false true

[1,3,1] -> [1,3,1];
[0,1] -> [1,0];
[1,2] -> [2,1];
[0,2,0] -> [0,2,0];
[0] -> [0];
[1] -> [1];

=================================
NOSOL

[2,3] -> [3,2];
[1] -> [1];
[0] -> [0];
[3,1,1] -> [1,1,3];
[0,0,2] -> [2,0,0];
[2] -> [2];

=================================
NOSOL

[0,1] -> [1,0];
[1,0] -> [0,1];
[0,3,3] -> [3,3,0];
[2,2,3] -> [3,2,2];
[] -> [];
[3] -> [3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.019421 true true

[1] -> [1];
[1,0,0] -> [0,0,1];
[3,3] -> [3,3];
[0,3] -> [3,0];
[2,1] -> [1,2];
[0] -> [0];

=================================
NOSOL

[] -> [];
[2,2,3] -> [3,2,2];
[2,2,2] -> [2,2,2];
[2,3] -> [3,2];
[2,1,2] -> [2,1,2];
[0,1] -> [1,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.015809 true true

[2] -> [2];
[1,0,2] -> [2,0,1];
[3,0] -> [0,3];
[2,3] -> [3,2];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0224390000001 true true

[0] -> [0];
[] -> [];
[1] -> [1];
[0,1,2] -> [2,1,0];
[3] -> [3];
[2,3,2] -> [2,3,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.017214 true true

[2,0,0] -> [0,0,2];
[3,0] -> [0,3];
[0,0] -> [0,0];
[] -> [];
[0,1] -> [1,0];
[0] -> [0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0121819999999 false true

[0,3] -> [3,0];
[2,1,2] -> [2,1,2];
[2] -> [2];
[] -> [];
[3] -> [3];
[0] -> [0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0130670000001 true true

[] -> [];
[3] -> [3];
[2] -> [2];
[0,2] -> [2,0];
[3,0,3] -> [3,0,3];
[1] -> [1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0201850000001 true true

[] -> [];
[3,0] -> [0,3];
[0,0] -> [0,0];
[0,3] -> [3,0];
[0] -> [0];
[1,2] -> [2,1];
[2,3,3] -> [3,3,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.018247 false true

[] -> [];
[3] -> [3];
[0,0,1] -> [1,0,0];
[2,2,0] -> [0,2,2];
[2] -> [2];
[3,2,1] -> [1,2,3];
[1,3] -> [3,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0183360000001 true true

[] -> [];
[3,3,0] -> [0,3,3];
[0,3] -> [3,0];
[2,2,2] -> [2,2,2];
[0] -> [0];
[3,2,1] -> [1,2,3];
[1] -> [1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0126150000001 true true

[3,3,3] -> [3,3,3];
[2,0,2] -> [2,0,2];
[2,1,2] -> [2,1,2];
[] -> [];
[0] -> [0];
[1,3,3] -> [3,3,1];
[0,3,0] -> [0,3,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0235499999999 true true

[3] -> [3];
[] -> [];
[2,2] -> [2,2];
[1,0] -> [0,1];
[2,0] -> [0,2];
[2,3,3] -> [3,3,2];
[0,2,0] -> [0,2,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0148469999999 true true

[1] -> [1];
[0,2] -> [2,0];
[0] -> [0];
[1,0] -> [0,1];
[2,0,0] -> [0,0,2];
[2] -> [2];
[0,2,3] -> [3,2,0];

=================================
NOSOL

[1] -> [1];
[3,1,0] -> [0,1,3];
[] -> [];
[2,1] -> [1,2];
[1,0] -> [0,1];
[3,2] -> [2,3];
[1,3] -> [3,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0187249999999 true true

[] -> [];
[2,3] -> [3,2];
[3] -> [3];
[1] -> [1];
[3,3] -> [3,3];
[3,2,2] -> [2,2,3];
[0,1] -> [1,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.022974 false true

[1] -> [1];
[1,1,3] -> [3,1,1];
[3,1] -> [1,3];
[3,0,2] -> [2,0,3];
[] -> [];
[2,3,3] -> [3,3,2];
[2,3] -> [3,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.029728 true true

[] -> [];
[2,3] -> [3,2];
[2,3,1] -> [1,3,2];
[1,1,3] -> [3,1,1];
[1,1,1] -> [1,1,1];
[0,0] -> [0,0];
[1,3] -> [3,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0190239999999 true true

[] -> [];
[2,1,3] -> [3,1,2];
[3,3,3] -> [3,3,3];
[3,3,0] -> [0,3,3];
[3,2] -> [2,3];
[2,3] -> [3,2];
[1,2] -> [2,1];
[2,1] -> [1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.014815 true true

[2,3] -> [3,2];
[2,1] -> [1,2];
[0] -> [0];
[] -> [];
[1,1] -> [1,1];
[0,2,2] -> [2,2,0];
[2,0,1] -> [1,0,2];
[2,0] -> [0,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0192589999999 true true

[1,1] -> [1,1];
[3,3] -> [3,3];
[3,0,1] -> [1,0,3];
[2,2] -> [2,2];
[0,2,2] -> [2,2,0];
[3] -> [3];
[0] -> [0];
[3,0] -> [0,3];

=================================
NOSOL

[1] -> [1];
[3,3,2] -> [2,3,3];
[3,2] -> [2,3];
[0,3] -> [3,0];
[2] -> [2];
[0] -> [0];
[2,3] -> [3,2];
[2,3,1] -> [1,3,2];

=================================
NOSOL

[2,3] -> [3,2];
[0,1] -> [1,0];
[0] -> [0];
[] -> [];
[2] -> [2];
[3,0] -> [0,3];
[3,0,3] -> [3,0,3];
[1] -> [1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.018311 true true

[2,0,2] -> [2,0,2];
[0,1,0] -> [0,1,0];
[0,1,1] -> [1,1,0];
[] -> [];
[3] -> [3];
[3,2] -> [2,3];
[0] -> [0];
[1,2] -> [2,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0216849999999 true true

[3] -> [3];
[0,3] -> [3,0];
[1,0] -> [0,1];
[] -> [];
[2,0] -> [0,2];
[2] -> [2];
[2,2,1] -> [1,2,2];
[0,2] -> [2,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.017691 true true

[] -> [];
[3,3] -> [3,3];
[2] -> [2];
[2,2,0] -> [0,2,2];
[3,0] -> [0,3];
[1,2,2] -> [2,2,1];
[1,1] -> [1,1];
[1,2] -> [2,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0228059999999 true true

[3] -> [3];
[3,3] -> [3,3];
[] -> [];
[3,2] -> [2,3];
[0,3] -> [3,0];
[2] -> [2];
[1] -> [1];
[2,2,2] -> [2,2,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0243230000001 false true

[3] -> [3];
[2,0] -> [0,2];
[0] -> [0];
[] -> [];
[3,3] -> [3,3];
[1,1] -> [1,1];
[1,3,3] -> [3,3,1];
[2,1,1] -> [1,1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0184139999999 false true

[0,2] -> [2,0];
[0,1,3] -> [3,1,0];
[3] -> [3];
[2,3] -> [3,2];
[] -> [];
[0] -> [0];
[3,1] -> [1,3];
[1,1,1] -> [1,1,1];
[3,2] -> [2,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0193879999999 true true

[0,3,2] -> [2,3,0];
[] -> [];
[2,3,3] -> [3,3,2];
[0,0,3] -> [3,0,0];
[0,3,3] -> [3,3,0];
[1,3] -> [3,1];
[2,0,2] -> [2,0,2];
[0] -> [0];
[3,1,1] -> [1,1,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0207820000001 true true

[3,3] -> [3,3];
[2,0] -> [0,2];
[] -> [];
[3,1,1] -> [1,1,3];
[2] -> [2];
[3] -> [3];
[2,2] -> [2,2];
[2,1,1] -> [1,1,2];
[1,0] -> [0,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0202019999999 false true

[1] -> [1];
[] -> [];
[3] -> [3];
[0,0,2] -> [2,0,0];
[1,2,0] -> [0,2,1];
[2] -> [2];
[2,3] -> [3,2];
[0,3,2] -> [2,3,0];
[0,3] -> [3,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0188969999999 true true

[] -> [];
[1,1,0] -> [0,1,1];
[3] -> [3];
[0,3] -> [3,0];
[1,0,3] -> [3,0,1];
[3,0,0] -> [0,0,3];
[3,0,2] -> [2,0,3];
[1] -> [1];
[2] -> [2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0133840000001 true true

[0,3] -> [3,0];
[] -> [];
[2,0] -> [0,2];
[0] -> [0];
[3,3] -> [3,3];
[2] -> [2];
[2,1] -> [1,2];
[0,2,3] -> [3,2,0];
[3,1] -> [1,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.024216 true true

[2,3] -> [3,2];
[] -> [];
[0,0,0] -> [0,0,0];
[0,0,3] -> [3,0,0];
[2] -> [2];
[1,1,0] -> [0,1,1];
[1] -> [1];
[3,3] -> [3,3];
[0] -> [0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.016498 true true

[] -> [];
[1,2,1] -> [1,2,1];
[1,3,0] -> [0,3,1];
[2,1,0] -> [0,1,2];
[1] -> [1];
[2] -> [2];
[2,1] -> [1,2];
[0,3] -> [3,0];
[2,2] -> [2,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.016161 true true

[] -> [];
[1] -> [1];
[2,1,0] -> [0,1,2];
[1,2,3] -> [3,2,1];
[3,0,0] -> [0,0,3];
[0] -> [0];
[2,3,2] -> [2,3,2];
[2,0,2] -> [2,0,2];
[3,0] -> [0,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0243840000001 true true

[0,0,0] -> [0,0,0];
[] -> [];
[3] -> [3];
[1,2,0] -> [0,2,1];
[1,0,2] -> [2,0,1];
[2,1,2] -> [2,1,2];
[1] -> [1];
[0] -> [0];
[1,1,3] -> [3,1,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0250129999999 true true

[3] -> [3];
[] -> [];
[1] -> [1];
[2,3,3] -> [3,3,2];
[2] -> [2];
[0,3] -> [3,0];
[2,0] -> [0,2];
[2,3] -> [3,2];
[0] -> [0];
[1,3] -> [3,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0218589999999 false true

[0,2] -> [2,0];
[0] -> [0];
[3,2,0] -> [0,2,3];
[2,0,3] -> [3,0,2];
[] -> [];
[3,0,0] -> [0,0,3];
[3] -> [3];
[1] -> [1];
[2,1] -> [1,2];
[2] -> [2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0134680000001 true true

[1,0,1] -> [1,0,1];
[0] -> [0];
[0,1] -> [1,0];
[3,0] -> [0,3];
[2,3,2] -> [2,3,2];
[] -> [];
[0,2,2] -> [2,2,0];
[3,2] -> [2,3];
[1,1,2] -> [2,1,1];
[0,3] -> [3,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0273589999999 true true

[2] -> [2];
[] -> [];
[3,0,1] -> [1,0,3];
[0,3,2] -> [2,3,0];
[0,1,3] -> [3,1,0];
[0,2,0] -> [0,2,0];
[1,2] -> [2,1];
[0] -> [0];
[2,0] -> [0,2];
[1,1] -> [1,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0247420000001 true true

[] -> [];
[3,0] -> [0,3];
[1] -> [1];
[0,3] -> [3,0];
[0,3,1] -> [1,3,0];
[3] -> [3];
[1,3,0] -> [0,3,1];
[2] -> [2];
[2,3,3] -> [3,3,2];
[0] -> [0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.024664 true true

[] -> [];
[3,3,2] -> [2,3,3];
[0,2,2] -> [2,2,0];
[2,3] -> [3,2];
[0,1,1] -> [1,1,0];
[0,3] -> [3,0];
[1] -> [1];
[1,0] -> [0,1];
[0,3,3] -> [3,3,0];
[3,1,2] -> [2,1,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.022641 true true

[3] -> [3];
[2,0,3] -> [3,0,2];
[0,0] -> [0,0];
[3,0] -> [0,3];
[2] -> [2];
[0] -> [0];
[2,3,3] -> [3,3,2];
[] -> [];
[0,3,0] -> [0,3,0];
[1,1] -> [1,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0238649999999 true true

[1,3] -> [3,1];
[] -> [];
[1] -> [1];
[0,1] -> [1,0];
[3,0,0] -> [0,0,3];
[3,1] -> [1,3];
[0] -> [0];
[1,1] -> [1,1];
[2,3,3] -> [3,3,2];
[1,0,3] -> [3,0,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.015502 true true

[2,2] -> [2,2];
[] -> [];
[0,3] -> [3,0];
[3] -> [3];
[3,1,0] -> [0,1,3];
[1,1] -> [1,1];
[0] -> [0];
[3,0] -> [0,3];
[0,2] -> [2,0];
[2,2,1] -> [1,2,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0143029999999 true true

[2,3] -> [3,2];
[] -> [];
[3] -> [3];
[1] -> [1];
[0,0,2] -> [2,0,0];
[2,2] -> [2,2];
[1,0,2] -> [2,0,1];
[2,2,3] -> [3,2,2];
[2,0,1] -> [1,0,2];
[1,3] -> [3,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0306169999999 true true

[2,3] -> [3,2];
[0,1] -> [1,0];
[0,2,3] -> [3,2,0];
[1,0,1] -> [1,0,1];
[] -> [];
[0,3] -> [3,0];
[3,0] -> [0,3];
[1] -> [1];
[3,0,3] -> [3,0,3];
[2,3,3] -> [3,3,2];
[1,3] -> [3,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.026914 true true

[2,0] -> [0,2];
[2,1,3] -> [3,1,2];
[] -> [];
[1] -> [1];
[1,1,0] -> [0,1,1];
[3,3,3] -> [3,3,3];
[3,1,1] -> [1,1,3];
[1,3] -> [3,1];
[3] -> [3];
[3,2] -> [2,3];
[2,3,1] -> [1,3,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.013101 true true

[0] -> [0];
[1,2] -> [2,1];
[1] -> [1];
[1,3,0] -> [0,3,1];
[2] -> [2];
[1,1,1] -> [1,1,1];
[] -> [];
[1,1,0] -> [0,1,1];
[2,2] -> [2,2];
[0,0] -> [0,0];
[3,0,3] -> [3,0,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0269860000001 true true

[0,2,3] -> [3,2,0];
[1] -> [1];
[3,1] -> [1,3];
[] -> [];
[3,3] -> [3,3];
[2,1] -> [1,2];
[2,3,2] -> [2,3,2];
[0] -> [0];
[0,1,2] -> [2,1,0];
[3,2] -> [2,3];
[0,2] -> [2,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0272219999999 true true

[3] -> [3];
[1] -> [1];
[] -> [];
[1,1,1] -> [1,1,1];
[2,1,2] -> [2,1,2];
[3,1] -> [1,3];
[0] -> [0];
[1,2,3] -> [3,2,1];
[1,2,2] -> [2,2,1];
[0,1,1] -> [1,1,0];
[2] -> [2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0242969999999 true true

[] -> [];
[2] -> [2];
[2,0] -> [0,2];
[0,0,3] -> [3,0,0];
[0,1,0] -> [0,1,0];
[3] -> [3];
[1] -> [1];
[3,1] -> [1,3];
[1,3,1] -> [1,3,1];
[3,2] -> [2,3];
[0] -> [0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.014531 true true

[2] -> [2];
[] -> [];
[0] -> [0];
[0,0] -> [0,0];
[1,3,1] -> [1,3,1];
[0,2] -> [2,0];
[3] -> [3];
[1,2] -> [2,1];
[0,1,1] -> [1,1,0];
[0,2,1] -> [1,2,0];
[3,1,1] -> [1,1,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0238039999999 true true

[1,2,0] -> [0,2,1];
[1] -> [1];
[0,1,3] -> [3,1,0];
[] -> [];
[3,2,0] -> [0,2,3];
[1,3,2] -> [2,3,1];
[1,0] -> [0,1];
[3,1,1] -> [1,1,3];
[3,0,2] -> [2,0,3];
[2] -> [2];
[2,1] -> [1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.018965 true true

[1] -> [1];
[0,1,3] -> [3,1,0];
[1,2] -> [2,1];
[] -> [];
[3,3,3] -> [3,3,3];
[2,1,2] -> [2,1,2];
[1,3] -> [3,1];
[2,0] -> [0,2];
[3,1,2] -> [2,1,3];
[3,1] -> [1,3];
[3,3,0] -> [0,3,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0197049999999 true true

[2,1,2] -> [2,1,2];
[] -> [];
[0,0] -> [0,0];
[2] -> [2];
[1,2] -> [2,1];
[1] -> [1];
[0,3] -> [3,0];
[0] -> [0];
[3,2,3] -> [3,2,3];
[0,1,0] -> [0,1,0];
[3] -> [3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.022434 true true

[1] -> [1];
[2] -> [2];
[] -> [];
[3,0,3] -> [3,0,3];
[1,0] -> [0,1];
[3,2,1] -> [1,2,3];
[3,2] -> [2,3];
[3] -> [3];
[0] -> [0];
[1,1] -> [1,1];
[2,1,2] -> [2,1,2];
[2,1] -> [1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0264070000001 true true

[2] -> [2];
[] -> [];
[2,3] -> [3,2];
[0] -> [0];
[1,3,3] -> [3,3,1];
[2,0] -> [0,2];
[2,1,0] -> [0,1,2];
[1] -> [1];
[2,1] -> [1,2];
[1,0] -> [0,1];
[2,0,0] -> [0,0,2];
[2,2] -> [2,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0157160000001 true true

[0] -> [0];
[0,0,0] -> [0,0,0];
[2,1,0] -> [0,1,2];
[0,1] -> [1,0];
[] -> [];
[3] -> [3];
[3,0] -> [0,3];
[2,2,3] -> [3,2,2];
[3,0,3] -> [3,0,3];
[1,2] -> [2,1];
[0,0] -> [0,0];
[1,2,2] -> [2,2,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.016226 true true

[0] -> [0];
[] -> [];
[1,2,2] -> [2,2,1];
[2,2] -> [2,2];
[3,2,0] -> [0,2,3];
[1] -> [1];
[3] -> [3];
[0,0] -> [0,0];
[2,0,2] -> [2,0,2];
[3,2,1] -> [1,2,3];
[3,3] -> [3,3];
[1,3,0] -> [0,3,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0270149999999 true true

[] -> [];
[1,0] -> [0,1];
[0] -> [0];
[2,1] -> [1,2];
[1] -> [1];
[3,2] -> [2,3];
[0,3,3] -> [3,3,0];
[2,2,0] -> [0,2,2];
[0,3] -> [3,0];
[3,3] -> [3,3];
[3,2,2] -> [2,2,3];
[1,2] -> [2,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.015263 true true

[2,2] -> [2,2];
[0,0,1] -> [1,0,0];
[0,3,1] -> [1,3,0];
[] -> [];
[0] -> [0];
[0,1,1] -> [1,1,0];
[2] -> [2];
[3,3,1] -> [1,3,3];
[2,3] -> [3,2];
[0,0,2] -> [2,0,0];
[3,3,0] -> [0,3,3];
[3] -> [3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0168510000001 true true

[2,0] -> [0,2];
[1] -> [1];
[0,2,0] -> [0,2,0];
[3,0] -> [0,3];
[2,1] -> [1,2];
[] -> [];
[0] -> [0];
[3,3,0] -> [0,3,3];
[2] -> [2];
[3,1,3] -> [3,1,3];
[3,3] -> [3,3];
[3,0,2] -> [2,0,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.026658 true true

[] -> [];
[1,2,0] -> [0,2,1];
[1,0,0] -> [0,0,1];
[1,2] -> [2,1];
[0,0,0] -> [0,0,0];
[1] -> [1];
[3] -> [3];
[0,2,3] -> [3,2,0];
[2,1,0] -> [0,1,2];
[2,3] -> [3,2];
[1,1,1] -> [1,1,1];
[2,3,0] -> [0,3,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0166300000001 true true

[1] -> [1];
[0] -> [0];
[] -> [];
[2] -> [2];
[3,3,2] -> [2,3,3];
[3,1,0] -> [0,1,3];
[3,0,1] -> [1,0,3];
[3,3] -> [3,3];
[3] -> [3];
[0,2] -> [2,0];
[1,0,2] -> [2,0,1];
[2,1,3] -> [3,1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.017116 true true

[2,1] -> [1,2];
[3,2] -> [2,3];
[3,3] -> [3,3];
[] -> [];
[2,3,2] -> [2,3,2];
[2] -> [2];
[2,3] -> [3,2];
[0] -> [0];
[2,2,3] -> [3,2,2];
[1] -> [1];
[3,0] -> [0,3];
[3,3,1] -> [1,3,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0248220000001 true true

[0,3,2] -> [2,3,0];
[2,1] -> [1,2];
[1] -> [1];
[2,0] -> [0,2];
[] -> [];
[0,3] -> [3,0];
[3,0,3] -> [3,0,3];
[2,1,0] -> [0,1,2];
[3] -> [3];
[2,1,2] -> [2,1,2];
[0] -> [0];
[0,1] -> [1,0];
[3,1,0] -> [0,1,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0336030000001 true true

[2,2,1] -> [1,2,2];
[0] -> [0];
[1] -> [1];
[] -> [];
[2] -> [2];
[1,2,0] -> [0,2,1];
[3,3,2] -> [2,3,3];
[2,3,0] -> [0,3,2];
[1,2] -> [2,1];
[0,0,1] -> [1,0,0];
[2,3,1] -> [1,3,2];
[3] -> [3];
[1,1] -> [1,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.017576 true true

[] -> [];
[2,0] -> [0,2];
[2] -> [2];
[1,0] -> [0,1];
[1,3,3] -> [3,3,1];
[2,2,0] -> [0,2,2];
[3,0,3] -> [3,0,3];
[3,3,1] -> [1,3,3];
[3,1] -> [1,3];
[1,3] -> [3,1];
[3] -> [3];
[0,0] -> [0,0];
[2,1] -> [1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.026576 true true

[] -> [];
[3,2] -> [2,3];
[0,3,1] -> [1,3,0];
[3] -> [3];
[1,2,3] -> [3,2,1];
[2,1,3] -> [3,1,2];
[3,0] -> [0,3];
[0] -> [0];
[2,2,3] -> [3,2,2];
[1] -> [1];
[1,2] -> [2,1];
[0,3,2] -> [2,3,0];
[1,1] -> [1,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0274400000001 true true

[] -> [];
[0] -> [0];
[3] -> [3];
[1,0,3] -> [3,0,1];
[1] -> [1];
[0,2] -> [2,0];
[2,2,3] -> [3,2,2];
[3,0,0] -> [0,0,3];
[2,0,2] -> [2,0,2];
[3,2] -> [2,3];
[0,0,2] -> [2,0,0];
[2,1] -> [1,2];
[0,2,3] -> [3,2,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.024739 true true

[0,1,0] -> [0,1,0];
[1] -> [1];
[3] -> [3];
[0] -> [0];
[3,2] -> [2,3];
[2] -> [2];
[] -> [];
[3,0] -> [0,3];
[3,3] -> [3,3];
[0,3,0] -> [0,3,0];
[2,0,0] -> [0,0,2];
[2,2] -> [2,2];
[0,2,3] -> [3,2,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0168619999999 true true

[1,1,2] -> [2,1,1];
[] -> [];
[2,3] -> [3,2];
[1] -> [1];
[3,0,0] -> [0,0,3];
[1,1] -> [1,1];
[1,0,3] -> [3,0,1];
[1,0,1] -> [1,0,1];
[0,0] -> [0,0];
[2,1,1] -> [1,1,2];
[0,1,0] -> [0,1,0];
[2] -> [2];
[2,3,2] -> [2,3,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0230790000001 true true

[] -> [];
[1,0] -> [0,1];
[2,3] -> [3,2];
[3,1] -> [1,3];
[0,2,0] -> [0,2,0];
[3] -> [3];
[0] -> [0];
[1,3,0] -> [0,3,1];
[2,2] -> [2,2];
[3,3] -> [3,3];
[1,3] -> [3,1];
[0,3,3] -> [3,3,0];
[2] -> [2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.02908 true true

[] -> [];
[1,2] -> [2,1];
[2] -> [2];
[3,2] -> [2,3];
[3] -> [3];
[1] -> [1];
[1,0] -> [0,1];
[1,1,3] -> [3,1,1];
[2,0] -> [0,2];
[2,2] -> [2,2];
[2,2,0] -> [0,2,2];
[1,1] -> [1,1];
[2,1,0] -> [0,1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.026803 true true

[] -> [];
[2,1] -> [1,2];
[3,0] -> [0,3];
[1,3] -> [3,1];
[1,2,0] -> [0,2,1];
[2] -> [2];
[3] -> [3];
[0,3,2] -> [2,3,0];
[1,3,3] -> [3,3,1];
[1,1] -> [1,1];
[3,1,3] -> [3,1,3];
[1,0,2] -> [2,0,1];
[1] -> [1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.026928 true true

[] -> [];
[1,0,2] -> [2,0,1];
[2,0] -> [0,2];
[2,1] -> [1,2];
[3,1] -> [1,3];
[3] -> [3];
[2,2] -> [2,2];
[3,0] -> [0,3];
[0] -> [0];
[1,2] -> [2,1];
[1] -> [1];
[2,2,2] -> [2,2,2];
[0,1] -> [1,0];
[1,0] -> [0,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0266099999999 true true

[2] -> [2];
[] -> [];
[1,1] -> [1,1];
[0,3] -> [3,0];
[0,0] -> [0,0];
[1,0] -> [0,1];
[2,2] -> [2,2];
[0,1,3] -> [3,1,0];
[3,1] -> [1,3];
[1,0,1] -> [1,0,1];
[2,1,3] -> [3,1,2];
[3,2] -> [2,3];
[1,2] -> [2,1];
[0,0,2] -> [2,0,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0259329999999 true true

[2,0,0] -> [0,0,2];
[1,2] -> [2,1];
[0,3,1] -> [1,3,0];
[1,0] -> [0,1];
[3] -> [3];
[] -> [];
[3,3,0] -> [0,3,3];
[3,2,0] -> [0,2,3];
[3,2,2] -> [2,2,3];
[2,1] -> [1,2];
[1,0,0] -> [0,0,1];
[1,1,2] -> [2,1,1];
[0,1] -> [1,0];
[2,0] -> [0,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0272210000001 true true

[] -> [];
[0,1,2] -> [2,1,0];
[3,2,3] -> [3,2,3];
[0,1] -> [1,0];
[1,1] -> [1,1];
[0,0,2] -> [2,0,0];
[3,1] -> [1,3];
[0] -> [0];
[3,1,1] -> [1,1,3];
[2,1] -> [1,2];
[1] -> [1];
[2,3] -> [3,2];
[3,1,2] -> [2,1,3];
[3] -> [3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.026787 true true

[2,0] -> [0,2];
[0,1,1] -> [1,1,0];
[1,0,3] -> [3,0,1];
[] -> [];
[3] -> [3];
[0,3,0] -> [0,3,0];
[3,2,2] -> [2,2,3];
[1] -> [1];
[0] -> [0];
[0,0,0] -> [0,0,0];
[1,1] -> [1,1];
[0,2,3] -> [3,2,0];
[0,2,1] -> [1,2,0];
[0,1] -> [1,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0181439999999 true true

[3,3] -> [3,3];
[0] -> [0];
[2,3] -> [3,2];
[0,0,1] -> [1,0,0];
[2] -> [2];
[2,1,1] -> [1,1,2];
[] -> [];
[2,0,2] -> [2,0,2];
[2,0,0] -> [0,0,2];
[0,0] -> [0,0];
[2,2,2] -> [2,2,2];
[2,2] -> [2,2];
[0,1] -> [1,0];
[2,2,1] -> [1,2,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0166569999999 true true

[3,1,0] -> [0,1,3];
[] -> [];
[0,1,0] -> [0,1,0];
[1,2,0] -> [0,2,1];
[1,1,2] -> [2,1,1];
[2] -> [2];
[3] -> [3];
[0,0,0] -> [0,0,0];
[0] -> [0];
[1] -> [1];
[0,2] -> [2,0];
[3,2,3] -> [3,2,3];
[0,1,1] -> [1,1,0];
[1,1] -> [1,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0219380000001 true true

[] -> [];
[3,1,2] -> [2,1,3];
[2] -> [2];
[3,3,2] -> [2,3,3];
[0,1] -> [1,0];
[2,1] -> [1,2];
[0,3,1] -> [1,3,0];
[3] -> [3];
[2,0] -> [0,2];
[1] -> [1];
[3,0,0] -> [0,0,3];
[0,3,2] -> [2,3,0];
[3,1,0] -> [0,1,3];
[1,0,2] -> [2,0,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0179390000001 true true

[2] -> [2];
[0,0,3] -> [3,0,0];
[2,0,3] -> [3,0,2];
[1,2] -> [2,1];
[] -> [];
[2,1] -> [1,2];
[1] -> [1];
[1,1] -> [1,1];
[3] -> [3];
[0,1,3] -> [3,1,0];
[0,0,0] -> [0,0,0];
[1,0,0] -> [0,0,1];
[2,0,2] -> [2,0,2];
[0,3] -> [3,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.017108 true true

[] -> [];
[2] -> [2];
[1] -> [1];
[3,2] -> [2,3];
[2,3,1] -> [1,3,2];
[3,2,1] -> [1,2,3];
[2,0,2] -> [2,0,2];
[3] -> [3];
[3,0,2] -> [2,0,3];
[2,2,2] -> [2,2,2];
[3,3] -> [3,3];
[2,2,0] -> [0,2,2];
[2,1] -> [1,2];
[2,1,0] -> [0,1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0305539999999 true true

[2,3,2] -> [2,3,2];
[] -> [];
[2] -> [2];
[2,3] -> [3,2];
[1,0] -> [0,1];
[0] -> [0];
[0,1] -> [1,0];
[3,2] -> [2,3];
[2,3,1] -> [1,3,2];
[3,0] -> [0,3];
[2,1] -> [1,2];
[0,0] -> [0,0];
[0,2,2] -> [2,2,0];
[2,0,2] -> [2,0,2];
[1,3] -> [3,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.017212 true true

[3,3,2] -> [2,3,3];
[] -> [];
[0,3,3] -> [3,3,0];
[2,1] -> [1,2];
[3,0,1] -> [1,0,3];
[0,3,2] -> [2,3,0];
[3,2,1] -> [1,2,3];
[2,2] -> [2,2];
[1,0] -> [0,1];
[1] -> [1];
[3] -> [3];
[1,0,1] -> [1,0,1];
[3,0] -> [0,3];
[2,3,2] -> [2,3,2];
[2,0] -> [0,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0315069999999 true true

[1] -> [1];
[0] -> [0];
[0,3,0] -> [0,3,0];
[] -> [];
[3] -> [3];
[2] -> [2];
[1,3,2] -> [2,3,1];
[1,0] -> [0,1];
[3,2,3] -> [3,2,3];
[1,3,3] -> [3,3,1];
[0,2,0] -> [0,2,0];
[3,1] -> [1,3];
[0,0] -> [0,0];
[3,3,0] -> [0,3,3];
[3,2,2] -> [2,2,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0182910000001 true true

[1,0] -> [0,1];
[2,0,1] -> [1,0,2];
[3,2,0] -> [0,2,3];
[2,3] -> [3,2];
[] -> [];
[0,1,0] -> [0,1,0];
[1] -> [1];
[3] -> [3];
[1,0,3] -> [3,0,1];
[3,3,0] -> [0,3,3];
[0,1,2] -> [2,1,0];
[1,3,2] -> [2,3,1];
[0,2,3] -> [3,2,0];
[0,0] -> [0,0];
[0,1] -> [1,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0288559999999 true true

[1] -> [1];
[1,3] -> [3,1];
[0,0,2] -> [2,0,0];
[0,1,1] -> [1,1,0];
[] -> [];
[3,3,1] -> [1,3,3];
[2,0] -> [0,2];
[2,3,2] -> [2,3,2];
[3] -> [3];
[2,2] -> [2,2];
[2] -> [2];
[0,1] -> [1,0];
[1,2,1] -> [1,2,1];
[3,3] -> [3,3];
[0,2] -> [2,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.020919 true true

[1] -> [1];
[] -> [];
[2] -> [2];
[0] -> [0];
[1,1,0] -> [0,1,1];
[3,1,1] -> [1,1,3];
[1,2] -> [2,1];
[1,1] -> [1,1];
[3,0] -> [0,3];
[2,3,3] -> [3,3,2];
[3,1] -> [1,3];
[3] -> [3];
[1,0,3] -> [3,0,1];
[3,2] -> [2,3];
[2,1,3] -> [3,1,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0161519999999 true true

[2,1] -> [1,2];
[1,1] -> [1,1];
[] -> [];
[3] -> [3];
[3,2] -> [2,3];
[0,3,0] -> [0,3,0];
[0,3] -> [3,0];
[2,0] -> [0,2];
[0,3,3] -> [3,3,0];
[0,0] -> [0,0];
[1,3,0] -> [0,3,1];
[1] -> [1];
[2,3,2] -> [2,3,2];
[2] -> [2];
[1,1,0] -> [0,1,1];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0165910000001 true true

[3,1,0] -> [0,1,3];
[] -> [];
[0,2] -> [2,0];
[3] -> [3];
[1,0,3] -> [3,0,1];
[2,0,2] -> [2,0,2];
[0,1,2] -> [2,1,0];
[1,3] -> [3,1];
[3,1,3] -> [3,1,3];
[3,2] -> [2,3];
[1] -> [1];
[2] -> [2];
[2,3] -> [3,2];
[0,0,2] -> [2,0,0];
[3,1,2] -> [2,1,3];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0320589999999 true true

[1,2,3] -> [3,2,1];
[1,0,3] -> [3,0,1];
[2,2] -> [2,2];
[2] -> [2];
[1,0] -> [0,1];
[1,2] -> [2,1];
[] -> [];
[3,2] -> [2,3];
[0] -> [0];
[3,1] -> [1,3];
[1,0,0] -> [0,0,1];
[2,1,2] -> [2,1,2];
[1] -> [1];
[2,3] -> [3,2];
[0,2,2] -> [2,2,0];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.032948 true true

[0,0,2] -> [2,0,0];
[3,1] -> [1,3];
[0,2] -> [2,0];
[0] -> [0];
[3,0,1] -> [1,0,3];
[0,0] -> [0,0];
[] -> [];
[0,3] -> [3,0];
[2] -> [2];
[3,0] -> [0,3];
[0,0,3] -> [3,0,0];
[1,0] -> [0,1];
[1,3] -> [3,1];
[2,2] -> [2,2];
[2,3,0] -> [0,3,2];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0234840000001 true true

