(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.034414 false false

(inc,[1,0,2]) -> [2,1,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [2, 1, 3] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.325291 false false

(inc,[1,1]) -> [2,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [2, 2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.238009 false false

(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.127805 false false

(zero,[0]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.109511 false false

(zero,[1,2,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0, 0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.202186 false false

(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.029397 false false

(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.110635 false false

(zero,[0,2,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0, 0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.196495 false false

(inc,[1,0]) -> [2,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [2, 1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.234847 false false

(zero,[]) -> [];
(inc,[3,3,0]) -> [4,4,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [4, 4, 1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0524660000001 false false

(zero,[0,0]) -> [0,0];
(inc,[3]) -> [4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case f 0 of
      Z y1 -> 
        [0, 0]

      S y1 -> 
        [4] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.254831 false false

(zero,[1]) -> [0];
(inc,[2,3]) -> [3,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case f 0 of
      Z y1 -> 
        [0]

      S y1 -> 
        [3, 4] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.252786 false false

(zero,[2,0,3]) -> [0,0,0];
(inc,[2,2,0]) -> [3,3,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [f 2, f 2, f 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.192702 false false

(inc,[]) -> [];
(inc,[3,1,1]) -> [4,2,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [4, 2, 2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.051743 false false

(zero,[2,0]) -> [0,0];
(inc,[0,0,1]) -> [1,1,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case f 0 of
      Z y1 -> 
        [0, 0]

      S y1 -> 
        [1, 1, 2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
3.316276 false false

(zero,[2]) -> [0];
(inc,[3]) -> [4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [f 3] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.109952 false false

(inc,[3,0,0]) -> [4,1,1];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [4, 1, 1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0504599999999 false false

(zero,[]) -> [];
(inc,[1,0]) -> [2,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [2, 1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0430220000001 false false

(inc,[]) -> [];
(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0397800000001 false false

(inc,[1,2]) -> [2,3];
(inc,[1]) -> [2];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0490050000001 false false

(inc,[1,2]) -> [2,3];
(zero,[1,3]) -> [0,0];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0436090000001 true true

(inc,[1,0,0]) -> [2,1,1];
(zero,[]) -> [];
(zero,[1,1,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [f (#2.1 y1), f 0, f 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0446240000001 false false

(inc,[3,0,1]) -> [4,1,2];
(inc,[2,1]) -> [3,2];
(inc,[1,0]) -> [2,1];

=================================
NOSOL

(inc,[2,2,2]) -> [3,3,3];
(zero,[3,3]) -> [0,0];
(inc,[0,3]) -> [1,4];

=================================
None
(zero,[]) -> [];
(zero,[2,1,1]) -> [0,0,0];
(inc,[1,0]) -> [2,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.139128 true true

(zero,[2]) -> [0];
(inc,[2,0,1]) -> [3,1,2];
(zero,[0,1,3]) -> [0,0,0];

=================================
NOSOL

(zero,[]) -> [];
(zero,[2,0]) -> [0,0];
(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (f (#2.1 y1), #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0372299999999 false true

(zero,[2]) -> [0];
(inc,[3,3,1]) -> [4,4,2];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0386189999999 true true

(inc,[3,1,3]) -> [4,2,4];
(inc,[1,2,2]) -> [2,3,3];
(zero,[0,2]) -> [0,0];

=================================
None
(inc,[3,1,3]) -> [4,2,4];
(inc,[0]) -> [1];
(zero,[0,0,3]) -> [0,0,0];
(zero,[3,3,2]) -> [0,0,0];

=================================
NOSOL

(zero,[0]) -> [0];
(inc,[0]) -> [1];
(zero,[2]) -> [0];
(inc,[2]) -> [3];

=================================
None
(zero,[1,3]) -> [0,0];
(zero,[]) -> [];
(inc,[2,2,0]) -> [3,3,1];
(zero,[3,3]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.158684 true true

(inc,[]) -> [];
(zero,[1,1]) -> [0,0];
(zero,[1]) -> [0];
(inc,[3]) -> [4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.040248 true true

(zero,[0,3,1]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[2]) -> [3];
(zero,[0,3]) -> [0,0];

=================================
NOSOL

(inc,[]) -> [];
(inc,[1]) -> [2];
(zero,[1,0]) -> [0,0];
(zero,[0]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (f (#2.1 y1), #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043486 false true

(inc,[1,1,2]) -> [2,2,3];
(zero,[1,2]) -> [0,0];
(zero,[1,2,3]) -> [0,0,0];
(inc,[0,1,1]) -> [1,2,2];

=================================
None
(zero,[2,1,2]) -> [0,0,0];
(inc,[]) -> [];
(zero,[0,3]) -> [0,0];
(inc,[3]) -> [4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0413390000001 true true

(inc,[2,1,3]) -> [3,2,4];
(inc,[1,2,0]) -> [2,3,1];
(zero,[3,0]) -> [0,0];
(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0464669999999 true true

(zero,[1]) -> [0];
(inc,[0,3,3]) -> [1,4,4];
(inc,[3]) -> [4];
(zero,[2,0,1]) -> [0,0,0];

=================================
NOSOL

(zero,[]) -> [];
(zero,[2,2]) -> [0,0];
(inc,[]) -> [];
(zero,[1,1,2]) -> [0,0,0];
(inc,[1,0]) -> [2,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.168269 true true

(inc,[2]) -> [3];
(inc,[0,1]) -> [1,2];
(zero,[1]) -> [0];
(zero,[3]) -> [0];
(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.040381 true true

(zero,[]) -> [];
(zero,[1,1]) -> [0,0];
(zero,[0]) -> [0];
(zero,[2,3]) -> [0,0];
(inc,[2,3,3]) -> [3,4,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0460330000001 true true

(zero,[0]) -> [0];
(inc,[0]) -> [1];
(zero,[]) -> [];
(zero,[1,1]) -> [0,0];
(zero,[1,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0435620000001 true true

(zero,[]) -> [];
(inc,[]) -> [];
(zero,[3]) -> [0];
(zero,[2,3]) -> [0,0];
(inc,[1,3,1]) -> [2,4,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041199 true true

(inc,[0]) -> [1];
(inc,[]) -> [];
(zero,[0,3,0]) -> [0,0,0];
(inc,[2,1]) -> [3,2];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0421229999999 true true

(inc,[0]) -> [1];
(zero,[0,1]) -> [0,0];
(inc,[0,0]) -> [1,1];
(inc,[]) -> [];
(zero,[1,0,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043234 true true

(zero,[1,3]) -> [0,0];
(inc,[1]) -> [2];
(zero,[]) -> [];
(zero,[1,0]) -> [0,0];
(zero,[0,3]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043367 true true

(zero,[1,2]) -> [0,0];
(zero,[0,2]) -> [0,0];
(inc,[]) -> [];
(zero,[1]) -> [0];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0460410000001 false false

(inc,[]) -> [];
(inc,[2]) -> [3];
(zero,[2]) -> [0];
(zero,[1]) -> [0];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [f (#2.1 y1)] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.037887 false true

(inc,[3,2]) -> [4,3];
(zero,[1,3]) -> [0,0];
(inc,[1]) -> [2];
(inc,[3,3,2]) -> [4,4,3];
(zero,[]) -> [];
(inc,[1,2,0]) -> [2,3,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.045091 true true

(inc,[]) -> [];
(zero,[3,2]) -> [0,0];
(zero,[]) -> [];
(inc,[0,1]) -> [1,2];
(zero,[3,0,3]) -> [0,0,0];
(inc,[2,1,1]) -> [3,2,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048601 true true

(zero,[1]) -> [0];
(inc,[3]) -> [4];
(inc,[]) -> [];
(zero,[3,0,2]) -> [0,0,0];
(zero,[0,1,3]) -> [0,0,0];
(inc,[1,2,2]) -> [2,3,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041796 true true

(inc,[2]) -> [3];
(zero,[]) -> [];
(inc,[1,3]) -> [2,4];
(zero,[2,2,2]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[0,0,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0415640000001 true true

(zero,[2,2,1]) -> [0,0,0];
(zero,[1,2,3]) -> [0,0,0];
(inc,[]) -> [];
(zero,[3,0]) -> [0,0];
(inc,[1,3,0]) -> [2,4,1];
(zero,[0,0,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.27713 true true

(inc,[]) -> [];
(inc,[2]) -> [3];
(zero,[2]) -> [0];
(inc,[3,0]) -> [4,1];
(zero,[1,3,0]) -> [0,0,0];
(inc,[0,1]) -> [1,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0450040000001 true true

(zero,[]) -> [];
(zero,[3,2]) -> [0,0];
(zero,[3]) -> [0];
(inc,[1,2]) -> [2,3];
(inc,[3,0,0]) -> [4,1,1];
(zero,[0]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.045558 true true

(zero,[2,0,0]) -> [0,0,0];
(zero,[2,0]) -> [0,0];
(inc,[0]) -> [1];
(inc,[3,0,0]) -> [4,1,1];
(inc,[1,0,3]) -> [2,1,4];
(zero,[2,0,3]) -> [0,0,0];

=================================
NOSOL

(inc,[0,0,2]) -> [1,1,3];
(zero,[3]) -> [0];
(inc,[3]) -> [4];
(zero,[1]) -> [0];
(inc,[0]) -> [1];
(inc,[2,2]) -> [3,3];

=================================
NOSOL

(inc,[1]) -> [2];
(zero,[3,0,0]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[]) -> [];
(inc,[0]) -> [1];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (f (#2.1 y1), #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042017 false true

(inc,[1,2]) -> [2,3];
(zero,[]) -> [];
(zero,[3,0,3]) -> [0,0,0];
(inc,[]) -> [];
(zero,[3,3]) -> [0,0];
(zero,[3,2,1]) -> [0,0,0];
(inc,[0,2,3]) -> [1,3,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0519019999999 true true

(inc,[2,0,1]) -> [3,1,2];
(inc,[]) -> [];
(inc,[3,0]) -> [4,1];
(zero,[0,1]) -> [0,0];
(zero,[2,1]) -> [0,0];
(zero,[]) -> [];
(inc,[3,1]) -> [4,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048462 true true

(zero,[2,1]) -> [0,0];
(zero,[1,1]) -> [0,0];
(zero,[0]) -> [0];
(zero,[3,3,3]) -> [0,0,0];
(inc,[]) -> [];
(inc,[1,0]) -> [2,1];
(zero,[3]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0472649999999 true true

(zero,[0,0,1]) -> [0,0,0];
(inc,[2]) -> [3];
(inc,[0,2,1]) -> [1,3,2];
(inc,[0,2,2]) -> [1,3,3];
(inc,[0]) -> [1];
(inc,[]) -> [];
(inc,[1]) -> [2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044809 true true

(zero,[3]) -> [0];
(inc,[]) -> [];
(inc,[1,3]) -> [2,4];
(zero,[3,2,2]) -> [0,0,0];
(inc,[0]) -> [1];
(inc,[2,3,1]) -> [3,4,2];
(zero,[0,1,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0475180000001 true true

(zero,[1,2,0]) -> [0,0,0];
(zero,[0,2,1]) -> [0,0,0];
(zero,[3,1,3]) -> [0,0,0];
(zero,[3,1,0]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[]) -> [];
(zero,[1,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0494409999999 false false

(inc,[0,3]) -> [1,4];
(zero,[1,2,2]) -> [0,0,0];
(inc,[1,2]) -> [2,3];
(inc,[1,1,2]) -> [2,2,3];
(zero,[1]) -> [0];
(inc,[2,3,3]) -> [3,4,4];
(inc,[1]) -> [2];

=================================
NOSOL

(zero,[2]) -> [0];
(zero,[0,2]) -> [0,0];
(zero,[3]) -> [0];
(zero,[1,3,0]) -> [0,0,0];
(zero,[]) -> [];
(zero,[3,2]) -> [0,0];
(zero,[2,0,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0510529999999 false false

(zero,[]) -> [];
(inc,[1]) -> [2];
(zero,[2]) -> [0];
(inc,[0,3]) -> [1,4];
(inc,[2]) -> [3];
(inc,[]) -> [];
(zero,[0,1,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.045067 true true

(inc,[]) -> [];
(inc,[3,0,3]) -> [4,1,4];
(zero,[]) -> [];
(zero,[0,3]) -> [0,0];
(zero,[3]) -> [0];
(inc,[0,1]) -> [1,2];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0432269999999 true true

(inc,[3,1]) -> [4,2];
(zero,[1]) -> [0];
(inc,[]) -> [];
(inc,[3,0,3]) -> [4,1,4];
(zero,[2,3]) -> [0,0];
(zero,[3,3,1]) -> [0,0,0];
(inc,[2,0,0]) -> [3,1,1];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0431369999999 true true

(zero,[2]) -> [0];
(zero,[]) -> [];
(inc,[3,2]) -> [4,3];
(zero,[0,2]) -> [0,0];
(zero,[3,0]) -> [0,0];
(inc,[0,3]) -> [1,4];
(zero,[0,1]) -> [0,0];
(zero,[1,3]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044073 true true

(inc,[1,3,1]) -> [2,4,2];
(zero,[2,2]) -> [0,0];
(inc,[0,3,1]) -> [1,4,2];
(zero,[2]) -> [0];
(inc,[1]) -> [2];
(inc,[]) -> [];
(zero,[3]) -> [0];
(inc,[2,1,1]) -> [3,2,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0444210000001 true true

(zero,[2,1,0]) -> [0,0,0];
(zero,[]) -> [];
(inc,[1]) -> [2];
(inc,[2,0]) -> [3,1];
(inc,[]) -> [];
(zero,[2,2]) -> [0,0];
(zero,[3,3]) -> [0,0];
(zero,[1,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042944 true true

(zero,[0]) -> [0];
(inc,[1]) -> [2];
(zero,[1,3,1]) -> [0,0,0];
(inc,[0,0,2]) -> [1,1,3];
(inc,[1,0]) -> [2,1];
(zero,[2]) -> [0];
(zero,[3,2]) -> [0,0];
(zero,[1]) -> [0];

=================================
NOSOL

(zero,[2,2,2]) -> [0,0,0];
(zero,[2,3,2]) -> [0,0,0];
(zero,[]) -> [];
(zero,[0,3]) -> [0,0];
(inc,[0,0]) -> [1,1];
(zero,[3]) -> [0];
(inc,[3,1]) -> [4,2];
(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.049622 true true

(zero,[1,2,1]) -> [0,0,0];
(zero,[2]) -> [0];
(inc,[3,3]) -> [4,4];
(inc,[1,2,2]) -> [2,3,3];
(inc,[]) -> [];
(zero,[1,2]) -> [0,0];
(inc,[2,3,0]) -> [3,4,1];
(zero,[0,1,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0480219999999 true true

(zero,[]) -> [];
(inc,[]) -> [];
(zero,[0]) -> [0];
(zero,[1,3]) -> [0,0];
(inc,[3,2,1]) -> [4,3,2];
(inc,[0]) -> [1];
(inc,[0,1,1]) -> [1,2,2];
(inc,[1,2]) -> [2,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0465589999999 true true

(inc,[0,2]) -> [1,3];
(inc,[0,2,1]) -> [1,3,2];
(zero,[0]) -> [0];
(inc,[0,1]) -> [1,2];
(zero,[1,3,2]) -> [0,0,0];
(zero,[0,3,0]) -> [0,0,0];
(inc,[]) -> [];
(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0488789999999 true true

(zero,[]) -> [];
(inc,[2,0,2]) -> [3,1,3];
(inc,[2,2,1]) -> [3,3,2];
(inc,[1,2,1]) -> [2,3,2];
(inc,[1]) -> [2];
(inc,[]) -> [];
(inc,[2,0,1]) -> [3,1,2];
(inc,[3,2,3]) -> [4,3,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0616299999999 false false

(inc,[]) -> [];
(zero,[]) -> [];
(inc,[1,0,0]) -> [2,1,1];
(inc,[0,3,1]) -> [1,4,2];
(inc,[1,3,1]) -> [2,4,2];
(zero,[1]) -> [0];
(inc,[2,3]) -> [3,4];
(inc,[1,3]) -> [2,4];
(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0443190000001 true true

(inc,[3,1]) -> [4,2];
(zero,[0,3,3]) -> [0,0,0];
(zero,[2,3,1]) -> [0,0,0];
(inc,[1,2,2]) -> [2,3,3];
(inc,[]) -> [];
(zero,[1]) -> [0];
(zero,[1,2,0]) -> [0,0,0];
(zero,[1,2]) -> [0,0];
(zero,[3,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.045439 true true

(zero,[]) -> [];
(zero,[1,3]) -> [0,0];
(inc,[0,2,3]) -> [1,3,4];
(zero,[0]) -> [0];
(zero,[3,3,0]) -> [0,0,0];
(zero,[1,1]) -> [0,0];
(zero,[2,1]) -> [0,0];
(inc,[3,1]) -> [4,2];
(inc,[2]) -> [3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0490420000001 true true

(zero,[]) -> [];
(zero,[1,2,1]) -> [0,0,0];
(zero,[2,0]) -> [0,0];
(zero,[3]) -> [0];
(inc,[0,2,1]) -> [1,3,2];
(inc,[1,0]) -> [2,1];
(inc,[1,2]) -> [2,3];
(inc,[3,1]) -> [4,2];
(zero,[3,0,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.050031 true true

(zero,[2,0,1]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[2,2]) -> [3,3];
(inc,[2]) -> [3];
(inc,[1,3]) -> [2,4];
(zero,[2]) -> [0];
(inc,[3,3]) -> [4,4];
(zero,[3,1,0]) -> [0,0,0];
(inc,[2,3,3]) -> [3,4,4];

=================================
NOSOL

(zero,[1]) -> [0];
(inc,[0,1]) -> [1,2];
(zero,[2,2]) -> [0,0];
(zero,[]) -> [];
(inc,[3]) -> [4];
(zero,[0]) -> [0];
(inc,[2,0,2]) -> [3,1,3];
(inc,[]) -> [];
(zero,[2,3]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0447830000001 true true

(inc,[2,2,2]) -> [3,3,3];
(inc,[]) -> [];
(inc,[0]) -> [1];
(inc,[1]) -> [2];
(zero,[]) -> [];
(inc,[1,1,2]) -> [2,2,3];
(zero,[1,3,1]) -> [0,0,0];
(inc,[3,1]) -> [4,2];
(inc,[1,1]) -> [2,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.047826 true true

(zero,[1]) -> [0];
(zero,[1,2,1]) -> [0,0,0];
(zero,[1,2]) -> [0,0];
(zero,[]) -> [];
(inc,[]) -> [];
(inc,[3,2]) -> [4,3];
(inc,[2]) -> [3];
(zero,[3,0]) -> [0,0];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0442430000001 true true

(zero,[0]) -> [0];
(zero,[2]) -> [0];
(zero,[3,0]) -> [0,0];
(inc,[2,2]) -> [3,3];
(zero,[3]) -> [0];
(zero,[2,2]) -> [0,0];
(zero,[1,1,2]) -> [0,0,0];
(inc,[1,1,2]) -> [2,2,3];
(inc,[3]) -> [4];

=================================
NOSOL

(inc,[]) -> [];
(zero,[3]) -> [0];
(zero,[1,2,0]) -> [0,0,0];
(inc,[3]) -> [4];
(zero,[]) -> [];
(zero,[2,0,2]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[2,1]) -> [3,2];
(inc,[0,1]) -> [1,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0444199999999 true true

(inc,[0]) -> [1];
(inc,[]) -> [];
(zero,[2,2,3]) -> [0,0,0];
(zero,[]) -> [];
(zero,[2,1]) -> [0,0];
(zero,[1,3,3]) -> [0,0,0];
(zero,[3,2,1]) -> [0,0,0];
(inc,[0,1,2]) -> [1,2,3];
(zero,[3]) -> [0];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0680199999999 true true

(inc,[3]) -> [4];
(inc,[]) -> [];
(zero,[1,1,1]) -> [0,0,0];
(zero,[]) -> [];
(zero,[3,0,1]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[1,2,2]) -> [0,0,0];
(inc,[1]) -> [2];
(inc,[0]) -> [1];
(inc,[3,2,2]) -> [4,3,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0503679999999 true true

(inc,[0,1,2]) -> [1,2,3];
(zero,[2,2]) -> [0,0];
(zero,[0]) -> [0];
(zero,[3,3]) -> [0,0];
(inc,[2,0,3]) -> [3,1,4];
(inc,[0,1]) -> [1,2];
(inc,[1]) -> [2];
(inc,[3,1]) -> [4,2];
(zero,[2,1]) -> [0,0];
(inc,[3]) -> [4];

=================================
NOSOL

(inc,[]) -> [];
(inc,[1]) -> [2];
(zero,[1]) -> [0];
(zero,[0,1,0]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[2]) -> [0];
(inc,[0,1]) -> [1,2];
(zero,[1,2]) -> [0,0];
(zero,[]) -> [];
(inc,[3]) -> [4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048957 true true

(zero,[0,0]) -> [0,0];
(zero,[2,3,2]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[3,3]) -> [0,0];
(zero,[]) -> [];
(inc,[1]) -> [2];
(inc,[]) -> [];
(zero,[1]) -> [0];
(zero,[0,0,1]) -> [0,0,0];
(zero,[0,3,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0519919999999 true true

(inc,[1]) -> [2];
(zero,[]) -> [];
(zero,[2]) -> [0];
(zero,[0,3,0]) -> [0,0,0];
(inc,[3,2]) -> [4,3];
(zero,[0,0]) -> [0,0];
(zero,[0]) -> [0];
(inc,[2,2,1]) -> [3,3,2];
(inc,[]) -> [];
(zero,[2,2,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0456750000001 true true

(inc,[1,2,3]) -> [2,3,4];
(zero,[]) -> [];
(zero,[1,3]) -> [0,0];
(zero,[0,1]) -> [0,0];
(zero,[1]) -> [0];
(zero,[3,1,3]) -> [0,0,0];
(inc,[2,1]) -> [3,2];
(inc,[]) -> [];
(zero,[0,3,2]) -> [0,0,0];
(inc,[2,1,2]) -> [3,2,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0454319999999 true true

(zero,[]) -> [];
(inc,[2]) -> [3];
(zero,[2]) -> [0];
(inc,[3,1]) -> [4,2];
(inc,[1,3]) -> [2,4];
(inc,[2,0]) -> [3,1];
(inc,[2,1]) -> [3,2];
(inc,[]) -> [];
(zero,[1]) -> [0];
(zero,[2,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048875 true true

(inc,[2]) -> [3];
(zero,[2,3]) -> [0,0];
(inc,[]) -> [];
(inc,[0]) -> [1];
(zero,[1,3]) -> [0,0];
(zero,[1]) -> [0];
(inc,[2,2]) -> [3,3];
(zero,[]) -> [];
(zero,[0,0,3]) -> [0,0,0];
(zero,[0,0,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046145 true true

(inc,[1]) -> [2];
(zero,[0]) -> [0];
(zero,[0,3,3]) -> [0,0,0];
(zero,[]) -> [];
(zero,[0,1]) -> [0,0];
(inc,[2,2]) -> [3,3];
(zero,[2,3,2]) -> [0,0,0];
(zero,[2]) -> [0];
(zero,[1,1]) -> [0,0];
(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0466060000001 true true

(inc,[2,2]) -> [3,3];
(zero,[3,1,3]) -> [0,0,0];
(inc,[1]) -> [2];
(inc,[3]) -> [4];
(zero,[3]) -> [0];
(inc,[0]) -> [1];
(zero,[2,1,1]) -> [0,0,0];
(zero,[3,2,3]) -> [0,0,0];
(zero,[]) -> [];
(inc,[1,0]) -> [2,1];
(zero,[0,3]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.083488 true true

(inc,[1]) -> [2];
(inc,[2,0,1]) -> [3,1,2];
(zero,[0]) -> [0];
(inc,[2,2]) -> [3,3];
(inc,[]) -> [];
(inc,[3,3,3]) -> [4,4,4];
(zero,[2,0,1]) -> [0,0,0];
(zero,[0,0]) -> [0,0];
(inc,[0,0]) -> [1,1];
(inc,[2,0,3]) -> [3,1,4];
(inc,[1,0,1]) -> [2,1,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.051608 true true

(inc,[3,2,2]) -> [4,3,3];
(zero,[1]) -> [0];
(zero,[3,2]) -> [0,0];
(inc,[1,1]) -> [2,2];
(inc,[]) -> [];
(inc,[3]) -> [4];
(zero,[0,3]) -> [0,0];
(inc,[3,0,3]) -> [4,1,4];
(zero,[1,1,0]) -> [0,0,0];
(inc,[1]) -> [2];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.051845 true true

(zero,[0]) -> [0];
(inc,[2,0]) -> [3,1];
(inc,[0,2,2]) -> [1,3,3];
(inc,[2,1,1]) -> [3,2,2];
(zero,[0,3,3]) -> [0,0,0];
(zero,[]) -> [];
(inc,[]) -> [];
(inc,[1]) -> [2];
(inc,[1,2]) -> [2,3];
(inc,[0,0,3]) -> [1,1,4];
(inc,[0,3,0]) -> [1,4,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0678230000001 true true

(zero,[]) -> [];
(inc,[1,3,2]) -> [2,4,3];
(inc,[3]) -> [4];
(zero,[1,3,3]) -> [0,0,0];
(zero,[2,0,2]) -> [0,0,0];
(inc,[0]) -> [1];
(inc,[]) -> [];
(inc,[1,1]) -> [2,2];
(inc,[2,0]) -> [3,1];
(inc,[2]) -> [3];
(inc,[3,1]) -> [4,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046824 true true

(inc,[3]) -> [4];
(inc,[1,2,3]) -> [2,3,4];
(zero,[2,2,3]) -> [0,0,0];
(inc,[]) -> [];
(inc,[0]) -> [1];
(zero,[0,0]) -> [0,0];
(inc,[1,1,1]) -> [2,2,2];
(inc,[0,0]) -> [1,1];
(inc,[3,0]) -> [4,1];
(zero,[0,3]) -> [0,0];
(inc,[1,3]) -> [2,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.05099 true true

(inc,[3,1,3]) -> [4,2,4];
(zero,[]) -> [];
(inc,[0]) -> [1];
(zero,[0,3,1]) -> [0,0,0];
(inc,[1,2]) -> [2,3];
(inc,[2]) -> [3];
(zero,[0]) -> [0];
(inc,[2,2]) -> [3,3];
(inc,[3]) -> [4];
(inc,[]) -> [];
(zero,[2,2,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0614599999999 true true

(zero,[3]) -> [0];
(zero,[1]) -> [0];
(zero,[1,2,2]) -> [0,0,0];
(zero,[0,2]) -> [0,0];
(inc,[2,0]) -> [3,1];
(inc,[2,2]) -> [3,3];
(inc,[1,3,1]) -> [2,4,2];
(zero,[1,1,0]) -> [0,0,0];
(inc,[1,2]) -> [2,3];
(inc,[1,0,2]) -> [2,1,3];
(inc,[2]) -> [3];

=================================
NOSOL

(zero,[0,1]) -> [0,0];
(inc,[]) -> [];
(zero,[1]) -> [0];
(zero,[]) -> [];
(inc,[0]) -> [1];
(zero,[0]) -> [0];
(inc,[3,1]) -> [4,2];
(inc,[1,3]) -> [2,4];
(inc,[3,2]) -> [4,3];
(zero,[3,0,3]) -> [0,0,0];
(zero,[1,1,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0468559999999 true true

(inc,[2,2,2]) -> [3,3,3];
(inc,[0]) -> [1];
(inc,[]) -> [];
(inc,[0,1]) -> [1,2];
(inc,[0,3,0]) -> [1,4,1];
(inc,[1]) -> [2];
(zero,[1,1,3]) -> [0,0,0];
(inc,[0,2]) -> [1,3];
(zero,[]) -> [];
(inc,[3,3,0]) -> [4,4,1];
(zero,[0]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0474650000001 true true

(zero,[1]) -> [0];
(inc,[3,0,0]) -> [4,1,1];
(zero,[3,0]) -> [0,0];
(zero,[0]) -> [0];
(inc,[1,1,2]) -> [2,2,3];
(zero,[2,3]) -> [0,0];
(inc,[3]) -> [4];
(inc,[1,1]) -> [2,2];
(inc,[]) -> [];
(inc,[2,0,2]) -> [3,1,3];
(inc,[0,1,0]) -> [1,2,1];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.053817 true true

(zero,[]) -> [];
(inc,[1]) -> [2];
(zero,[2]) -> [0];
(inc,[2,2,1]) -> [3,3,2];
(inc,[0]) -> [1];
(inc,[2,1,0]) -> [3,2,1];
(inc,[3,0,1]) -> [4,1,2];
(inc,[3,0]) -> [4,1];
(zero,[0]) -> [0];
(zero,[0,2]) -> [0,0];
(zero,[3,3,1]) -> [0,0,0];
(zero,[1,3,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.049947 true true

(inc,[2,1]) -> [3,2];
(zero,[]) -> [];
(inc,[0]) -> [1];
(zero,[0,3]) -> [0,0];
(inc,[0,2]) -> [1,3];
(zero,[3,0]) -> [0,0];
(zero,[0,3,3]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[2,1]) -> [0,0];
(zero,[0]) -> [0];
(inc,[2,3,1]) -> [3,4,2];
(inc,[3,3,3]) -> [4,4,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0532350000001 true true

(inc,[1,0]) -> [2,1];
(zero,[0]) -> [0];
(inc,[]) -> [];
(inc,[0,1,0]) -> [1,2,1];
(inc,[0,1]) -> [1,2];
(inc,[1,2,3]) -> [2,3,4];
(inc,[3,3]) -> [4,4];
(zero,[]) -> [];
(zero,[0,2,0]) -> [0,0,0];
(inc,[2]) -> [3];
(inc,[2,2,0]) -> [3,3,1];
(zero,[1,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.052109 true true

(inc,[2]) -> [3];
(inc,[3]) -> [4];
(zero,[3]) -> [0];
(zero,[2,0,0]) -> [0,0,0];
(zero,[]) -> [];
(zero,[1,1,3]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[0]) -> [0];
(inc,[0]) -> [1];
(inc,[1]) -> [2];
(zero,[1,2,1]) -> [0,0,0];
(zero,[2,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048927 true true

(zero,[0]) -> [0];
(zero,[]) -> [];
(inc,[]) -> [];
(inc,[3]) -> [4];
(inc,[3,2,1]) -> [4,3,2];
(zero,[0,0]) -> [0,0];
(zero,[3,0,2]) -> [0,0,0];
(inc,[1,0]) -> [2,1];
(zero,[0,3]) -> [0,0];
(inc,[3,3]) -> [4,4];
(zero,[3,0]) -> [0,0];
(zero,[2,2,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0480889999999 true true

(inc,[0]) -> [1];
(zero,[2,3,3]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[1,0]) -> [0,0];
(inc,[2,0]) -> [3,1];
(zero,[2,3,1]) -> [0,0,0];
(zero,[]) -> [];
(zero,[2,0,3]) -> [0,0,0];
(zero,[2,2,1]) -> [0,0,0];
(inc,[2]) -> [3];
(inc,[]) -> [];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0515949999999 true true

(inc,[]) -> [];
(inc,[3]) -> [4];
(zero,[2]) -> [0];
(zero,[]) -> [];
(zero,[0]) -> [0];
(zero,[1,3,3]) -> [0,0,0];
(zero,[1,1,1]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[0,3,2]) -> [1,4,3];
(inc,[2]) -> [3];
(zero,[1,3,2]) -> [0,0,0];
(inc,[2,0]) -> [3,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.052725 true true

(inc,[0,3,1]) -> [1,4,2];
(zero,[3,0]) -> [0,0];
(inc,[]) -> [];
(zero,[0]) -> [0];
(zero,[3,0,1]) -> [0,0,0];
(zero,[0,1,3]) -> [0,0,0];
(zero,[]) -> [];
(inc,[3,1,2]) -> [4,2,3];
(inc,[2,1,3]) -> [3,2,4];
(inc,[3,3,0]) -> [4,4,1];
(zero,[1,2]) -> [0,0];
(zero,[3]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.052559 true true

(inc,[]) -> [];
(zero,[2,3,2]) -> [0,0,0];
(zero,[3,2,3]) -> [0,0,0];
(inc,[2]) -> [3];
(inc,[0,0,2]) -> [1,1,3];
(inc,[2,0,3]) -> [3,1,4];
(zero,[1,2,2]) -> [0,0,0];
(zero,[1,1]) -> [0,0];
(zero,[0,1]) -> [0,0];
(zero,[1]) -> [0];
(inc,[1,2]) -> [2,3];
(inc,[3]) -> [4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0496889999999 true true

(inc,[]) -> [];
(inc,[3,3,0]) -> [4,4,1];
(zero,[]) -> [];
(zero,[1,3,3]) -> [0,0,0];
(zero,[3,1,2]) -> [0,0,0];
(zero,[3,0,3]) -> [0,0,0];
(inc,[3,1,3]) -> [4,2,4];
(inc,[3,3]) -> [4,4];
(zero,[0,1,3]) -> [0,0,0];
(zero,[0,3,0]) -> [0,0,0];
(inc,[1,2]) -> [2,3];
(inc,[1,0]) -> [2,1];
(inc,[3,2,0]) -> [4,3,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.068033 true true

(inc,[1,1,2]) -> [2,2,3];
(zero,[]) -> [];
(zero,[2,2,3]) -> [0,0,0];
(zero,[2,3]) -> [0,0];
(zero,[2]) -> [0];
(inc,[2,2]) -> [3,3];
(inc,[1,1]) -> [2,2];
(zero,[3]) -> [0];
(inc,[3]) -> [4];
(zero,[1]) -> [0];
(inc,[1,2]) -> [2,3];
(inc,[]) -> [];
(zero,[0,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0495129999999 true true

(inc,[2,3,0]) -> [3,4,1];
(zero,[2,2]) -> [0,0];
(inc,[3,2]) -> [4,3];
(zero,[3,1,3]) -> [0,0,0];
(zero,[0,0,1]) -> [0,0,0];
(inc,[0,2,2]) -> [1,3,3];
(zero,[0]) -> [0];
(zero,[0,0]) -> [0,0];
(inc,[0]) -> [1];
(inc,[]) -> [];
(zero,[2]) -> [0];
(zero,[]) -> [];
(zero,[1,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.049524 true true

(zero,[1,2,2]) -> [0,0,0];
(inc,[]) -> [];
(zero,[2,3,0]) -> [0,0,0];
(zero,[2,3]) -> [0,0];
(zero,[]) -> [];
(inc,[3,1,2]) -> [4,2,3];
(inc,[2]) -> [3];
(inc,[1,0,3]) -> [2,1,4];
(zero,[0,2]) -> [0,0];
(inc,[0,1,1]) -> [1,2,2];
(zero,[2,1,0]) -> [0,0,0];
(inc,[2,1,0]) -> [3,2,1];
(zero,[3,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0525660000001 true true

(inc,[2,1]) -> [3,2];
(zero,[]) -> [];
(zero,[1]) -> [0];
(zero,[2]) -> [0];
(inc,[1,0,3]) -> [2,1,4];
(zero,[0,2,1]) -> [0,0,0];
(zero,[3,2]) -> [0,0];
(inc,[0,1,2]) -> [1,2,3];
(zero,[0,0]) -> [0,0];
(inc,[3,3,3]) -> [4,4,4];
(inc,[0,0,1]) -> [1,1,2];
(zero,[2,0]) -> [0,0];
(zero,[0]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.050665 true true

(inc,[1,3,1]) -> [2,4,2];
(inc,[1]) -> [2];
(zero,[3]) -> [0];
(zero,[1,1]) -> [0,0];
(zero,[3,1]) -> [0,0];
(inc,[0,1,0]) -> [1,2,1];
(inc,[0,3]) -> [1,4];
(zero,[3,3,1]) -> [0,0,0];
(inc,[3,2]) -> [4,3];
(zero,[0,2,1]) -> [0,0,0];
(zero,[]) -> [];
(zero,[1,2,0]) -> [0,0,0];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0504920000001 true true

(zero,[]) -> [];
(inc,[1]) -> [2];
(inc,[1,1,3]) -> [2,2,4];
(inc,[0,1]) -> [1,2];
(inc,[2]) -> [3];
(zero,[1]) -> [0];
(inc,[]) -> [];
(inc,[0,1,3]) -> [1,2,4];
(inc,[3]) -> [4];
(zero,[2]) -> [0];
(zero,[3,1]) -> [0,0];
(inc,[1,0,0]) -> [2,1,1];
(inc,[2,0]) -> [3,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0608830000001 true true

(inc,[]) -> [];
(inc,[3,0]) -> [4,1];
(zero,[0]) -> [0];
(zero,[]) -> [];
(zero,[0,3]) -> [0,0];
(inc,[2,2,2]) -> [3,3,3];
(inc,[1,0]) -> [2,1];
(inc,[3]) -> [4];
(zero,[1]) -> [0];
(zero,[2,1,2]) -> [0,0,0];
(inc,[3,2,3]) -> [4,3,4];
(inc,[0]) -> [1];
(inc,[3,1]) -> [4,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.055151 true true

(zero,[3,2,3]) -> [0,0,0];
(inc,[]) -> [];
(zero,[2]) -> [0];
(zero,[]) -> [];
(zero,[1]) -> [0];
(zero,[3,1,2]) -> [0,0,0];
(inc,[1,0]) -> [2,1];
(zero,[2,0,1]) -> [0,0,0];
(inc,[0]) -> [1];
(inc,[2]) -> [3];
(zero,[3,2,0]) -> [0,0,0];
(zero,[3,1,1]) -> [0,0,0];
(inc,[1,0,0]) -> [2,1,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0507480000001 true true

(inc,[3,3,3]) -> [4,4,4];
(inc,[2]) -> [3];
(inc,[3,3]) -> [4,4];
(zero,[]) -> [];
(zero,[0]) -> [0];
(zero,[0,2]) -> [0,0];
(zero,[1,3,1]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[2,3,2]) -> [0,0,0];
(inc,[1]) -> [2];
(inc,[]) -> [];
(zero,[0,2,0]) -> [0,0,0];
(inc,[0,2]) -> [1,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0499789999999 true true

(zero,[2,1]) -> [0,0];
(zero,[1,0]) -> [0,0];
(zero,[0,3]) -> [0,0];
(inc,[3,3,3]) -> [4,4,4];
(zero,[0,3,0]) -> [0,0,0];
(inc,[]) -> [];
(inc,[1]) -> [2];
(inc,[1,0]) -> [2,1];
(inc,[2,3]) -> [3,4];
(zero,[]) -> [];
(zero,[1]) -> [0];
(inc,[1,1,0]) -> [2,2,1];
(zero,[3]) -> [0];
(inc,[2,2,2]) -> [3,3,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0526520000001 true true

(zero,[1,0,2]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[0,1]) -> [0,0];
(inc,[]) -> [];
(inc,[0,1]) -> [1,2];
(zero,[3,1,0]) -> [0,0,0];
(inc,[0,2,1]) -> [1,3,2];
(inc,[1,3,2]) -> [2,4,3];
(inc,[3]) -> [4];
(zero,[3,3,0]) -> [0,0,0];
(zero,[2,2,3]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[2,0]) -> [3,1];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.051721 true true

(zero,[]) -> [];
(zero,[3]) -> [0];
(inc,[]) -> [];
(zero,[0,2,3]) -> [0,0,0];
(zero,[0,0]) -> [0,0];
(inc,[3,3]) -> [4,4];
(inc,[2,1]) -> [3,2];
(inc,[2]) -> [3];
(inc,[3,1]) -> [4,2];
(inc,[2,2,2]) -> [3,3,3];
(zero,[1,3,2]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[1,1]) -> [0,0];
(inc,[3]) -> [4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.054617 true true

(zero,[1,2,3]) -> [0,0,0];
(inc,[]) -> [];
(zero,[3,0]) -> [0,0];
(zero,[3,1,2]) -> [0,0,0];
(inc,[2,2,0]) -> [3,3,1];
(inc,[0]) -> [1];
(inc,[1,1,0]) -> [2,2,1];
(zero,[1,3,3]) -> [0,0,0];
(inc,[3]) -> [4];
(zero,[0,0,3]) -> [0,0,0];
(zero,[2]) -> [0];
(zero,[]) -> [];
(inc,[0,1,0]) -> [1,2,1];
(inc,[3,2]) -> [4,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0511429999999 true true

(inc,[]) -> [];
(inc,[3,3,3]) -> [4,4,4];
(inc,[3,3]) -> [4,4];
(inc,[3,3,0]) -> [4,4,1];
(zero,[1,2]) -> [0,0];
(inc,[0,0,1]) -> [1,1,2];
(zero,[3]) -> [0];
(zero,[1,0,2]) -> [0,0,0];
(zero,[]) -> [];
(inc,[0,1]) -> [1,2];
(inc,[2,2]) -> [3,3];
(inc,[3]) -> [4];
(zero,[0,2,0]) -> [0,0,0];
(zero,[2,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0502329999999 true true

(zero,[]) -> [];
(inc,[3,1]) -> [4,2];
(zero,[3,2,3]) -> [0,0,0];
(inc,[3,1,0]) -> [4,2,1];
(inc,[0]) -> [1];
(zero,[1,1]) -> [0,0];
(zero,[0]) -> [0];
(inc,[0,1,0]) -> [1,2,1];
(inc,[2,0,3]) -> [3,1,4];
(inc,[2,3,3]) -> [3,4,4];
(inc,[0,3,0]) -> [1,4,1];
(inc,[2,0,1]) -> [3,1,2];
(inc,[]) -> [];
(inc,[1,3]) -> [2,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.053032 true true

(zero,[]) -> [];
(inc,[2,0,2]) -> [3,1,3];
(inc,[0,0]) -> [1,1];
(zero,[3]) -> [0];
(inc,[]) -> [];
(zero,[3,2,1]) -> [0,0,0];
(inc,[2]) -> [3];
(zero,[2,0,2]) -> [0,0,0];
(zero,[0,0,2]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[2,0]) -> [3,1];
(inc,[1,1,0]) -> [2,2,1];
(inc,[0]) -> [1];
(zero,[3,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0543600000001 true true

(inc,[1,0]) -> [2,1];
(zero,[0,0,2]) -> [0,0,0];
(inc,[1,3]) -> [2,4];
(inc,[1]) -> [2];
(zero,[1]) -> [0];
(inc,[2,2,2]) -> [3,3,3];
(zero,[0]) -> [0];
(zero,[1,3,0]) -> [0,0,0];
(zero,[0,1,1]) -> [0,0,0];
(inc,[]) -> [];
(zero,[2]) -> [0];
(zero,[]) -> [];
(inc,[3,0]) -> [4,1];
(zero,[2,3]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0551660000001 true true

(zero,[]) -> [];
(inc,[0,2]) -> [1,3];
(inc,[3,3,1]) -> [4,4,2];
(zero,[1,0,2]) -> [0,0,0];
(inc,[3,0]) -> [4,1];
(inc,[0,2,3]) -> [1,3,4];
(inc,[0,2,2]) -> [1,3,3];
(zero,[0,0]) -> [0,0];
(inc,[3,1]) -> [4,2];
(zero,[3,2]) -> [0,0];
(inc,[3,2,1]) -> [4,3,2];
(inc,[]) -> [];
(zero,[2]) -> [0];
(inc,[3,1,1]) -> [4,2,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.055764 true true

(inc,[2,2]) -> [3,3];
(zero,[2,3,0]) -> [0,0,0];
(zero,[0,2]) -> [0,0];
(zero,[2,2]) -> [0,0];
(inc,[3,3]) -> [4,4];
(inc,[1,0]) -> [2,1];
(inc,[2]) -> [3];
(zero,[]) -> [];
(inc,[0,0,2]) -> [1,1,3];
(inc,[0,1]) -> [1,2];
(zero,[1]) -> [0];
(inc,[3,2]) -> [4,3];
(zero,[1,1]) -> [0,0];
(inc,[3,2,1]) -> [4,3,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.053007 true true

(zero,[3]) -> [0];
(zero,[2,0]) -> [0,0];
(zero,[3,3]) -> [0,0];
(zero,[2,1]) -> [0,0];
(inc,[]) -> [];
(zero,[]) -> [];
(inc,[2,1,0]) -> [3,2,1];
(inc,[2,2]) -> [3,3];
(zero,[3,2]) -> [0,0];
(zero,[3,3,3]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[1,3,2]) -> [0,0,0];
(inc,[2]) -> [3];
(inc,[3,3]) -> [4,4];
(inc,[2,0,3]) -> [3,1,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0669370000001 true true

(zero,[1]) -> [0];
(zero,[]) -> [];
(zero,[2,2,3]) -> [0,0,0];
(inc,[3,1]) -> [4,2];
(inc,[0,2]) -> [1,3];
(inc,[3,2]) -> [4,3];
(inc,[2]) -> [3];
(inc,[]) -> [];
(inc,[3]) -> [4];
(inc,[0,3,0]) -> [1,4,1];
(inc,[1,3,0]) -> [2,4,1];
(inc,[1]) -> [2];
(zero,[2]) -> [0];
(inc,[0,0,0]) -> [1,1,1];
(zero,[2,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0581870000001 true true

(zero,[2,1]) -> [0,0];
(inc,[3]) -> [4];
(inc,[]) -> [];
(inc,[0]) -> [1];
(inc,[1,0]) -> [2,1];
(zero,[]) -> [];
(inc,[0,1,0]) -> [1,2,1];
(inc,[0,1,1]) -> [1,2,2];
(inc,[3,1]) -> [4,2];
(inc,[3,3]) -> [4,4];
(zero,[3,3,1]) -> [0,0,0];
(zero,[3,0]) -> [0,0];
(zero,[1]) -> [0];
(inc,[1,2]) -> [2,3];
(zero,[0,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.052508 true true

(inc,[]) -> [];
(inc,[2]) -> [3];
(inc,[1,0,1]) -> [2,1,2];
(zero,[2]) -> [0];
(inc,[1,1]) -> [2,2];
(inc,[3,0,3]) -> [4,1,4];
(zero,[0,1]) -> [0,0];
(inc,[0]) -> [1];
(zero,[]) -> [];
(zero,[1]) -> [0];
(inc,[0,3,1]) -> [1,4,2];
(zero,[1,0,1]) -> [0,0,0];
(inc,[1,0]) -> [2,1];
(inc,[2,2]) -> [3,3];
(zero,[0]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0540980000001 true true

(inc,[3]) -> [4];
(inc,[]) -> [];
(zero,[0]) -> [0];
(inc,[0,0]) -> [1,1];
(zero,[2,1,2]) -> [0,0,0];
(inc,[2,1,3]) -> [3,2,4];
(zero,[2]) -> [0];
(zero,[0,1,0]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[1,2]) -> [0,0];
(zero,[3,2,0]) -> [0,0,0];
(zero,[2,3,2]) -> [0,0,0];
(zero,[]) -> [];
(inc,[3,3]) -> [4,4];
(zero,[3,2,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.05503 true true

(zero,[1,3]) -> [0,0];
(inc,[0,2,0]) -> [1,3,1];
(zero,[]) -> [];
(inc,[]) -> [];
(zero,[2,3,2]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[0]) -> [0];
(inc,[3]) -> [4];
(zero,[1,1]) -> [0,0];
(inc,[2,3,3]) -> [3,4,4];
(inc,[0,1,3]) -> [1,2,4];
(inc,[1]) -> [2];
(zero,[3,1,3]) -> [0,0,0];
(zero,[1,1,1]) -> [0,0,0];
(zero,[0,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.052899 true true

(zero,[]) -> [];
(inc,[2,3,1]) -> [3,4,2];
(zero,[3]) -> [0];
(inc,[3,2,1]) -> [4,3,2];
(inc,[0,0]) -> [1,1];
(inc,[]) -> [];
(inc,[2,0]) -> [3,1];
(inc,[1,0,2]) -> [2,1,3];
(zero,[1]) -> [0];
(zero,[2]) -> [0];
(inc,[0,2,3]) -> [1,3,4];
(zero,[2,0]) -> [0,0];
(inc,[2]) -> [3];
(zero,[3,0]) -> [0,0];
(zero,[0,1,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.05305 true true

(zero,[3,1,0]) -> [0,0,0];
(inc,[]) -> [];
(zero,[2,2,0]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[1,0]) -> [2,1];
(zero,[1,0,3]) -> [0,0,0];
(inc,[1]) -> [2];
(inc,[1,2,0]) -> [2,3,1];
(zero,[3,3]) -> [0,0];
(inc,[0]) -> [1];
(inc,[3,1]) -> [4,2];
(zero,[]) -> [];
(inc,[3]) -> [4];
(inc,[1,2]) -> [2,3];
(zero,[2,2,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0561070000001 true true

(zero,[]) -> [];
(inc,[3,2,3]) -> [4,3,4];
(zero,[3,3,0]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[0,1,3]) -> [1,2,4];
(inc,[3,0]) -> [4,1];
(zero,[2]) -> [0];
(inc,[3,1,2]) -> [4,2,3];
(zero,[3,2,3]) -> [0,0,0];
(inc,[3]) -> [4];
(inc,[]) -> [];
(inc,[0,3]) -> [1,4];
(zero,[2,3,1]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[1,2,1]) -> [2,3,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.052351 true true

(inc,[0,1,1]) -> [1,2,2];
(zero,[1]) -> [0];
(inc,[2]) -> [3];
(zero,[2]) -> [0];
(inc,[1,1]) -> [2,2];
(zero,[3,3,2]) -> [0,0,0];
(inc,[]) -> [];
(zero,[3,2]) -> [0,0];
(zero,[0,1]) -> [0,0];
(zero,[2,1]) -> [0,0];
(zero,[3]) -> [0];
(inc,[2,2,2]) -> [3,3,3];
(inc,[1,2]) -> [2,3];
(inc,[1,2,0]) -> [2,3,1];
(zero,[3,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.059176 true true

(inc,[2,3]) -> [3,4];
(zero,[3,1,1]) -> [0,0,0];
(zero,[2,1,0]) -> [0,0,0];
(inc,[3,3,1]) -> [4,4,2];
(zero,[1]) -> [0];
(inc,[]) -> [];
(inc,[2]) -> [3];
(zero,[]) -> [];
(zero,[2]) -> [0];
(inc,[2,1]) -> [3,2];
(zero,[1,3,3]) -> [0,0,0];
(inc,[0]) -> [1];
(zero,[2,1]) -> [0,0];
(inc,[3,2]) -> [4,3];
(inc,[1,2,0]) -> [2,3,1];
(zero,[1,0,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0532599999999 true true

(inc,[0]) -> [1];
(zero,[0,2,3]) -> [0,0,0];
(inc,[1,3,0]) -> [2,4,1];
(inc,[3,2]) -> [4,3];
(inc,[3,0]) -> [4,1];
(inc,[]) -> [];
(inc,[3,3,0]) -> [4,4,1];
(zero,[1]) -> [0];
(zero,[3]) -> [0];
(zero,[1,0]) -> [0,0];
(zero,[3,3,0]) -> [0,0,0];
(zero,[0,3,1]) -> [0,0,0];
(zero,[1,0,3]) -> [0,0,0];
(zero,[1,1]) -> [0,0];
(inc,[0,1,1]) -> [1,2,2];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0578250000001 true true

(inc,[]) -> [];
(zero,[0,0,2]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[3,0,3]) -> [4,1,4];
(zero,[]) -> [];
(inc,[2,3]) -> [3,4];
(zero,[2,0,2]) -> [0,0,0];
(zero,[3,3]) -> [0,0];
(inc,[1]) -> [2];
(inc,[1,0]) -> [2,1];
(inc,[3,1,2]) -> [4,2,3];
(zero,[2,3]) -> [0,0];
(inc,[2,2]) -> [3,3];
(inc,[3]) -> [4];
(inc,[0,2,2]) -> [1,3,3];
(inc,[2]) -> [3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0538959999999 true true

(inc,[]) -> [];
(zero,[]) -> [];
(inc,[1,0,0]) -> [2,1,1];
(inc,[2,0]) -> [3,1];
(zero,[0,2]) -> [0,0];
(inc,[2,3]) -> [3,4];
(inc,[1,3]) -> [2,4];
(inc,[2]) -> [3];
(zero,[0,1]) -> [0,0];
(zero,[3,1,1]) -> [0,0,0];
(zero,[0,0]) -> [0,0];
(inc,[2,2,1]) -> [3,3,2];
(zero,[3,0,2]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[0,0]) -> [1,1];
(inc,[3,2]) -> [4,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0578829999999 true true

(zero,[]) -> [];
(inc,[1]) -> [2];
(inc,[2]) -> [3];
(inc,[3]) -> [4];
(zero,[2]) -> [0];
(zero,[2,3]) -> [0,0];
(zero,[2,0]) -> [0,0];
(inc,[2,3]) -> [3,4];
(zero,[1,2,3]) -> [0,0,0];
(inc,[3,0,1]) -> [4,1,2];
(inc,[]) -> [];
(zero,[2,0,2]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(zero,[1,1]) -> [0,0];
(inc,[3,3]) -> [4,4];
(zero,[2,3,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0534990000001 true true

(zero,[3,2]) -> [0,0];
(inc,[0,0,0]) -> [1,1,1];
(inc,[1,2,0]) -> [2,3,1];
(inc,[0,3,0]) -> [1,4,1];
(zero,[0,3,3]) -> [0,0,0];
(zero,[]) -> [];
(zero,[3]) -> [0];
(zero,[3,0,3]) -> [0,0,0];
(inc,[0,0,2]) -> [1,1,3];
(zero,[0,3]) -> [0,0];
(inc,[3]) -> [4];
(inc,[]) -> [];
(inc,[1]) -> [2];
(inc,[2]) -> [3];
(inc,[3,2,3]) -> [4,3,4];
(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0575590000001 true true

(zero,[0]) -> [0];
(zero,[3]) -> [0];
(inc,[1,1,2]) -> [2,2,3];
(zero,[1,2]) -> [0,0];
(inc,[3]) -> [4];
(inc,[1,3,3]) -> [2,4,4];
(inc,[2]) -> [3];
(inc,[0]) -> [1];
(inc,[]) -> [];
(inc,[2,1]) -> [3,2];
(inc,[1]) -> [2];
(zero,[1,1]) -> [0,0];
(zero,[]) -> [];
(zero,[2,2,0]) -> [0,0,0];
(inc,[1,3]) -> [2,4];
(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0570990000001 true true

(inc,[]) -> [];
(inc,[0,0,2]) -> [1,1,3];
(zero,[0,3]) -> [0,0];
(inc,[0]) -> [1];
(zero,[2,3,2]) -> [0,0,0];
(zero,[1,1,0]) -> [0,0,0];
(zero,[3,0,3]) -> [0,0,0];
(inc,[2,3]) -> [3,4];
(inc,[0,0]) -> [1,1];
(inc,[1,0]) -> [2,1];
(inc,[3,3,0]) -> [4,4,1];
(inc,[0,3]) -> [1,4];
(inc,[3]) -> [4];
(inc,[2,1]) -> [3,2];
(inc,[1]) -> [2];
(inc,[3,1]) -> [4,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.055795 true true

(inc,[2,0]) -> [3,1];
(zero,[0]) -> [0];
(inc,[1,0]) -> [2,1];
(zero,[0,0]) -> [0,0];
(zero,[0,0,3]) -> [0,0,0];
(zero,[0,1]) -> [0,0];
(inc,[2,3,1]) -> [3,4,2];
(zero,[3]) -> [0];
(inc,[0,1]) -> [1,2];
(inc,[2]) -> [3];
(zero,[]) -> [];
(zero,[1,3]) -> [0,0];
(inc,[]) -> [];
(inc,[1,1]) -> [2,2];
(zero,[2,0]) -> [0,0];
(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0671789999999 true true

(zero,[]) -> [];
(zero,[0,0]) -> [0,0];
(inc,[2]) -> [3];
(inc,[0,0]) -> [1,1];
(inc,[1,2]) -> [2,3];
(zero,[1]) -> [0];
(zero,[0]) -> [0];
(inc,[3]) -> [4];
(inc,[0,3,1]) -> [1,4,2];
(inc,[]) -> [];
(inc,[2,0]) -> [3,1];
(inc,[2,1,2]) -> [3,2,3];
(zero,[2,0]) -> [0,0];
(inc,[2,3,2]) -> [3,4,3];
(zero,[1,2]) -> [0,0];
(inc,[0,3]) -> [1,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.056278 true true

(inc,[0]) -> [1];
(inc,[2,3]) -> [3,4];
(zero,[]) -> [];
(zero,[1,3,0]) -> [0,0,0];
(inc,[2,3,0]) -> [3,4,1];
(zero,[2,0]) -> [0,0];
(inc,[]) -> [];
(inc,[2,3,1]) -> [3,4,2];
(inc,[3,1]) -> [4,2];
(inc,[3,1,1]) -> [4,2,2];
(inc,[0,3,0]) -> [1,4,1];
(inc,[2,2,0]) -> [3,3,1];
(zero,[0,0,0]) -> [0,0,0];
(inc,[1]) -> [2];
(zero,[0]) -> [0];
(inc,[3,3,2]) -> [4,4,3];
(inc,[1,3]) -> [2,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.054402 true true

(inc,[1,2,3]) -> [2,3,4];
(inc,[3,3]) -> [4,4];
(zero,[1,1,0]) -> [0,0,0];
(inc,[1,0,3]) -> [2,1,4];
(zero,[1,0]) -> [0,0];
(zero,[]) -> [];
(zero,[1,0,3]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(zero,[3]) -> [0];
(inc,[3,1,1]) -> [4,2,2];
(zero,[0,2,1]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[2]) -> [0];
(zero,[3,3]) -> [0,0];
(inc,[]) -> [];
(zero,[0,0,1]) -> [0,0,0];
(inc,[2,3,3]) -> [3,4,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0557550000001 true true

(inc,[3]) -> [4];
(zero,[1]) -> [0];
(inc,[1,0]) -> [2,1];
(inc,[]) -> [];
(zero,[1,0,2]) -> [0,0,0];
(zero,[2,0]) -> [0,0];
(inc,[2,0,2]) -> [3,1,3];
(zero,[0,1]) -> [0,0];
(zero,[0]) -> [0];
(zero,[1,2,0]) -> [0,0,0];
(inc,[2,1,0]) -> [3,2,1];
(zero,[3]) -> [0];
(zero,[0,3]) -> [0,0];
(inc,[0,1,0]) -> [1,2,1];
(zero,[]) -> [];
(zero,[2,2]) -> [0,0];
(inc,[2]) -> [3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.055717 true true

(zero,[0,3]) -> [0,0];
(zero,[1]) -> [0];
(inc,[0]) -> [1];
(inc,[3]) -> [4];
(inc,[3,0]) -> [4,1];
(zero,[3]) -> [0];
(zero,[]) -> [];
(zero,[0,0,3]) -> [0,0,0];
(inc,[]) -> [];
(zero,[2,1,3]) -> [0,0,0];
(inc,[2,2]) -> [3,3];
(inc,[2]) -> [3];
(zero,[2,1]) -> [0,0];
(zero,[1,2,1]) -> [0,0,0];
(zero,[2,0]) -> [0,0];
(inc,[2,0]) -> [3,1];
(zero,[3,1,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.054138 true true

(inc,[1,2,1]) -> [2,3,2];
(inc,[]) -> [];
(inc,[0]) -> [1];
(inc,[1,2,2]) -> [2,3,3];
(inc,[3]) -> [4];
(zero,[1]) -> [0];
(zero,[1,1,1]) -> [0,0,0];
(inc,[1,1,2]) -> [2,2,3];
(zero,[2]) -> [0];
(zero,[2,1]) -> [0,0];
(zero,[0,0,3]) -> [0,0,0];
(zero,[]) -> [];
(zero,[0]) -> [0];
(inc,[1]) -> [2];
(zero,[0,0]) -> [0,0];
(inc,[2]) -> [3];
(zero,[3,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0530650000001 true true

(inc,[]) -> [];
(inc,[0,0,0]) -> [1,1,1];
(zero,[]) -> [];
(zero,[2]) -> [0];
(inc,[3,0,0]) -> [4,1,1];
(inc,[3,2,1]) -> [4,3,2];
(inc,[1,2]) -> [2,3];
(inc,[2,2,2]) -> [3,3,3];
(zero,[2,2]) -> [0,0];
(zero,[3,0,2]) -> [0,0,0];
(zero,[2,3,2]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[1,0,2]) -> [2,1,3];
(inc,[3,2,3]) -> [4,3,4];
(inc,[2,2]) -> [3,3];
(inc,[1]) -> [2];
(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.054883 true true

(inc,[3,0]) -> [4,1];
(inc,[2]) -> [3];
(zero,[2,1]) -> [0,0];
(zero,[]) -> [];
(zero,[1,0,0]) -> [0,0,0];
(zero,[2,3,1]) -> [0,0,0];
(inc,[0]) -> [1];
(inc,[1]) -> [2];
(inc,[1,3,2]) -> [2,4,3];
(zero,[1,2,1]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[0]) -> [0];
(inc,[]) -> [];
(inc,[3,3,3]) -> [4,4,4];
(zero,[0,1]) -> [0,0];
(zero,[0,2]) -> [0,0];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0551579999999 true true

(inc,[]) -> [];
(zero,[]) -> [];
(zero,[1,2,2]) -> [0,0,0];
(zero,[2,0]) -> [0,0];
(inc,[1]) -> [2];
(zero,[1]) -> [0];
(zero,[1,3,2]) -> [0,0,0];
(zero,[3,1]) -> [0,0];
(zero,[2,0,2]) -> [0,0,0];
(inc,[2,1,1]) -> [3,2,2];
(zero,[1,1,0]) -> [0,0,0];
(inc,[0,2]) -> [1,3];
(zero,[0]) -> [0];
(inc,[3,3,3]) -> [4,4,4];
(inc,[2]) -> [3];
(inc,[3,0,2]) -> [4,1,3];
(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.058354 true true

(zero,[1,1,1]) -> [0,0,0];
(zero,[]) -> [];
(inc,[3]) -> [4];
(inc,[3,0,1]) -> [4,1,2];
(inc,[2,2,3]) -> [3,3,4];
(inc,[1,2,0]) -> [2,3,1];
(inc,[0]) -> [1];
(zero,[0]) -> [0];
(zero,[1,2]) -> [0,0];
(inc,[2,0]) -> [3,1];
(zero,[3]) -> [0];
(inc,[]) -> [];
(inc,[0,0,0]) -> [1,1,1];
(inc,[1,0]) -> [2,1];
(inc,[0,0,3]) -> [1,1,4];
(inc,[1]) -> [2];
(zero,[1,0,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0585920000001 true true

(zero,[0]) -> [0];
(inc,[2,2,1]) -> [3,3,2];
(inc,[0]) -> [1];
(inc,[3,0]) -> [4,1];
(inc,[0,1]) -> [1,2];
(inc,[1,0]) -> [2,1];
(inc,[0,0,3]) -> [1,1,4];
(zero,[2,1]) -> [0,0];
(inc,[0,0,1]) -> [1,1,2];
(zero,[3]) -> [0];
(zero,[]) -> [];
(inc,[0,3]) -> [1,4];
(inc,[3]) -> [4];
(inc,[]) -> [];
(inc,[2,0,2]) -> [3,1,3];
(zero,[0,3]) -> [0,0];
(inc,[0,3,1]) -> [1,4,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.055104 true true

(zero,[0,2,3]) -> [0,0,0];
(inc,[2,3,0]) -> [3,4,1];
(inc,[0,1]) -> [1,2];
(inc,[1,1,3]) -> [2,2,4];
(inc,[3,1]) -> [4,2];
(zero,[]) -> [];
(inc,[2,1]) -> [3,2];
(inc,[3]) -> [4];
(zero,[0]) -> [0];
(inc,[0]) -> [1];
(inc,[]) -> [];
(zero,[1,0]) -> [0,0];
(zero,[2]) -> [0];
(inc,[3,3,1]) -> [4,4,2];
(zero,[3,1]) -> [0,0];
(zero,[3]) -> [0];
(inc,[3,2]) -> [4,3];
(inc,[3,0]) -> [4,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0561130000001 true true

(zero,[]) -> [];
(zero,[2,3]) -> [0,0];
(inc,[3,3,0]) -> [4,4,1];
(zero,[2]) -> [0];
(zero,[0,0,0]) -> [0,0,0];
(inc,[1,3,1]) -> [2,4,2];
(zero,[2,0,3]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[1,2,0]) -> [0,0,0];
(inc,[1,0,0]) -> [2,1,1];
(zero,[1]) -> [0];
(zero,[2,3,0]) -> [0,0,0];
(zero,[1,3,0]) -> [0,0,0];
(zero,[2,1]) -> [0,0];
(inc,[2,3]) -> [3,4];
(inc,[0,3]) -> [1,4];
(inc,[2,2,0]) -> [3,3,1];
(zero,[3,3]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0590219999999 true true

(zero,[]) -> [];
(inc,[3]) -> [4];
(inc,[3,3]) -> [4,4];
(zero,[2,0]) -> [0,0];
(zero,[3,2]) -> [0,0];
(inc,[]) -> [];
(zero,[3,1,0]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[2,2]) -> [0,0];
(zero,[0,2]) -> [0,0];
(inc,[0,0,0]) -> [1,1,1];
(inc,[1,3]) -> [2,4];
(zero,[0]) -> [0];
(inc,[1,3,2]) -> [2,4,3];
(inc,[2]) -> [3];
(inc,[1,1,3]) -> [2,2,4];
(inc,[1,0,1]) -> [2,1,2];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0600690000001 true true

(inc,[3,2]) -> [4,3];
(inc,[0]) -> [1];
(zero,[1,0,2]) -> [0,0,0];
(zero,[0,2]) -> [0,0];
(zero,[0]) -> [0];
(inc,[2,0]) -> [3,1];
(inc,[3]) -> [4];
(zero,[2,2,0]) -> [0,0,0];
(inc,[]) -> [];
(inc,[2]) -> [3];
(zero,[3]) -> [0];
(inc,[2,1]) -> [3,2];
(inc,[0,3]) -> [1,4];
(zero,[1,2]) -> [0,0];
(zero,[3,1]) -> [0,0];
(inc,[2,0,0]) -> [3,1,1];
(inc,[0,0,2]) -> [1,1,3];
(zero,[0,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0617460000001 true true

(zero,[0,2]) -> [0,0];
(inc,[0,3,3]) -> [1,4,4];
(inc,[3,0,0]) -> [4,1,1];
(zero,[]) -> [];
(inc,[1,1,2]) -> [2,2,3];
(zero,[2,1,0]) -> [0,0,0];
(inc,[3,0]) -> [4,1];
(inc,[]) -> [];
(inc,[2]) -> [3];
(zero,[1,3,1]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[0,3]) -> [0,0];
(zero,[0]) -> [0];
(inc,[0,1]) -> [1,2];
(zero,[2]) -> [0];
(zero,[2,2,1]) -> [0,0,0];
(zero,[1,1]) -> [0,0];
(zero,[2,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.061177 true true

(zero,[0,2]) -> [0,0];
(inc,[0]) -> [1];
(zero,[]) -> [];
(zero,[1,3]) -> [0,0];
(inc,[]) -> [];
(inc,[2,0,3]) -> [3,1,4];
(inc,[1]) -> [2];
(inc,[0,3,2]) -> [1,4,3];
(inc,[2,3,0]) -> [3,4,1];
(zero,[3,2]) -> [0,0];
(zero,[1,2]) -> [0,0];
(zero,[0]) -> [0];
(inc,[2]) -> [3];
(zero,[3,1,0]) -> [0,0,0];
(inc,[3]) -> [4];
(inc,[3,3]) -> [4,4];
(zero,[2,1,1]) -> [0,0,0];
(inc,[0,0]) -> [1,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0596210000001 true true

(inc,[]) -> [];
(zero,[]) -> [];
(inc,[3,0]) -> [4,1];
(zero,[3]) -> [0];
(zero,[1,2]) -> [0,0];
(zero,[3,1]) -> [0,0];
(zero,[2,0]) -> [0,0];
(inc,[1]) -> [2];
(zero,[0,2,0]) -> [0,0,0];
(zero,[2,1,1]) -> [0,0,0];
(zero,[3,1,3]) -> [0,0,0];
(inc,[2,2]) -> [3,3];
(zero,[1]) -> [0];
(inc,[0]) -> [1];
(zero,[3,3]) -> [0,0];
(zero,[2,2]) -> [0,0];
(zero,[1,1]) -> [0,0];
(zero,[3,1,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.055222 true true

(zero,[]) -> [];
(inc,[0]) -> [1];
(inc,[2,1]) -> [3,2];
(zero,[3,1]) -> [0,0];
(zero,[2,3]) -> [0,0];
(inc,[2,0]) -> [3,1];
(inc,[3,0]) -> [4,1];
(inc,[]) -> [];
(zero,[2,1,1]) -> [0,0,0];
(inc,[2,2,1]) -> [3,3,2];
(zero,[1,1]) -> [0,0];
(zero,[2,2,2]) -> [0,0,0];
(inc,[1,1]) -> [2,2];
(zero,[3]) -> [0];
(inc,[0,0]) -> [1,1];
(zero,[0,2,2]) -> [0,0,0];
(inc,[0,2,1]) -> [1,3,2];
(zero,[2,2,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.061078 true true

(zero,[]) -> [];
(zero,[3,1,3]) -> [0,0,0];
(inc,[]) -> [];
(inc,[3,2]) -> [4,3];
(zero,[3,2]) -> [0,0];
(zero,[2,0]) -> [0,0];
(inc,[3,1,1]) -> [4,2,2];
(zero,[2,1]) -> [0,0];
(zero,[3,3,0]) -> [0,0,0];
(zero,[0,2,2]) -> [0,0,0];
(zero,[2]) -> [0];
(inc,[1,0]) -> [2,1];
(inc,[2,0]) -> [3,1];
(zero,[0,2]) -> [0,0];
(zero,[3,1]) -> [0,0];
(zero,[3,2,2]) -> [0,0,0];
(zero,[1,1,3]) -> [0,0,0];
(inc,[0,2]) -> [1,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0789729999999 true true

(inc,[3,1,3]) -> [4,2,4];
(zero,[2]) -> [0];
(inc,[0]) -> [1];
(zero,[1,1]) -> [0,0];
(inc,[0,1,3]) -> [1,2,4];
(zero,[]) -> [];
(zero,[2,3,0]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(inc,[1]) -> [2];
(zero,[1,3,2]) -> [0,0,0];
(zero,[0,1,0]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[2,0,0]) -> [0,0,0];
(inc,[3,0]) -> [4,1];
(zero,[0]) -> [0];
(zero,[0,0,2]) -> [0,0,0];
(zero,[2,2,0]) -> [0,0,0];
(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.056247 true true

(inc,[3,3]) -> [4,4];
(zero,[0,3]) -> [0,0];
(inc,[1,1,0]) -> [2,2,1];
(inc,[]) -> [];
(inc,[1,3]) -> [2,4];
(zero,[2]) -> [0];
(zero,[3,1,2]) -> [0,0,0];
(zero,[]) -> [];
(inc,[0,1,1]) -> [1,2,2];
(inc,[2,2,2]) -> [3,3,3];
(inc,[1]) -> [2];
(inc,[0,0,3]) -> [1,1,4];
(inc,[0]) -> [1];
(inc,[0,1]) -> [1,2];
(inc,[0,0]) -> [1,1];
(zero,[1,0]) -> [0,0];
(inc,[2,2,3]) -> [3,3,4];
(zero,[2,3,0]) -> [0,0,0];
(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0620469999999 true true

(inc,[0,1,3]) -> [1,2,4];
(zero,[3]) -> [0];
(zero,[1,1]) -> [0,0];
(zero,[0,1]) -> [0,0];
(inc,[2,2]) -> [3,3];
(zero,[0,3]) -> [0,0];
(inc,[2,0]) -> [3,1];
(zero,[3,3]) -> [0,0];
(inc,[0,0]) -> [1,1];
(zero,[1]) -> [0];
(inc,[0,1,2]) -> [1,2,3];
(zero,[2,0,0]) -> [0,0,0];
(inc,[]) -> [];
(zero,[]) -> [];
(inc,[0]) -> [1];
(zero,[0,0,2]) -> [0,0,0];
(zero,[1,3,2]) -> [0,0,0];
(zero,[2]) -> [0];
(zero,[3,1,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0583340000001 true true

(inc,[]) -> [];
(inc,[1,0]) -> [2,1];
(zero,[]) -> [];
(inc,[0,1,0]) -> [1,2,1];
(zero,[0,1,2]) -> [0,0,0];
(inc,[2,3,3]) -> [3,4,4];
(zero,[1]) -> [0];
(inc,[1,2]) -> [2,3];
(zero,[0]) -> [0];
(zero,[2,1]) -> [0,0];
(zero,[3]) -> [0];
(inc,[2,0]) -> [3,1];
(inc,[3,3]) -> [4,4];
(zero,[0,1,1]) -> [0,0,0];
(zero,[0,0,0]) -> [0,0,0];
(inc,[3,1]) -> [4,2];
(zero,[3,0]) -> [0,0];
(inc,[0,2]) -> [1,3];
(inc,[0,1,2]) -> [1,2,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0615 true true

(zero,[]) -> [];
(inc,[3]) -> [4];
(inc,[0,3,0]) -> [1,4,1];
(inc,[0,3]) -> [1,4];
(zero,[3,0]) -> [0,0];
(inc,[]) -> [];
(inc,[2,2]) -> [3,3];
(inc,[1,2]) -> [2,3];
(zero,[1,2]) -> [0,0];
(inc,[3,1]) -> [4,2];
(inc,[3,3,1]) -> [4,4,2];
(zero,[0,3]) -> [0,0];
(inc,[2,1]) -> [3,2];
(inc,[2]) -> [3];
(inc,[0,1,3]) -> [1,2,4];
(zero,[0,2,2]) -> [0,0,0];
(inc,[3,3]) -> [4,4];
(zero,[3]) -> [0];
(zero,[0,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.056677 true true

(inc,[2]) -> [3];
(inc,[3,1]) -> [4,2];
(inc,[2,2]) -> [3,3];
(inc,[0]) -> [1];
(zero,[3,0]) -> [0,0];
(inc,[1,2,0]) -> [2,3,1];
(inc,[1,3,2]) -> [2,4,3];
(inc,[]) -> [];
(inc,[3]) -> [4];
(inc,[2,3,1]) -> [3,4,2];
(zero,[]) -> [];
(inc,[3,3]) -> [4,4];
(zero,[1,0,0]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(zero,[3,3]) -> [0,0];
(zero,[1,1,2]) -> [0,0,0];
(inc,[0,2]) -> [1,3];
(zero,[2]) -> [0];
(inc,[1]) -> [2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.057648 true true

(inc,[2,3,3]) -> [3,4,4];
(inc,[2,3]) -> [3,4];
(inc,[3]) -> [4];
(zero,[0,1]) -> [0,0];
(inc,[]) -> [];
(zero,[1,0,3]) -> [0,0,0];
(inc,[1,0,3]) -> [2,1,4];
(zero,[1,1,1]) -> [0,0,0];
(zero,[2,1]) -> [0,0];
(zero,[0,2]) -> [0,0];
(zero,[]) -> [];
(inc,[0,3]) -> [1,4];
(zero,[3,1]) -> [0,0];
(inc,[3,0,1]) -> [4,1,2];
(zero,[1,2,0]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[0,2,1]) -> [1,3,2];
(inc,[1]) -> [2];
(zero,[2,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0586740000001 true true

(zero,[3]) -> [0];
(zero,[]) -> [];
(inc,[2,1]) -> [3,2];
(zero,[3,0]) -> [0,0];
(inc,[]) -> [];
(zero,[1,2,0]) -> [0,0,0];
(zero,[1,0]) -> [0,0];
(inc,[0,3,1]) -> [1,4,2];
(zero,[0]) -> [0];
(zero,[1]) -> [0];
(zero,[0,1,2]) -> [0,0,0];
(inc,[2]) -> [3];
(inc,[0,1]) -> [1,2];
(zero,[3,2]) -> [0,0];
(inc,[3,0,1]) -> [4,1,2];
(inc,[1,1]) -> [2,2];
(inc,[3]) -> [4];
(zero,[2]) -> [0];
(inc,[1]) -> [2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.058252 true true

(inc,[]) -> [];
(zero,[3]) -> [0];
(zero,[0,2]) -> [0,0];
(zero,[1,2,2]) -> [0,0,0];
(zero,[2,0,1]) -> [0,0,0];
(inc,[0,3,3]) -> [1,4,4];
(zero,[1]) -> [0];
(zero,[]) -> [];
(zero,[3,3]) -> [0,0];
(zero,[0,3,2]) -> [0,0,0];
(zero,[1,1,3]) -> [0,0,0];
(inc,[2,3,1]) -> [3,4,2];
(inc,[0,1,3]) -> [1,2,4];
(zero,[1,3]) -> [0,0];
(inc,[1]) -> [2];
(zero,[2,1]) -> [0,0];
(inc,[2]) -> [3];
(zero,[1,1]) -> [0,0];
(zero,[1,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0616889999999 true true

(inc,[]) -> [];
(zero,[]) -> [];
(inc,[2]) -> [3];
(zero,[3,3]) -> [0,0];
(inc,[3,2]) -> [4,3];
(inc,[0,0]) -> [1,1];
(inc,[3,3]) -> [4,4];
(zero,[0]) -> [0];
(zero,[0,1,3]) -> [0,0,0];
(inc,[2,3]) -> [3,4];
(inc,[0,1]) -> [1,2];
(zero,[0,2]) -> [0,0];
(inc,[3]) -> [4];
(zero,[0,3]) -> [0,0];
(zero,[2]) -> [0];
(zero,[2,2,3]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[3,1]) -> [4,2];
(zero,[2,1,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0615789999999 true true

(zero,[3,2]) -> [0,0];
(zero,[]) -> [];
(zero,[0,1,1]) -> [0,0,0];
(zero,[0,3,2]) -> [0,0,0];
(inc,[0,2,0]) -> [1,3,1];
(zero,[1,1]) -> [0,0];
(zero,[3]) -> [0];
(inc,[0,3,2]) -> [1,4,3];
(inc,[1,2]) -> [2,3];
(inc,[0]) -> [1];
(zero,[1]) -> [0];
(inc,[1,0,1]) -> [2,1,2];
(zero,[1,2,3]) -> [0,0,0];
(inc,[1,0,3]) -> [2,1,4];
(inc,[3]) -> [4];
(zero,[2]) -> [0];
(inc,[]) -> [];
(inc,[3,2]) -> [4,3];
(zero,[1,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.06152 true true

(inc,[1]) -> [2];
(zero,[2,0,3]) -> [0,0,0];
(inc,[]) -> [];
(zero,[]) -> [];
(zero,[3,1,1]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[1,3,0]) -> [2,4,1];
(zero,[2,0]) -> [0,0];
(inc,[0]) -> [1];
(zero,[2,2]) -> [0,0];
(inc,[2]) -> [3];
(inc,[3]) -> [4];
(inc,[1,3]) -> [2,4];
(zero,[0,0]) -> [0,0];
(zero,[3]) -> [0];
(zero,[0,0,2]) -> [0,0,0];
(zero,[1,1,0]) -> [0,0,0];
(inc,[0,1]) -> [1,2];
(zero,[1,1]) -> [0,0];
(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.058227 true true

(zero,[3,0]) -> [0,0];
(zero,[0,2]) -> [0,0];
(inc,[1]) -> [2];
(inc,[]) -> [];
(zero,[0,3,2]) -> [0,0,0];
(zero,[1,1]) -> [0,0];
(zero,[3]) -> [0];
(zero,[2,0,2]) -> [0,0,0];
(zero,[]) -> [];
(zero,[1,0]) -> [0,0];
(inc,[3,1]) -> [4,2];
(zero,[1]) -> [0];
(zero,[3,1]) -> [0,0];
(inc,[3,0]) -> [4,1];
(inc,[3]) -> [4];
(zero,[1,2,0]) -> [0,0,0];
(inc,[1,2,3]) -> [2,3,4];
(inc,[1,0]) -> [2,1];
(zero,[0,3,3]) -> [0,0,0];
(inc,[1,2,2]) -> [2,3,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0626360000001 true true

(zero,[]) -> [];
(zero,[2,1]) -> [0,0];
(inc,[]) -> [];
(zero,[1,0,0]) -> [0,0,0];
(inc,[0,2]) -> [1,3];
(zero,[3,3]) -> [0,0];
(zero,[1,0,1]) -> [0,0,0];
(inc,[3]) -> [4];
(zero,[1,2,0]) -> [0,0,0];
(zero,[1,0,2]) -> [0,0,0];
(zero,[2,2]) -> [0,0];
(inc,[0]) -> [1];
(inc,[2,3,3]) -> [3,4,4];
(zero,[3,2,0]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[2,0,3]) -> [0,0,0];
(inc,[2]) -> [3];
(zero,[3]) -> [0];
(inc,[1,3,0]) -> [2,4,1];
(inc,[0,0,3]) -> [1,1,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.05987 true true

(inc,[2,2,3]) -> [3,3,4];
(inc,[0,0,0]) -> [1,1,1];
(inc,[1]) -> [2];
(zero,[0,1]) -> [0,0];
(zero,[1]) -> [0];
(zero,[]) -> [];
(inc,[]) -> [];
(zero,[0,2]) -> [0,0];
(zero,[1,0]) -> [0,0];
(inc,[3]) -> [4];
(zero,[0]) -> [0];
(inc,[3,3]) -> [4,4];
(inc,[2,0,1]) -> [3,1,2];
(inc,[0]) -> [1];
(inc,[1,1,0]) -> [2,2,1];
(zero,[1,1,1]) -> [0,0,0];
(inc,[1,0,1]) -> [2,1,2];
(inc,[0,1]) -> [1,2];
(zero,[3]) -> [0];
(zero,[0,3,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.058896 true true

(inc,[]) -> [];
(zero,[1]) -> [0];
(zero,[3,2]) -> [0,0];
(zero,[0]) -> [0];
(zero,[2,0,2]) -> [0,0,0];
(zero,[0,2]) -> [0,0];
(zero,[]) -> [];
(zero,[2]) -> [0];
(zero,[3,2,2]) -> [0,0,0];
(zero,[0,0]) -> [0,0];
(zero,[2,1]) -> [0,0];
(zero,[3,0]) -> [0,0];
(inc,[3,0]) -> [4,1];
(inc,[0,0,0]) -> [1,1,1];
(zero,[1,2]) -> [0,0];
(inc,[3,1,1]) -> [4,2,2];
(inc,[3,0,0]) -> [4,1,1];
(inc,[1]) -> [2];
(zero,[3,3]) -> [0,0];
(inc,[1,3]) -> [2,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0588720000001 true true

(inc,[1]) -> [2];
(zero,[1,3,2]) -> [0,0,0];
(inc,[]) -> [];
(zero,[]) -> [];
(zero,[0,3]) -> [0,0];
(inc,[2,1]) -> [3,2];
(inc,[1,1,1]) -> [2,2,2];
(zero,[3,0,0]) -> [0,0,0];
(zero,[0,1,1]) -> [0,0,0];
(zero,[3,0]) -> [0,0];
(zero,[0,2,2]) -> [0,0,0];
(zero,[2,3,0]) -> [0,0,0];
(zero,[0,0]) -> [0,0];
(inc,[0]) -> [1];
(zero,[3]) -> [0];
(inc,[3,3]) -> [4,4];
(inc,[3]) -> [4];
(zero,[2,2]) -> [0,0];
(zero,[0,2]) -> [0,0];
(zero,[2,0,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0621799999999 true true

(inc,[0,2,0]) -> [1,3,1];
(zero,[3,0]) -> [0,0];
(inc,[2,3,2]) -> [3,4,3];
(inc,[]) -> [];
(zero,[3]) -> [0];
(inc,[3]) -> [4];
(zero,[0,0]) -> [0,0];
(inc,[0]) -> [1];
(inc,[1,0]) -> [2,1];
(zero,[0]) -> [0];
(zero,[]) -> [];
(inc,[1,2,2]) -> [2,3,3];
(inc,[2,1]) -> [3,2];
(inc,[3,0]) -> [4,1];
(inc,[1]) -> [2];
(zero,[1,3,2]) -> [0,0,0];
(inc,[1,2]) -> [2,3];
(inc,[3,3,1]) -> [4,4,2];
(inc,[1,1,1]) -> [2,2,2];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.063206 true true

(inc,[1]) -> [2];
(inc,[1,1]) -> [2,2];
(inc,[2]) -> [3];
(inc,[3,2]) -> [4,3];
(zero,[3]) -> [0];
(zero,[2,0]) -> [0,0];
(inc,[0,3,1]) -> [1,4,2];
(inc,[]) -> [];
(zero,[2,3,0]) -> [0,0,0];
(zero,[]) -> [];
(zero,[0]) -> [0];
(inc,[2,2]) -> [3,3];
(inc,[0,3,3]) -> [1,4,4];
(zero,[0,3,0]) -> [0,0,0];
(zero,[1,1,0]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[3,3]) -> [4,4];
(inc,[0,1,1]) -> [1,2,2];
(inc,[2,3,3]) -> [3,4,4];
(inc,[2,3,2]) -> [3,4,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0584329999999 true true

(zero,[1]) -> [0];
(zero,[3,3,1]) -> [0,0,0];
(inc,[1,2]) -> [2,3];
(inc,[3,0]) -> [4,1];
(zero,[]) -> [];
(zero,[0]) -> [0];
(zero,[1,2,0]) -> [0,0,0];
(zero,[2]) -> [0];
(inc,[2]) -> [3];
(inc,[0]) -> [1];
(zero,[3,0]) -> [0,0];
(zero,[1,2]) -> [0,0];
(inc,[0,3]) -> [1,4];
(inc,[]) -> [];
(zero,[1,3,0]) -> [0,0,0];
(inc,[1]) -> [2];
(inc,[2,2]) -> [3,3];
(inc,[3,2]) -> [4,3];
(inc,[1,1]) -> [2,2];
(zero,[0,3,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0619770000001 true true

(zero,[3]) -> [0];
(inc,[0,0]) -> [1,1];
(inc,[1]) -> [2];
(zero,[2,3,1]) -> [0,0,0];
(zero,[3,0]) -> [0,0];
(zero,[2,2,1]) -> [0,0,0];
(zero,[3,3,0]) -> [0,0,0];
(inc,[3,1,0]) -> [4,2,1];
(zero,[1]) -> [0];
(inc,[3,0,1]) -> [4,1,2];
(zero,[]) -> [];
(inc,[0,1]) -> [1,2];
(zero,[0]) -> [0];
(zero,[1,2]) -> [0,0];
(inc,[]) -> [];
(zero,[2]) -> [0];
(zero,[1,0,3]) -> [0,0,0];
(zero,[0,3]) -> [0,0];
(inc,[0,2]) -> [1,3];
(zero,[0,0,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.058313 true true

