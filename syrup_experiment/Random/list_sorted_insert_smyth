([3,1],1) -> [1,3,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.007429 false false

([],0) -> [0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00622399999997 false false

([],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0064339999999 false false

([1,3],0) -> [0,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (0, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00714500000004 false false

([0],0) -> [0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00605799999994 false false

([3,3],0) -> [0,3,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (0, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0072090000001 false false

([2,0,1],0) -> [0,2,0,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (0, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013547 false false

([3,2,0],3) -> [3,2,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00682099999995 false false

([1],0) -> [0,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (0, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0101279999999 false false

([],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00589100000002 false false

([0,0],1) -> [0,0,1];
([1,2],0) -> [0,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case n of
    Z y1 -> 
      Cons (0, xs)

    S y1 -> 
      [0, 0, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0208190000001 false false

([0],2) -> [0,2];
([3],2) -> [2,3];

=================================
NOSOL

([],2) -> [2];
([2],3) -> [2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      [2, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons
        ( 2
        , list_sorted_insert (#2.2 y1) n
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0164990000001 false false

([1,1],0) -> [0,1,1];
([],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00609699999995 false false

([2,3,3],2) -> [2,3,3];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons (2, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0172769999999 false false

([],0) -> [0];
([0,1],1) -> [0,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0148300000001 false false

([2,1,1],2) -> [2,1,1];
([2,2,0],1) -> [1,2,2,0];

=================================
NOSOL

([2,2],3) -> [2,2,3];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons
        ( 2
        , list_sorted_insert (#2.2 y1) n
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons
        ( 2
        , list_sorted_insert (#2.2 y1) n
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0225250000001 false false

([],1) -> [1];
([3,2,2],3) -> [3,2,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.030231 false false

([1],3) -> [1,3];
([0],1) -> [0,1];

=================================
NOSOL

([1,1,3],1) -> [1,1,3];
([1,1],0) -> [0,1,1];
([],1) -> [1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [1]

    Cons y1 -> 
      case n of
        Z y2 -> 
          [0, 1, #2.1 y1]

        S y2 -> 
          [1, 1, S (S n)] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.173324 false false

([2,2],1) -> [1,2,2];
([3,2,3],1) -> [1,3,2,3];
([3],0) -> [0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.005674 false false

([0],1) -> [0,1];
([],2) -> [2];
([1,3],0) -> [0,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (0, Cons (1, #2.2 y1))) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0165039999999 false false

([1,0],1) -> [1,0];
([],0) -> [0];
([1,2,3],3) -> [1,2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.02117 false false

([],0) -> [0];
([1,1,0],0) -> [0,1,1,0];
([1],3) -> [1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case n of
      Z y1 -> 
        (0, xs)

      S y1 -> 
        (1, [n])) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0142940000001 false false

([],1) -> [1];
([3,0],0) -> [0,3,0];
([],0) -> [0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00521099999992 false false

([],3) -> [3];
([2,1,3],0) -> [0,2,1,3];
([],1) -> [1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00604900000008 false false

([1,0,0],0) -> [0,1,0,0];
([1,0,0],1) -> [1,0,0];
([0,1],1) -> [0,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case n of
    Z y1 -> 
      Cons (0, xs)

    S y1 -> 
      xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00952099999995 false false

([2,3,1],3) -> [2,3,1];
([1,3,2],2) -> [1,2,3,2];
([],2) -> [2];

=================================
NOSOL

([1,3,2],0) -> [0,1,3,2];
([2],2) -> [2];
([],1) -> [1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case n of
    Z y1 -> 
      Cons (0, xs)

    S y1 -> 
      [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0163150000001 false false

([],2) -> [2];
([2,2],0) -> [0,2,2];
([2,2,0],3) -> [2,2,0,3];
([0,2],1) -> [0,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [2]

    Cons y1 -> 
      Cons
        ( case n of
            Z y2 -> 
              0

            S y2 -> 
              #2.1 y1
        , case #2.1 y1 of
            Z y2 -> 
              Cons (n, #2.2 y1)

            S y2 -> 
              list_sorted_insert (#2.2 y1) (S (#2.1 y1))
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [2]

    Cons y1 -> 
      Cons
        ( case n of
            Z y2 -> 
              0

            S y2 -> 
              #2.1 y1
        , case #2.1 y1 of
            Z y2 -> 
              Cons (n, #2.2 y1)

            S y2 -> 
              list_sorted_insert (#2.2 y1) (S (#2.1 y1))
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.268127 false false

([],3) -> [3];
([1,0,2],2) -> [1,0,2];
([],0) -> [0];
([0,1],2) -> [0,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [3]

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [0, 1, n]

        S y2 -> 
          [1, 0, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0600059999999 false false

([2,0],0) -> [0,2,0];
([0,0],3) -> [0,0,3];
([2,2,1],0) -> [0,2,2,1];
([1,2],2) -> [1,2];

=================================
NOSOL

([2,2,1],2) -> [2,2,1];
([1,0,1],1) -> [1,0,1];
([3],2) -> [2,3];
([1,0],2) -> [1,0,2];

=================================
NOSOL

([],2) -> [2];
([2],2) -> [2];
([0,2],3) -> [0,2,3];
([1,0],3) -> [1,0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [2]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          [#2.1 y1, #2.1 y2, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [2]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          Cons
            ( #2.1 y1
            , Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y1) n
                )
            ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0514680000001 false false

([0,1],0) -> [0,1];
([1,3],1) -> [1,3];
([0,2],3) -> [0,2,3];
([0,3,3],2) -> [0,2,3,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case n of
    Z y1 -> 
      [0, 1]

    S y1 -> 
      case y1 of
        Z y2 -> 
          [1, 3]

        S y2 -> 
          case compare y2 0 of
            LT y3 -> 
              ??

            GT y3 -> 
              [0, 2, S y1]

            EQ y3 -> 
              [0, 2, S (S y1), S n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.633217 false false

([1],0) -> [0,1];
([0,1,1],0) -> [0,1,1];
([3],0) -> [0,3];
([1],3) -> [1,3];

=================================
NOSOL

([1,0],3) -> [1,0,3];
([1],3) -> [1,3];
([0],3) -> [0,3];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        ( #2.1 y1
        , list_sorted_insert (#2.2 y1) n
        )) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        ( #2.1 y1
        , list_sorted_insert (#2.2 y1) n
        )) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0210850000001 false false

([2,3,0],2) -> [2,3,0];
([3],2) -> [2,3];
([2,2,2],3) -> [2,2,2,3];
([2,3,2],2) -> [2,3,2];

=================================
NOSOL

([0],1) -> [0,1];
([2,2],3) -> [2,2,3];
([1,2],0) -> [0,1,2];
([3],3) -> [3];

=================================
NOSOL

([3],1) -> [1,3];
([1],2) -> [1,2];
([1,3,0],2) -> [1,2,3,0];
([1,0,2],2) -> [1,0,2];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [2]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare n (#2.1 y1) of
              LT y3 -> 
                (1, [3])

              GT y3 -> 
                (1, [2])

              EQ y3 -> 
                ??)

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [1, 2, 3, 0]

            GT y3 -> 
              [1, 0, 2]

            EQ y3 -> 
              ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
26.830254 false false

([3,0],3) -> [3,0];
([3],3) -> [3];
([1,1,2],1) -> [1,1,2];
([],0) -> [0];
([1],0) -> [0,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case n of
    Z y1 -> 
      Cons (0, xs)

    S y1 -> 
      xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0165139999999 false false

([3],1) -> [1,3];
([],1) -> [1];
([2,3,2],2) -> [2,3,2];
([],0) -> [0];
([1,2],2) -> [1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [1]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [1, #2.1 y1]

        Cons y2 -> 
          Cons (#2.1 y1, Cons (#2.1 y2, #2.2 y2)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.422707 false false

([3,3,3],1) -> [1,3,3,3];
([3,2],1) -> [1,3,2];
([],0) -> [0];
([3,1],3) -> [3,1];
([3],0) -> [0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          ??

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.76822 false false

([2,2,1],1) -> [1,2,2,1];
([2,1,2],3) -> [2,1,2,3];
([2,0,3],2) -> [2,0,3];
([],1) -> [1];
([1,0,3],0) -> [0,1,0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [1]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          [2, 1, #2.1 y1, n]

        EQ y2 -> 
          [2, 0, S n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.758989 false false

([2],2) -> [2];
([],1) -> [1];
([],2) -> [2];
([],0) -> [0];
([2,0],1) -> [1,2,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [S y2]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          Cons (1, Cons (#2.1 y1, #2.2 y1)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [S y2]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          Cons
            ( 1
            , Cons
                ( #2.1 y1
                , list_sorted_insert (#2.2 y2) (#2.1 y2)
                )
            ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.048074 false false

([],3) -> [3];
([0,0,1],2) -> [0,0,1,2];
([],0) -> [0];
([],1) -> [1];
([2],0) -> [0,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [S y2]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0, 2]

        Cons y2 -> 
          [0, 0, 1, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0693779999999 false false

([],1) -> [1];
([],0) -> [0];
([],2) -> [2];
([2,2,1],3) -> [2,2,1,3];
([0,3],1) -> [0,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [S y2]

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [0, 1, S (S n)]

        S y2 -> 
          [2, 2, y2, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.093934 false false

([],0) -> [0];
([0,2],2) -> [0,2];
([2,0],1) -> [1,2,0];
([1,1,3],3) -> [1,1,3];
([2],3) -> [2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (1, Cons (S n, #2.2 y1))

        GT y2 -> 
          case compare n (S (#2.1 y1)) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              [2, n]

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons
            ( 1
            , Cons
                ( S n
                , list_sorted_insert (#2.2 y1) (#2.1 y1)
                )
            )

        GT y2 -> 
          case compare n (S (#2.1 y1)) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              [2, n]

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.636017 false false

([1],1) -> [1];
([],2) -> [2];
([2],0) -> [0,2];
([],0) -> [0];
([1,1,2],0) -> [0,1,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    ( n
    , case n of
        Z y1 -> 
          xs

        S y1 -> 
          []
    ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0154199999999 false false

([3,1],3) -> [3,1];
([3,1,0],1) -> [1,3,1,0];
([0,1,0],1) -> [0,1,0];
([],0) -> [0];
([],3) -> [3];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (1, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          [0, 1, 0]

        EQ y2 -> 
          [3, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.328122 false false

([3,0],0) -> [0,3,0];
([],1) -> [1];
([],3) -> [3];
([],2) -> [2];
([3,3],1) -> [1,3,3];
([0],0) -> [0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          Cons (n, Cons (#2.1 y1, #2.2 y1)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          Cons
            ( n
            , Cons
                ( #2.1 y1
                , list_sorted_insert (#2.2 y2) (#2.1 y2)
                )
            ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.060626 false false

([],2) -> [2];
([1,0],0) -> [0,1,0];
([2,0],3) -> [2,0,3];
([],1) -> [1];
([1,3,3],1) -> [1,3,3];
([3,3],1) -> [1,3,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        ( S
            (case n of
              Z y2 -> 
                2

              S y2 -> 
                y2)
        , Nil
            (case compare n 0 of
              LT y2 -> 
                ()

              GT y2 -> 
                ()

              EQ y2 -> 
                ())
        )

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) (#2.1 y1)
            )

        EQ y2 -> 
          [1, S (S n), S (S n)] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        ( S
            (case n of
              Z y2 -> 
                2

              S y2 -> 
                y2)
        , Nil
            (case compare n 0 of
              LT y2 -> 
                ()

              GT y2 -> 
                ()

              EQ y2 -> 
                ())
        )

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) (#2.1 y1)
            )

        EQ y2 -> 
          [1, S (S n), S (S n)] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.642751 false false

([],1) -> [1];
([2,0,3],3) -> [2,0,3];
([2],0) -> [0,2];
([],0) -> [0];
([2],1) -> [1,2];
([3],0) -> [0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [1]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [n, #2.1 y1]

        Cons y2 -> 
          Cons (2, Cons (0, #2.2 y2)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0625849999999 false false

([0,3,1],0) -> [0,3,1];
([3,3],2) -> [2,3,3];
([1,2,1],3) -> [1,2,1,3];
([1,1],0) -> [0,1,1];
([2,0],2) -> [2,0];
([],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [3]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, Cons (S n, #2.2 y1))

        GT y2 -> 
          [1, S (#2.1 y1), #2.1 y1, n]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [3]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons
            ( n
            , Cons
                ( S n
                , list_sorted_insert (#2.2 y1) (#2.1 y1)
                )
            )

        GT y2 -> 
          [1, 2, 1, n]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.860436 false false

([],1) -> [1];
([3,2],3) -> [3,2];
([3,2],0) -> [0,3,2];
([1],3) -> [1,3];
([0,3],2) -> [0,2,3];
([2,1],3) -> [2,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.219242 true true

([2],2) -> [2];
([3,2,1],3) -> [3,2,1];
([3,0,2],2) -> [2,3,0,2];
([0],3) -> [0,3];
([0,2,3],0) -> [0,2,3];
([1],3) -> [1,3];

=================================
NOSOL

([1],0) -> [0,1];
([],2) -> [2];
([1,2],3) -> [1,2,3];
([1,3],3) -> [1,3];
([3,0],3) -> [3,0];
([1,3],2) -> [1,2,3];

=================================
None
([],1) -> [1];
([],2) -> [2];
([1,0,2],3) -> [1,0,2,3];
([3,0,3],0) -> [0,3,0,3];
([2],3) -> [2,3];
([2,1,3],3) -> [2,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case compare n (Z y1) of
          LT y2 -> 
            ??

          GT y2 -> 
            (n, [])

          EQ y2 -> 
            (0, [3, 0, 3]))

    Cons y1 -> 
      case compare n (S (#2.1 y1)) of
        LT y2 -> 
          list_sorted_insert (#2.2 y1) n

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons
            ( 2
            , list_sorted_insert (#2.2 y1) n
            ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case compare n (Z y1) of
          LT y2 -> 
            ??

          GT y2 -> 
            (n, [])

          EQ y2 -> 
            (0, [3, 0, 3]))

    Cons y1 -> 
      case compare n (S (#2.1 y1)) of
        LT y2 -> 
          list_sorted_insert (#2.2 y1) n

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons
            ( 2
            , list_sorted_insert (#2.2 y1) n
            ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.480696 false false

([1],3) -> [1,3];
([1],0) -> [0,1];
([0],2) -> [0,2];
([1],1) -> [1];
([2],2) -> [2];
([3,0,0],2) -> [2,3,0,0];

=================================
NOSOL

([3,3],1) -> [1,3,3];
([1,3],1) -> [1,3];
([1,2,3],2) -> [1,2,3];
([2,0],0) -> [0,2,0];
([0,3],1) -> [0,1,3];
([],1) -> [1];
([],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          [#2.1 y1, n, 3]

        EQ y2 -> 
          Cons (1, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.402706 false false

([],3) -> [3];
([],2) -> [2];
([1,0],3) -> [1,0,3];
([3,2,0],1) -> [1,3,2,0];
([1,2],0) -> [0,1,2];
([],1) -> [1];
([2,3],3) -> [2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case compare n (Z y1) of
          LT y2 -> 
            ??

          GT y2 -> 
            (n, [])

          EQ y2 -> 
            (1, [0, 3]))

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          list_sorted_insert (#2.2 y1) (#2.1 y1)

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case compare n (Z y1) of
          LT y2 -> 
            ??

          GT y2 -> 
            (n, [])

          EQ y2 -> 
            (1, [0, 3]))

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          list_sorted_insert (#2.2 y1) (#2.1 y1)

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.773058 false false

([3],1) -> [1,3];
([3],2) -> [2,3];
([],3) -> [3];
([3],0) -> [0,3];
([2],0) -> [0,2];
([],2) -> [2];
([1,0,3],1) -> [1,0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [n, #2.1 y1]

        Cons y2 -> 
          Cons (1, Cons (0, #2.2 y2)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.317883 false false

([2],2) -> [2];
([2,2,1],3) -> [2,2,1,3];
([],2) -> [2];
([1],0) -> [0,1];
([],0) -> [0];
([3,0,1],3) -> [3,0,1];
([0],3) -> [0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              Cons (n, #2.2 y2)

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, #2.1 y2] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              Cons (n, #2.2 y2)

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, #2.1 y2] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
20.360217 false false

([1,0],0) -> [0,1,0];
([3,3,3],2) -> [2,3,3,3];
([1,0],1) -> [1,0];
([1,2,2],2) -> [1,2,2];
([3,3],0) -> [0,3,3];
([1,0],2) -> [1,0,2];
([1,1],0) -> [0,1,1];

=================================
NOSOL

([],2) -> [2];
([1,2],1) -> [1,2];
([],0) -> [0];
([0,1,2],1) -> [0,1,2];
([3,1],1) -> [1,3,1];
([1,2,0],0) -> [0,1,2,0];
([0,2],3) -> [0,2,3];

=================================
None
([0,0,0],2) -> [0,0,0,2];
([2],0) -> [0,2];
([3],2) -> [2,3];
([0],3) -> [0,3];
([2],3) -> [2,3];
([2,0],2) -> [2,0];
([1,0,1],3) -> [1,0,1,3];

=================================
NOSOL

([],3) -> [3];
([0],3) -> [0,3];
([2,2],1) -> [1,2,2];
([],0) -> [0];
([3],0) -> [0,3];
([1,3,3],0) -> [0,1,3,3];
([0],1) -> [0,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [3]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [1, 2, S n]

            GT y3 -> 
              [0, n]

            EQ y3 -> 
              ??

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare (#2.1 y2) (S n) of
            LT y3 -> 
              ??

            GT y3 -> 
              [0, 3]

            EQ y3 -> 
              [ 0
              , 1
              , S (S (#2.1 y2))
              , S (S (#2.1 y2))
              ] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
16.991074 false false

([1,0,0],0) -> [0,1,0,0];
([],1) -> [1];
([1],3) -> [1,3];
([3,2,3],1) -> [1,3,2,3];
([0,3],3) -> [0,3];
([1,1],1) -> [1,1];
([3,3,2],1) -> [1,3,3,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [1]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          [#2.1 y1, n]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.763611 false false

([3,0],1) -> [1,3,0];
([],1) -> [1];
([0,2,2],0) -> [0,2,2];
([],0) -> [0];
([3,1,0],1) -> [1,3,1,0];
([2],2) -> [2];
([3,0,2],3) -> [3,0,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [1]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              Cons (1, xs)

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (n, #2.2 y2)

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 2, 2] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
25.815349 false false

([3],3) -> [3];
([],0) -> [0];
([1,3],1) -> [1,3];
([1],2) -> [1,2];
([0],1) -> [0,1];
([2,0],1) -> [1,2,0];
([3,2],2) -> [2,3,2];
([3],1) -> [1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          [#2.1 y1, n]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.901649 false false

([1,3],1) -> [1,3];
([],0) -> [0];
([],2) -> [2];
([2,1],1) -> [1,2,1];
([2,1,2],1) -> [1,2,1,2];
([1],0) -> [0,1];
([0],0) -> [0];
([3],1) -> [1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          ??

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.58677 false false

([1,2,3],3) -> [1,2,3];
([3],2) -> [2,3];
([],0) -> [0];
([],1) -> [1];
([1,2],2) -> [1,2];
([1,2,2],0) -> [0,1,2,2];
([],3) -> [3];
([0],2) -> [0,2];

=================================
None
([3],1) -> [1,3];
([0],0) -> [0];
([],0) -> [0];
([3],2) -> [2,3];
([],1) -> [1];
([2],1) -> [1,2];
([1,3,0],2) -> [1,2,3,0];
([3],0) -> [0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [1]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [n, #2.1 y1]

        GT y2 -> 
          Cons (1, Cons (S (#2.1 y1), #2.2 y1))

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [1]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [n, #2.1 y1]

        GT y2 -> 
          Cons
            ( 1
            , Cons
                ( S (#2.1 y1)
                , Cons
                    ( S n
                    , list_sorted_insert (#2.2 y1) (S n)
                    )
                )
            )

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.089199 false false

([1,2],0) -> [0,1,2];
([1,0],0) -> [0,1,0];
([3],0) -> [0,3];
([1,1,0],3) -> [1,1,0,3];
([1,1,3],2) -> [1,1,2,3];
([2],2) -> [2];
([0,1],3) -> [0,1,3];
([2],1) -> [1,2];

=================================
NOSOL

([1],3) -> [1,3];
([0,2],2) -> [0,2];
([1,1],3) -> [1,1,3];
([1],0) -> [0,1];
([2],1) -> [1,2];
([2],2) -> [2];
([3],0) -> [0,3];
([0,1],3) -> [0,1,3];

=================================
NOSOL

([1,0],1) -> [1,0];
([2,1,0],1) -> [1,2,1,0];
([0,0,2],2) -> [0,0,2];
([1,0],0) -> [0,1,0];
([2,1,0],2) -> [2,1,0];
([2,1],1) -> [1,2,1];
([3,0],2) -> [2,3,0];
([2,0,3],1) -> [1,2,0,3];

=================================
NOSOL

([3],1) -> [1,3];
([2],3) -> [2,3];
([0],0) -> [0];
([0],3) -> [0,3];
([1],0) -> [0,1];
([0,3],2) -> [0,2,3];
([0,1],2) -> [0,1,2];
([3],3) -> [3];

=================================
NOSOL

([1,3,2],2) -> [1,2,3,2];
([3],2) -> [2,3];
([2],3) -> [2,3];
([3,0],3) -> [3,0];
([],0) -> [0];
([1,1,1],3) -> [1,1,1,3];
([1],3) -> [1,3];
([3,0,1],0) -> [0,3,0,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (3, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (3, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.118379 false false

([3,0],3) -> [3,0];
([3,2,0],1) -> [1,3,2,0];
([3],0) -> [0,3];
([0,1,3],2) -> [0,1,2,3];
([3],1) -> [1,3];
([],3) -> [3];
([],1) -> [1];
([2],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          [0, 1, 2, S n]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.887641 false false

([3],1) -> [1,3];
([3,3,3],1) -> [1,3,3,3];
([],3) -> [3];
([0],0) -> [0];
([1,0,2],1) -> [1,0,2];
([0,3],2) -> [0,2,3];
([2,2,1],3) -> [2,2,1,3];
([],2) -> [2];
([2,1],3) -> [2,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
9.581224 true true

([3,3,3],2) -> [2,3,3,3];
([],3) -> [3];
([3,1],0) -> [0,3,1];
([3,3],1) -> [1,3,3];
([1,3,1],2) -> [1,2,3,1];
([2,0,0],3) -> [2,0,0,3];
([0],1) -> [0,1];
([3,1],3) -> [3,1];
([0,1],2) -> [0,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
17.543296 true true

([],3) -> [3];
([1,1,1],1) -> [1,1,1];
([2],0) -> [0,2];
([],2) -> [2];
([3],3) -> [3];
([2],3) -> [2,3];
([1,2],3) -> [1,2,3];
([2,2,0],3) -> [2,2,0,3];
([0,1],2) -> [0,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [ S
          (case n of
            Z y2 -> 
              1

            S y2 -> 
              y2)
      ]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y1) n
            )

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [ S
          (case n of
            Z y2 -> 
              1

            S y2 -> 
              y2)
      ]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y1) n
            )

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.308336 false false

([],1) -> [1];
([0],3) -> [0,3];
([],2) -> [2];
([0],2) -> [0,2];
([1],0) -> [0,1];
([2],3) -> [2,3];
([1],3) -> [1,3];
([2,0],1) -> [1,2,0];
([3,0],2) -> [2,3,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          [#2.1 y1, n]

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
5.23005 false false

([],3) -> [3];
([2,0],3) -> [2,0,3];
([3,2,2],0) -> [0,3,2,2];
([1,3],2) -> [1,2,3];
([0,0],1) -> [0,0,1];
([0,2,0],1) -> [0,1,2,0];
([],1) -> [1];
([0],1) -> [0,1];
([],0) -> [0];

=================================
None
([2,3,3],1) -> [1,2,3,3];
([3,0],2) -> [2,3,0];
([2,0,0],0) -> [0,2,0,0];
([2,3,1],1) -> [1,2,3,1];
([0,2,2],2) -> [0,2,2];
([0],1) -> [0,1];
([],3) -> [3];
([],1) -> [1];
([0],2) -> [0,2];

=================================
None
([1,3],2) -> [1,2,3];
([1,2,1],0) -> [0,1,2,1];
([0,0,0],3) -> [0,0,0,3];
([],2) -> [2];
([0,0,2],0) -> [0,0,2];
([2,3],0) -> [0,2,3];
([1],3) -> [1,3];
([],1) -> [1];
([1,1],2) -> [1,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.8482 false false

([0],1) -> [0,1];
([0,3],2) -> [0,2,3];
([1,2,2],1) -> [1,2,2];
([0],0) -> [0];
([0,1],1) -> [0,1];
([3],3) -> [3];
([1],2) -> [1,2];
([3],0) -> [0,3];
([0,3,1],1) -> [0,1,3,1];

=================================
NOSOL

([1,3,3],0) -> [0,1,3,3];
([],3) -> [3];
([],2) -> [2];
([],1) -> [1];
([1,2],2) -> [1,2];
([3,1],1) -> [1,3,1];
([2,2,0],3) -> [2,2,0,3];
([3],0) -> [0,3];
([0,3,0],1) -> [0,1,3,0];

=================================
None
([],3) -> [3];
([2,3,0],2) -> [2,3,0];
([],0) -> [0];
([0],2) -> [0,2];
([],2) -> [2];
([3],2) -> [2,3];
([],1) -> [1];
([1,1,0],3) -> [1,1,0,3];
([1],2) -> [1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [2, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [2, S n, 0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [2, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [2, S n, 0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.621369 false false

([0,3,1],2) -> [0,2,3,1];
([],0) -> [0];
([3,2,0],2) -> [2,3,2,0];
([2,2,2],0) -> [0,2,2,2];
([],2) -> [2];
([2,1,2],1) -> [1,2,1,2];
([2,2,2],2) -> [2,2,2];
([],3) -> [3];
([0,0],2) -> [0,0,2];
([3,0,3],3) -> [3,0,3];

=================================
None
([3,0,1],1) -> [1,3,0,1];
([0,3],3) -> [0,3];
([3,1,3],2) -> [2,3,1,3];
([2,2,0],1) -> [1,2,2,0];
([0,2,2],0) -> [0,2,2];
([],1) -> [1];
([0,2],1) -> [0,1,2];
([2,3,2],3) -> [2,3,2];
([0,0],1) -> [0,0,1];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
21.546728 true true

([],1) -> [1];
([2,3,0],3) -> [2,3,0];
([3,2],3) -> [3,2];
([2],2) -> [2];
([0,0,3],2) -> [0,0,2,3];
([1,3,1],1) -> [1,3,1];
([1,1,3],3) -> [1,1,3];
([2,2,1],0) -> [0,2,2,1];
([3,1,3],1) -> [1,3,1,3];
([1],1) -> [1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
40.364224 true true

([],2) -> [2];
([2,2,1],3) -> [2,2,1,3];
([2],3) -> [2,3];
([],0) -> [0];
([0,3],2) -> [0,2,3];
([0,0,0],0) -> [0,0,0];
([0],1) -> [0,1];
([3],3) -> [3];
([3,1],3) -> [3,1];
([3],2) -> [2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [2, #2.1 y2]

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              Cons (3, #2.2 y2)

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 0, 0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [2, #2.1 y2]

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              Cons (3, #2.2 y2)

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 0, 0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
118.878809 false false

([0,1,3],3) -> [0,1,3];
([1],1) -> [1];
([1,0,0],0) -> [0,1,0,0];
([3,3,0],1) -> [1,3,3,0];
([3,3,1],3) -> [3,3,1];
([],2) -> [2];
([3,0,0],0) -> [0,3,0,0];
([0],1) -> [0,1];
([1,3],1) -> [1,3];
([2],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.602076 true true

([0,2,0],3) -> [0,2,0,3];
([3,3],3) -> [3,3];
([],0) -> [0];
([2,1,3],2) -> [2,1,3];
([],3) -> [3];
([0],3) -> [0,3];
([3,3,3],0) -> [0,3,3,3];
([0,1,2],0) -> [0,1,2];
([2,1,0],1) -> [1,2,1,0];
([0,1],3) -> [0,1,3];

=================================
None
([],3) -> [3];
([0],3) -> [0,3];
([0],0) -> [0];
([],2) -> [2];
([1],3) -> [1,3];
([3,0],1) -> [1,3,0];
([1,0],0) -> [0,1,0];
([0,1,0],0) -> [0,1,0];
([2,1,3],0) -> [0,2,1,3];
([2,2],3) -> [2,2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
5.157321 true true

([2],2) -> [2];
([1],2) -> [1,2];
([0,1],0) -> [0,1];
([0],3) -> [0,3];
([],0) -> [0];
([2],3) -> [2,3];
([0],1) -> [0,1];
([0,1],3) -> [0,1,3];
([],1) -> [1];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              [n]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              [n]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
34.572 false false

([2,2,0],0) -> [0,2,2,0];
([3],0) -> [0,3];
([2],2) -> [2];
([0,0,1],3) -> [0,0,1,3];
([2],3) -> [2,3];
([3,3,0],0) -> [0,3,3,0];
([],3) -> [3];
([],1) -> [1];
([0],2) -> [0,2];
([2],0) -> [0,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.536742 false false

([],2) -> [2];
([2,0],3) -> [2,0,3];
([3,1],1) -> [1,3,1];
([3],2) -> [2,3];
([2,1,1],0) -> [0,2,1,1];
([1],3) -> [1,3];
([],0) -> [0];
([2],0) -> [0,2];
([0,0,3],3) -> [0,0,3];
([],1) -> [1];

=================================
None
([0,1],3) -> [0,1,3];
([3,2,1],2) -> [2,3,2,1];
([3,3,2],3) -> [3,3,2];
([],3) -> [3];
([2,0],0) -> [0,2,0];
([2],1) -> [1,2];
([1,3,2],1) -> [1,3,2];
([3,2,2],3) -> [3,2,2];
([2],0) -> [0,2];
([],1) -> [1];
([3,1,3],1) -> [1,3,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.403711 true true

([3,0],3) -> [3,0];
([],3) -> [3];
([0],3) -> [0,3];
([0,2,1],1) -> [0,1,2,1];
([],0) -> [0];
([3,1,1],1) -> [1,3,1,1];
([0,0],3) -> [0,0,3];
([3,0,1],3) -> [3,0,1];
([1],1) -> [1];
([0],0) -> [0];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (1, xs)

        GT y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (1, xs)

        GT y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.716977 false false

([],2) -> [2];
([0,2,2],3) -> [0,2,2,3];
([1],2) -> [1,2];
([3,2],2) -> [2,3,2];
([2,3],1) -> [1,2,3];
([3,1],1) -> [1,3,1];
([2],2) -> [2];
([3,3,2],3) -> [3,3,2];
([1,2,2],1) -> [1,2,2];
([3],3) -> [3];
([3,2,1],3) -> [3,2,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
54.127811 true true

([1,0,1],3) -> [1,0,1,3];
([],0) -> [0];
([1],1) -> [1];
([2,3,1],2) -> [2,3,1];
([2,1,3],0) -> [0,2,1,3];
([3,2,0],0) -> [0,3,2,0];
([],3) -> [3];
([0,2,2],2) -> [0,2,2];
([3],2) -> [2,3];
([0,0],2) -> [0,0,2];
([0,3,1],0) -> [0,3,1];

=================================
None
([2],1) -> [1,2];
([1],3) -> [1,3];
([3,0,2],1) -> [1,3,0,2];
([1,2],3) -> [1,2,3];
([0],3) -> [0,3];
([1,2,3],0) -> [0,1,2,3];
([1,0,3],2) -> [1,0,2,3];
([1,3,3],3) -> [1,3,3];
([3,1],0) -> [0,3,1];
([],3) -> [3];
([0,0],2) -> [0,0,2];

=================================
None
([0,0,0],0) -> [0,0,0];
([1,2,2],0) -> [0,1,2,2];
([],1) -> [1];
([2,3,3],3) -> [2,3,3];
([1],3) -> [1,3];
([1,1,2],2) -> [1,1,2];
([3,0,0],0) -> [0,3,0,0];
([],2) -> [2];
([3],3) -> [3];
([0,0,1],3) -> [0,0,1,3];
([1,3],2) -> [1,2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
39.394477 true true

([1,2],1) -> [1,2];
([0,2],0) -> [0,2];
([],2) -> [2];
([3,3,2],3) -> [3,3,2];
([2,0,2],3) -> [2,0,2,3];
([2,2],3) -> [2,2,3];
([3,3],0) -> [0,3,3];
([0],3) -> [0,3];
([2,2,2],1) -> [1,2,2,2];
([1,1],0) -> [0,1,1];
([1,2],2) -> [1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
66.013995 true true

([],3) -> [3];
([],2) -> [2];
([2],3) -> [2,3];
([1],1) -> [1];
([1,1,3],1) -> [1,1,3];
([1,2],0) -> [0,1,2];
([],0) -> [0];
([0,2,0],2) -> [0,2,0];
([2,0,1],1) -> [1,2,0,1];
([],1) -> [1];
([3],1) -> [1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              Cons (1, xs)

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              Cons (n, #2.2 y2)

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          Cons (0, Cons (1, #2.2 y2)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              Cons (1, xs)

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              Cons (n, #2.2 y2)

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          Cons (0, Cons (1, #2.2 y2)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
66.206639 false false

([0,1,2],3) -> [0,1,2,3];
([1,3,0],1) -> [1,3,0];
([3,2],1) -> [1,3,2];
([3],0) -> [0,3];
([2,3],1) -> [1,2,3];
([],3) -> [3];
([],0) -> [0];
([2,1,2],1) -> [1,2,1,2];
([1,3],0) -> [0,1,3];
([2],1) -> [1,2];
([2],0) -> [0,2];

=================================
None
([],3) -> [3];
([2],1) -> [1,2];
([],2) -> [2];
([],0) -> [0];
([3],1) -> [1,3];
([],1) -> [1];
([0],2) -> [0,2];
([3,0,2],3) -> [3,0,2];
([0,3,2],1) -> [0,1,3,2];
([3,3],3) -> [3,3];
([3,0],1) -> [1,3,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons (0, Cons (n, #2.2 y1))

        EQ y2 -> 
          Cons (3, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (1, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (3, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.344872 false false

([1],1) -> [1];
([0,0],3) -> [0,0,3];
([],1) -> [1];
([1,0],0) -> [0,1,0];
([3,0,2],3) -> [3,0,2];
([],3) -> [3];
([2],2) -> [2];
([],2) -> [2];
([],0) -> [0];
([1,2,1],0) -> [0,1,2,1];
([0,3],3) -> [0,3];
([3],2) -> [2,3];

=================================
None
([3,3],1) -> [1,3,3];
([2],2) -> [2];
([1,2],0) -> [0,1,2];
([2,3,3],1) -> [1,2,3,3];
([1],3) -> [1,3];
([1],0) -> [0,1];
([],0) -> [0];
([],2) -> [2];
([1,0],3) -> [1,0,3];
([3],0) -> [0,3];
([],1) -> [1];
([3,2],0) -> [0,3,2];

=================================
None
([],0) -> [0];
([2],2) -> [2];
([0,2,1],1) -> [0,1,2,1];
([3,1,3],2) -> [2,3,1,3];
([],1) -> [1];
([2,2],2) -> [2,2];
([0],0) -> [0];
([2],0) -> [0,2];
([0],2) -> [0,2];
([3,0,0],1) -> [1,3,0,0];
([1],3) -> [1,3];
([0,0],2) -> [0,0,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.108189 true true

([],1) -> [1];
([0,1,2],0) -> [0,1,2];
([1],1) -> [1];
([],2) -> [2];
([0,2],2) -> [0,2];
([3],2) -> [2,3];
([0,3],3) -> [0,3];
([2],0) -> [0,2];
([3,3],3) -> [3,3];
([2,0,2],3) -> [2,0,2,3];
([3,0,1],1) -> [1,3,0,1];
([3,0],2) -> [2,3,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
59.462845 true true

([0],1) -> [0,1];
([3,1,2],1) -> [1,3,1,2];
([1,1,2],2) -> [1,1,2];
([3],3) -> [3];
([1,0,2],1) -> [1,0,2];
([3,0,1],3) -> [3,0,1];
([3,1,1],0) -> [0,3,1,1];
([1],3) -> [1,3];
([3,2],1) -> [1,3,2];
([],2) -> [2];
([],3) -> [3];
([],0) -> [0];

=================================
None
([3,2,1],3) -> [3,2,1];
([],0) -> [0];
([0],2) -> [0,2];
([],1) -> [1];
([1,2],2) -> [1,2];
([1,0,0],3) -> [1,0,0,3];
([0],0) -> [0];
([1],1) -> [1];
([3,0,2],0) -> [0,3,0,2];
([],2) -> [2];
([3,1],3) -> [3,1];
([1,2],1) -> [1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.195338 false false

([],1) -> [1];
([3,2],0) -> [0,3,2];
([2,2,0],3) -> [2,2,0,3];
([2],1) -> [1,2];
([],2) -> [2];
([2,2],2) -> [2,2];
([3,2],3) -> [3,2];
([0,2,0],0) -> [0,2,0];
([2,2],3) -> [2,2,3];
([3,0,1],0) -> [0,3,0,1];
([3],1) -> [1,3];
([],0) -> [0];

=================================
None
([1,2],0) -> [0,1,2];
([2,3],3) -> [2,3];
([0,3],2) -> [0,2,3];
([1,0,3],1) -> [1,0,3];
([0,1],0) -> [0,1];
([3,3,1],0) -> [0,3,3,1];
([3,3,2],2) -> [2,3,3,2];
([1,0,2],0) -> [0,1,0,2];
([],2) -> [2];
([],0) -> [0];
([3,0,0],0) -> [0,3,0,0];
([2,1,0],2) -> [2,1,0];

=================================
None
([1,2,2],1) -> [1,2,2];
([3,3,0],0) -> [0,3,3,0];
([0,2],0) -> [0,2];
([1,3],0) -> [0,1,3];
([2],2) -> [2];
([],0) -> [0];
([0,1,2],3) -> [0,1,2,3];
([2,2,2],1) -> [1,2,2,2];
([0,0,2],1) -> [0,0,1,2];
([3,3,1],0) -> [0,3,3,1];
([1,2,3],3) -> [1,2,3];
([2],1) -> [1,2];

=================================
None
([],0) -> [0];
([0],0) -> [0];
([2,2,0],0) -> [0,2,2,0];
([3],3) -> [3];
([1],2) -> [1,2];
([],2) -> [2];
([0],3) -> [0,3];
([0,2],3) -> [0,2,3];
([0,2],0) -> [0,2];
([3,2],2) -> [2,3,2];
([],3) -> [3];
([3,0,3],0) -> [0,3,0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.400453 true true

([3],2) -> [2,3];
([3,2],1) -> [1,3,2];
([0,2],1) -> [0,1,2];
([3,1,1],2) -> [2,3,1,1];
([],0) -> [0];
([],2) -> [2];
([1,1],2) -> [1,1,2];
([3,3,1],0) -> [0,3,3,1];
([2,1,3],2) -> [2,1,3];
([],1) -> [1];
([2],0) -> [0,2];
([3,0,1],3) -> [3,0,1];
([2,3],3) -> [2,3];

=================================
None
([3],2) -> [2,3];
([],0) -> [0];
([2,2],1) -> [1,2,2];
([0,3],0) -> [0,3];
([1,0],3) -> [1,0,3];
([0,1],3) -> [0,1,3];
([0,2],3) -> [0,2,3];
([1,0],2) -> [1,0,2];
([3,2],0) -> [0,3,2];
([2,3,1],0) -> [0,2,3,1];
([1,2,3],3) -> [1,2,3];
([2,1,2],2) -> [2,1,2];
([3],1) -> [1,3];

=================================
None
([1,0],0) -> [0,1,0];
([2],0) -> [0,2];
([],1) -> [1];
([0,3,2],0) -> [0,3,2];
([2,0],1) -> [1,2,0];
([],2) -> [2];
([0,3,3],2) -> [0,2,3,3];
([1,3],0) -> [0,1,3];
([],0) -> [0];
([],3) -> [3];
([1,3],3) -> [1,3];
([3],3) -> [3];
([0,0,3],0) -> [0,0,3];

=================================
None
([],3) -> [3];
([3],2) -> [2,3];
([],1) -> [1];
([],0) -> [0];
([1],3) -> [1,3];
([0],1) -> [0,1];
([2],3) -> [2,3];
([1,3,1],3) -> [1,3,1];
([1,0,2],1) -> [1,0,2];
([1],0) -> [0,1];
([2,0],2) -> [2,0];
([1,2],2) -> [1,2];
([1,0,3],2) -> [1,0,2,3];

=================================
None
([3],0) -> [0,3];
([],1) -> [1];
([3,2,3],2) -> [2,3,2,3];
([2],1) -> [1,2];
([],0) -> [0];
([0],1) -> [0,1];
([3,1],1) -> [1,3,1];
([2],3) -> [2,3];
([2,3],0) -> [0,2,3];
([2],0) -> [0,2];
([0,2,0],1) -> [0,1,2,0];
([0,3],3) -> [0,3];
([2,3,3],3) -> [2,3,3];

=================================
None
([0],3) -> [0,3];
([3,3],0) -> [0,3,3];
([2,1],0) -> [0,2,1];
([],0) -> [0];
([],1) -> [1];
([],3) -> [3];
([2,3],2) -> [2,3];
([2],3) -> [2,3];
([0,1],1) -> [0,1];
([],2) -> [2];
([3],3) -> [3];
([3,2],0) -> [0,3,2];
([1],3) -> [1,3];

=================================
None
([],3) -> [3];
([3,2],1) -> [1,3,2];
([2],1) -> [1,2];
([1],2) -> [1,2];
([1],1) -> [1];
([0],0) -> [0];
([1,2,3],1) -> [1,2,3];
([0,3,3],3) -> [0,3,3];
([1],3) -> [1,3];
([1,0,3],0) -> [0,1,0,3];
([1],0) -> [0,1];
([2,2],2) -> [2,2];
([2,2],1) -> [1,2,2];

=================================
None
([0,2],2) -> [0,2];
([],2) -> [2];
([1,1,1],3) -> [1,1,1,3];
([0,1],1) -> [0,1];
([3,0,1],0) -> [0,3,0,1];
([2,1],1) -> [1,2,1];
([2],0) -> [0,2];
([3,3],2) -> [2,3,3];
([0,2],3) -> [0,2,3];
([0,3,2],1) -> [0,1,3,2];
([1],1) -> [1];
([2,1,2],2) -> [2,1,2];
([3,1,1],1) -> [1,3,1,1];

=================================
None
([3,2,0],2) -> [2,3,2,0];
([],3) -> [3];
([1,2,2],3) -> [1,2,2,3];
([3,1,1],1) -> [1,3,1,1];
([],0) -> [0];
([1,3],0) -> [0,1,3];
([1,3],2) -> [1,2,3];
([3,2],2) -> [2,3,2];
([3],2) -> [2,3];
([2],3) -> [2,3];
([1],1) -> [1];
([],2) -> [2];
([1,0,1],0) -> [0,1,0,1];

=================================
None
([2],0) -> [0,2];
([],2) -> [2];
([],1) -> [1];
([1,0],0) -> [0,1,0];
([2,1,3],0) -> [0,2,1,3];
([],3) -> [3];
([0,0,2],2) -> [0,0,2];
([0,1],1) -> [0,1];
([3,1,0],1) -> [1,3,1,0];
([2,1],1) -> [1,2,1];
([3],2) -> [2,3];
([2,0,3],1) -> [1,2,0,3];
([0,0],0) -> [0,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          xs

        S y2 -> 
          Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.768262 false false

([2,3,1],1) -> [1,2,3,1];
([2,3],2) -> [2,3];
([3,3],2) -> [2,3,3];
([],1) -> [1];
([1,3,1],2) -> [1,2,3,1];
([2,2],3) -> [2,2,3];
([2,0],2) -> [2,0];
([3,3,0],1) -> [1,3,3,0];
([3,2],0) -> [0,3,2];
([1,2],1) -> [1,2];
([],0) -> [0];
([0],1) -> [0,1];
([2],1) -> [1,2];
([3,2],1) -> [1,3,2];

=================================
None
([3],1) -> [1,3];
([],0) -> [0];
([3,2,3],0) -> [0,3,2,3];
([3,2],0) -> [0,3,2];
([3,0],2) -> [2,3,0];
([1,2,3],3) -> [1,2,3];
([0],2) -> [0,2];
([],1) -> [1];
([1,2],0) -> [0,1,2];
([1],2) -> [1,2];
([1],1) -> [1];
([],2) -> [2];
([2,0,0],3) -> [2,0,0,3];
([1,0,2],1) -> [1,0,2];

=================================
None
([1,2],0) -> [0,1,2];
([0],3) -> [0,3];
([],0) -> [0];
([0],0) -> [0];
([],3) -> [3];
([0,3],1) -> [0,1,3];
([0],1) -> [0,1];
([1,0],1) -> [1,0];
([1,1,1],3) -> [1,1,1,3];
([],1) -> [1];
([0,1],0) -> [0,1];
([0,2,1],3) -> [0,2,1,3];
([3,1,3],0) -> [0,3,1,3];
([1],2) -> [1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
6.242763 true true

([2,2,1],1) -> [1,2,2,1];
([1,3,3],1) -> [1,3,3];
([1,3],0) -> [0,1,3];
([],3) -> [3];
([0,0,1],1) -> [0,0,1];
([2,2],0) -> [0,2,2];
([1,0,0],1) -> [1,0,0];
([2,0],3) -> [2,0,3];
([1],1) -> [1];
([2,3,3],3) -> [2,3,3];
([],2) -> [2];
([],0) -> [0];
([3],0) -> [0,3];
([0,2],1) -> [0,1,2];

=================================
None
([],0) -> [0];
([2,3,0],1) -> [1,2,3,0];
([],3) -> [3];
([1],0) -> [0,1];
([1],1) -> [1];
([1],3) -> [1,3];
([1],2) -> [1,2];
([2],2) -> [2];
([2,2],2) -> [2,2];
([3],3) -> [3];
([3,2],3) -> [3,2];
([0],2) -> [0,2];
([3,0,0],1) -> [1,3,0,0];
([],1) -> [1];

=================================
None
([],2) -> [2];
([],0) -> [0];
([3,1],2) -> [2,3,1];
([1,2],2) -> [1,2];
([3],1) -> [1,3];
([1,0,1],3) -> [1,0,1,3];
([1,3,1],0) -> [0,1,3,1];
([],3) -> [3];
([1],3) -> [1,3];
([3],2) -> [2,3];
([3],0) -> [0,3];
([0,2],1) -> [0,1,2];
([1],0) -> [0,1];
([0,0],2) -> [0,0,2];

=================================
None
([1,3],3) -> [1,3];
([0],1) -> [0,1];
([2,3,3],0) -> [0,2,3,3];
([2],0) -> [0,2];
([3,1],3) -> [3,1];
([1],0) -> [0,1];
([1,0],2) -> [1,0,2];
([3,1,0],0) -> [0,3,1,0];
([2,1],1) -> [1,2,1];
([1],3) -> [1,3];
([1,2,3],1) -> [1,2,3];
([3,2,2],3) -> [3,2,2];
([2],2) -> [2];
([0,1,0],3) -> [0,1,0,3];

=================================
NOSOL

([],1) -> [1];
([3],2) -> [2,3];
([3,1,1],1) -> [1,3,1,1];
([2],3) -> [2,3];
([2,0],2) -> [2,0];
([0],3) -> [0,3];
([3,0,1],1) -> [1,3,0,1];
([1,1,1],3) -> [1,1,1,3];
([1,0],1) -> [1,0];
([1,0,2],1) -> [1,0,2];
([0],0) -> [0];
([0,0],1) -> [0,0,1];
([1],2) -> [1,2];
([1,0],0) -> [0,1,0];

=================================
None
([2],1) -> [1,2];
([1],0) -> [0,1];
([2],2) -> [2];
([],0) -> [0];
([],1) -> [1];
([1],2) -> [1,2];
([2],0) -> [0,2];
([],2) -> [2];
([0,0],2) -> [0,0,2];
([3,2],1) -> [1,3,2];
([0,1,2],3) -> [0,1,2,3];
([],3) -> [3];
([2],3) -> [2,3];
([0,3],0) -> [0,3];

=================================
None
([1,2,1],2) -> [1,2,1];
([0],2) -> [0,2];
([3,2],1) -> [1,3,2];
([2],3) -> [2,3];
([2,1],2) -> [2,1];
([1],0) -> [0,1];
([1],1) -> [1];
([1,1],1) -> [1,1];
([2,2,3],2) -> [2,2,3];
([2],2) -> [2];
([3,2],0) -> [0,3,2];
([1,3],0) -> [0,1,3];
([],3) -> [3];
([0],1) -> [0,1];

=================================
None
([0],2) -> [0,2];
([0,0],3) -> [0,0,3];
([0,3,2],3) -> [0,3,2];
([],3) -> [3];
([],0) -> [0];
([2,0,2],0) -> [0,2,0,2];
([3,1],3) -> [3,1];
([3],1) -> [1,3];
([1],0) -> [0,1];
([0],3) -> [0,3];
([0,1,0],1) -> [0,1,0];
([2],2) -> [2];
([1,1,1],1) -> [1,1,1];
([1,2],2) -> [1,2];
([1],3) -> [1,3];

=================================
None
([0,0],0) -> [0,0];
([2,0],1) -> [1,2,0];
([2,1,3],0) -> [0,2,1,3];
([],2) -> [2];
([1,1],1) -> [1,1];
([0,2,1],3) -> [0,2,1,3];
([2,0],0) -> [0,2,0];
([],3) -> [3];
([3],3) -> [3];
([2],3) -> [2,3];
([],1) -> [1];
([2,2,2],2) -> [2,2,2];
([2,1],2) -> [2,1];
([0,2],0) -> [0,2];
([],0) -> [0];

=================================
None
([1,3,0],2) -> [1,2,3,0];
([0],0) -> [0];
([0,1,3],1) -> [0,1,3];
([3],3) -> [3];
([3,0,3],1) -> [1,3,0,3];
([],1) -> [1];
([1,2],3) -> [1,2,3];
([],0) -> [0];
([3,2,1],0) -> [0,3,2,1];
([2,1,2],0) -> [0,2,1,2];
([1,2,2],1) -> [1,2,2];
([1,1],3) -> [1,1,3];
([3,0,1],3) -> [3,0,1];
([0,3,3],0) -> [0,3,3];
([2],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
12.712752 true true

([3],2) -> [2,3];
([1,3,1],3) -> [1,3,1];
([3,0,1],3) -> [3,0,1];
([],1) -> [1];
([],3) -> [3];
([3,1,2],2) -> [2,3,1,2];
([0,3],1) -> [0,1,3];
([0,3,3],3) -> [0,3,3];
([],0) -> [0];
([2],1) -> [1,2];
([0,2],2) -> [0,2];
([3],0) -> [0,3];
([0,3],0) -> [0,3];
([2,0,2],0) -> [0,2,0,2];
([3,0,0],2) -> [2,3,0,0];

=================================
None
([],1) -> [1];
([3,1],1) -> [1,3,1];
([1,1,2],1) -> [1,1,2];
([1,3],2) -> [1,2,3];
([1],1) -> [1];
([0,0,2],1) -> [0,0,1,2];
([],0) -> [0];
([1,1],1) -> [1,1];
([2,2],1) -> [1,2,2];
([2],0) -> [0,2];
([2,1],2) -> [2,1];
([2,0],2) -> [2,0];
([0,3,1],1) -> [0,1,3,1];
([0],1) -> [0,1];
([2],3) -> [2,3];

=================================
None
([],0) -> [0];
([0,1,0],1) -> [0,1,0];
([3,1,0],3) -> [3,1,0];
([0,0,1],0) -> [0,0,1];
([3],1) -> [1,3];
([0,3,2],2) -> [0,2,3,2];
([],3) -> [3];
([2,0],0) -> [0,2,0];
([],2) -> [2];
([2],2) -> [2];
([1,1],0) -> [0,1,1];
([1,0],1) -> [1,0];
([0],1) -> [0,1];
([2,1,2],3) -> [2,1,2,3];
([3,1],1) -> [1,3,1];

=================================
None
([],2) -> [2];
([0,2,3],1) -> [0,1,2,3];
([2,0,0],3) -> [2,0,0,3];
([0],1) -> [0,1];
([3],1) -> [1,3];
([0,0,3],3) -> [0,0,3];
([],0) -> [0];
([],3) -> [3];
([3],3) -> [3];
([2],3) -> [2,3];
([3,3],1) -> [1,3,3];
([1],3) -> [1,3];
([2],1) -> [1,2];
([0],0) -> [0];
([2,0],0) -> [0,2,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
5.904325 false false

([2],3) -> [2,3];
([3,2],0) -> [0,3,2];
([1,3],2) -> [1,2,3];
([1,3,1],3) -> [1,3,1];
([0,0,3],1) -> [0,0,1,3];
([],2) -> [2];
([1,1,0],3) -> [1,1,0,3];
([3,1,1],2) -> [2,3,1,1];
([0,1,2],1) -> [0,1,2];
([],1) -> [1];
([2,0],3) -> [2,0,3];
([3,3,3],0) -> [0,3,3,3];
([],3) -> [3];
([0,2,2],1) -> [0,1,2,2];
([1],0) -> [0,1];

=================================
None
([2],0) -> [0,2];
([1],3) -> [1,3];
([],1) -> [1];
([0,3,3],1) -> [0,1,3,3];
([1,0],3) -> [1,0,3];
([1,3,0],1) -> [1,3,0];
([0],2) -> [0,2];
([],0) -> [0];
([2,1],3) -> [2,1,3];
([],2) -> [2];
([0,2,3],3) -> [0,2,3];
([],3) -> [3];
([2,2],1) -> [1,2,2];
([1,1],0) -> [0,1,1];
([3,2],3) -> [3,2];

=================================
None
([],1) -> [1];
([],2) -> [2];
([3,2,0],1) -> [1,3,2,0];
([0,1],3) -> [0,1,3];
([0],2) -> [0,2];
([2,3],0) -> [0,2,3];
([3,2,0],0) -> [0,3,2,0];
([2,3],2) -> [2,3];
([0,3],2) -> [0,2,3];
([],3) -> [3];
([2,1],2) -> [2,1];
([3,1],2) -> [2,3,1];
([1,3,1],0) -> [0,1,3,1];
([3,1,0],1) -> [1,3,1,0];
([3,2],0) -> [0,3,2];

=================================
None
([0],3) -> [0,3];
([2,2,2],0) -> [0,2,2,2];
([3,0],3) -> [3,0];
([0,1,1],3) -> [0,1,1,3];
([0],1) -> [0,1];
([],2) -> [2];
([2,3,0],0) -> [0,2,3,0];
([0,2,3],3) -> [0,2,3];
([],0) -> [0];
([3,3],3) -> [3,3];
([3],3) -> [3];
([3,2,0],2) -> [2,3,2,0];
([],1) -> [1];
([2,2,0],0) -> [0,2,2,0];
([2,0],2) -> [2,0];
([3,2],1) -> [1,3,2];

=================================
None
([],0) -> [0];
([2,0,3],3) -> [2,0,3];
([2],0) -> [0,2];
([0,0],0) -> [0,0];
([3],0) -> [0,3];
([1,2,2],2) -> [1,2,2];
([2,0],2) -> [2,0];
([1],3) -> [1,3];
([1],0) -> [0,1];
([1,2,3],0) -> [0,1,2,3];
([0,1,2],2) -> [0,1,2];
([2],1) -> [1,2];
([0,1,1],1) -> [0,1,1];
([0],0) -> [0];
([],3) -> [3];
([2,1,3],3) -> [2,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
21.017896 true true

([],3) -> [3];
([1,3,0],1) -> [1,3,0];
([],0) -> [0];
([3,3],0) -> [0,3,3];
([],2) -> [2];
([0,2,1],3) -> [0,2,1,3];
([2],3) -> [2,3];
([0],1) -> [0,1];
([0,2],3) -> [0,2,3];
([],1) -> [1];
([1,2,2],1) -> [1,2,2];
([1,0,0],1) -> [1,0,0];
([3,2,1],1) -> [1,3,2,1];
([1,0],0) -> [0,1,0];
([0,3],2) -> [0,2,3];
([3,3,1],2) -> [2,3,3,1];

=================================
None
([3],0) -> [0,3];
([3,1],0) -> [0,3,1];
([],0) -> [0];
([3,0],1) -> [1,3,0];
([3],1) -> [1,3];
([1,0],0) -> [0,1,0];
([3,1],3) -> [3,1];
([2,0,1],1) -> [1,2,0,1];
([],1) -> [1];
([1,1],1) -> [1,1];
([3,2,3],2) -> [2,3,2,3];
([2,1],1) -> [1,2,1];
([0,2],0) -> [0,2];
([2,1,2],0) -> [0,2,1,2];
([],2) -> [2];
([3],3) -> [3];

=================================
None
([],3) -> [3];
([3,2,2],1) -> [1,3,2,2];
([3,0,3],2) -> [2,3,0,3];
([],0) -> [0];
([0,1,2],1) -> [0,1,2];
([0,3,0],2) -> [0,2,3,0];
([1,0],2) -> [1,0,2];
([2,2,0],1) -> [1,2,2,0];
([],2) -> [2];
([3],2) -> [2,3];
([2,0],1) -> [1,2,0];
([2,1],2) -> [2,1];
([0],2) -> [0,2];
([],1) -> [1];
([0,2,1],2) -> [0,2,1];
([3,0,0],3) -> [3,0,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
7.705258 true true

([],1) -> [1];
([1,2],0) -> [0,1,2];
([0,0,2],0) -> [0,0,2];
([2,3],1) -> [1,2,3];
([0,1],1) -> [0,1];
([1,3,0],0) -> [0,1,3,0];
([2,0,3],3) -> [2,0,3];
([0],1) -> [0,1];
([2,3,1],3) -> [2,3,1];
([],3) -> [3];
([3,3,0],0) -> [0,3,3,0];
([1,2,0],2) -> [1,2,0];
([1],0) -> [0,1];
([1,3,2],3) -> [1,3,2];
([1,0,1],0) -> [0,1,0,1];
([2,1,3],2) -> [2,1,3];

=================================
None
([2,0],1) -> [1,2,0];
([2],0) -> [0,2];
([1,0,2],1) -> [1,0,2];
([0,1,1],3) -> [0,1,1,3];
([2,0],3) -> [2,0,3];
([2,1,1],3) -> [2,1,1,3];
([1,2,0],2) -> [1,2,0];
([1],2) -> [1,2];
([3,1,1],2) -> [2,3,1,1];
([1,1,0],3) -> [1,1,0,3];
([0,1,3],2) -> [0,1,2,3];
([2,0,0],3) -> [2,0,0,3];
([],2) -> [2];
([0,2,3],1) -> [0,1,2,3];
([3,1],3) -> [3,1];
([3],3) -> [3];

=================================
STACKOVERFLOW

([0,2,3],1) -> [0,1,2,3];
([3,0],1) -> [1,3,0];
([3],0) -> [0,3];
([],0) -> [0];
([0,2,2],1) -> [0,1,2,2];
([],1) -> [1];
([3],1) -> [1,3];
([2,0],3) -> [2,0,3];
([2,3],3) -> [2,3];
([0],1) -> [0,1];
([1,1],3) -> [1,1,3];
([2,1],3) -> [2,1,3];
([1],3) -> [1,3];
([0],0) -> [0];
([3,0],3) -> [3,0];
([2,0],2) -> [2,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
19.816194 true true

([1,3],3) -> [1,3];
([],1) -> [1];
([],2) -> [2];
([0,1,3],0) -> [0,1,3];
([1,1,0],2) -> [1,1,0,2];
([1],3) -> [1,3];
([0,3,1],0) -> [0,3,1];
([3,2],1) -> [1,3,2];
([0],2) -> [0,2];
([2],0) -> [0,2];
([0,2],2) -> [0,2];
([0,3],1) -> [0,1,3];
([0,0,2],0) -> [0,0,2];
([1],1) -> [1];
([],3) -> [3];
([1,2],0) -> [0,1,2];

=================================
None
([2],2) -> [2];
([1],2) -> [1,2];
([],1) -> [1];
([3],1) -> [1,3];
([3,0],1) -> [1,3,0];
([0,0],0) -> [0,0];
([1,2,0],1) -> [1,2,0];
([1,1,2],1) -> [1,1,2];
([],3) -> [3];
([2,2],2) -> [2,2];
([0,1],0) -> [0,1];
([1,3],2) -> [1,2,3];
([1,0],2) -> [1,0,2];
([1,1],2) -> [1,1,2];
([],0) -> [0];
([],2) -> [2];

=================================
None
([0,3],3) -> [0,3];
([0,0,1],0) -> [0,0,1];
([0],0) -> [0];
([3,1,2],3) -> [3,1,2];
([3,0,1],1) -> [1,3,0,1];
([1,1,1],3) -> [1,1,1,3];
([],3) -> [3];
([3,3],1) -> [1,3,3];
([0],1) -> [0,1];
([],1) -> [1];
([2],1) -> [1,2];
([2,3],0) -> [0,2,3];
([3,2,3],1) -> [1,3,2,3];
([0,2,3],0) -> [0,2,3];
([3],0) -> [0,3];
([2,1],1) -> [1,2,1];
([],2) -> [2];

=================================
None
([1,0],3) -> [1,0,3];
([0,0],1) -> [0,0,1];
([2,0,1],3) -> [2,0,1,3];
([3,2],1) -> [1,3,2];
([3],0) -> [0,3];
([1,0],2) -> [1,0,2];
([3,0,3],1) -> [1,3,0,3];
([2],3) -> [2,3];
([2,3],3) -> [2,3];
([1,1],0) -> [0,1,1];
([],3) -> [3];
([2,2],3) -> [2,2,3];
([2,2],2) -> [2,2];
([],2) -> [2];
([2,3,0],2) -> [2,3,0];
([0],1) -> [0,1];
([1],3) -> [1,3];

=================================
STACKOVERFLOW

([0,2],3) -> [0,2,3];
([1],2) -> [1,2];
([],1) -> [1];
([2],0) -> [0,2];
([2,2,2],3) -> [2,2,2,3];
([0],3) -> [0,3];
([1],1) -> [1];
([3],1) -> [1,3];
([],3) -> [3];
([0,2],0) -> [0,2];
([2,1,2],2) -> [2,1,2];
([1,1,3],3) -> [1,1,3];
([0],1) -> [0,1];
([2],3) -> [2,3];
([3,3,2],0) -> [0,3,3,2];
([3,2,2],3) -> [3,2,2];
([0,2,0],0) -> [0,2,0];

=================================
STACKOVERFLOW

([],0) -> [0];
([3],3) -> [3];
([3,0],2) -> [2,3,0];
([0,2,3],3) -> [0,2,3];
([0,0,0],1) -> [0,0,0,1];
([2,0],1) -> [1,2,0];
([1,1],2) -> [1,1,2];
([2],1) -> [1,2];
([2,0,2],0) -> [0,2,0,2];
([1,0,1],1) -> [1,0,1];
([],2) -> [2];
([3,3],2) -> [2,3,3];
([2],2) -> [2];
([0,2,1],2) -> [0,2,1];
([1,3,2],3) -> [1,3,2];
([],1) -> [1];
([2,1,3],3) -> [2,1,3];

=================================
None
([3,1],3) -> [3,1];
([1,3],0) -> [0,1,3];
([2],3) -> [2,3];
([1,2],3) -> [1,2,3];
([3,0,1],1) -> [1,3,0,1];
([],2) -> [2];
([1,1,3],3) -> [1,1,3];
([0],2) -> [0,2];
([1],2) -> [1,2];
([1,3,1],3) -> [1,3,1];
([],3) -> [3];
([2,0],2) -> [2,0];
([],1) -> [1];
([2,3],1) -> [1,2,3];
([1,0,2],2) -> [1,0,2];
([3,0],3) -> [3,0];
([1,1],3) -> [1,1,3];

=================================
None
([],1) -> [1];
([0],3) -> [0,3];
([],2) -> [2];
([1,2,3],2) -> [1,2,3];
([2,0,0],1) -> [1,2,0,0];
([3,1,0],3) -> [3,1,0];
([2],1) -> [1,2];
([],3) -> [3];
([2,0],2) -> [2,0];
([0,0],0) -> [0,0];
([1,3],1) -> [1,3];
([0,1],0) -> [0,1];
([2,0,1],2) -> [2,0,1];
([0,2,1],0) -> [0,2,1];
([3,0],1) -> [1,3,0];
([2,3,2],1) -> [1,2,3,2];
([3,2],2) -> [2,3,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
25.258016 true true

([],1) -> [1];
([2,1,3],3) -> [2,1,3];
([3,1,1],2) -> [2,3,1,1];
([0,3,1],3) -> [0,3,1];
([2,2],2) -> [2,2];
([3,0],1) -> [1,3,0];
([2,1,1],3) -> [2,1,1,3];
([0],1) -> [0,1];
([0,0],0) -> [0,0];
([3],1) -> [1,3];
([3,1,3],1) -> [1,3,1,3];
([2],0) -> [0,2];
([2],2) -> [2];
([1],0) -> [0,1];
([1,3,0],3) -> [1,3,0];
([3,0,3],2) -> [2,3,0,3];
([3],0) -> [0,3];

=================================
STACKOVERFLOW

([3],0) -> [0,3];
([2,1,3],1) -> [1,2,1,3];
([1],1) -> [1];
([],3) -> [3];
([2,1,1],3) -> [2,1,1,3];
([0,1],0) -> [0,1];
([0,1,2],0) -> [0,1,2];
([],1) -> [1];
([1],2) -> [1,2];
([3],1) -> [1,3];
([3,0,2],2) -> [2,3,0,2];
([3,0],1) -> [1,3,0];
([0,2,0],2) -> [0,2,0];
([3],3) -> [3];
([1],0) -> [0,1];
([3,1,3],3) -> [3,1,3];
([2],3) -> [2,3];

=================================
STACKOVERFLOW

([],3) -> [3];
([3,0,1],0) -> [0,3,0,1];
([1,2,0],3) -> [1,2,0,3];
([],0) -> [0];
([2,2,1],1) -> [1,2,2,1];
([0],2) -> [0,2];
([0,2],0) -> [0,2];
([2,3,1],2) -> [2,3,1];
([3,1],0) -> [0,3,1];
([1],1) -> [1];
([3],2) -> [2,3];
([2],2) -> [2];
([],2) -> [2];
([1,3,1],1) -> [1,3,1];
([3,0],1) -> [1,3,0];
([1],0) -> [0,1];
([1],2) -> [1,2];

=================================
None
([3,2,3],0) -> [0,3,2,3];
([],3) -> [3];
([1,1,1],3) -> [1,1,1,3];
([1,0],0) -> [0,1,0];
([1,1],1) -> [1,1];
([0,1,3],1) -> [0,1,3];
([2,2,0],1) -> [1,2,2,0];
([3,3],0) -> [0,3,3];
([0],0) -> [0];
([],1) -> [1];
([1,1],2) -> [1,1,2];
([],2) -> [2];
([2,2],0) -> [0,2,2];
([0],3) -> [0,3];
([3,3],3) -> [3,3];
([2,3],1) -> [1,2,3];
([3],3) -> [3];

=================================
None
([0],0) -> [0];
([2],1) -> [1,2];
([3,0],3) -> [3,0];
([1],0) -> [0,1];
([0],2) -> [0,2];
([0,1],2) -> [0,1,2];
([1,1],0) -> [0,1,1];
([],1) -> [1];
([1],3) -> [1,3];
([3,1,2],0) -> [0,3,1,2];
([0,1],1) -> [0,1];
([],3) -> [3];
([],2) -> [2];
([],0) -> [0];
([2,2],3) -> [2,2,3];
([0,1,0],3) -> [0,1,0,3];
([3,2,1],0) -> [0,3,2,1];
([1,0,0],0) -> [0,1,0,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
22.92911 true true

([2,3,1],3) -> [2,3,1];
([],1) -> [1];
([],2) -> [2];
([3],3) -> [3];
([1,3,1],2) -> [1,2,3,1];
([1],3) -> [1,3];
([3],1) -> [1,3];
([0,3,2],0) -> [0,3,2];
([0],3) -> [0,3];
([3],0) -> [0,3];
([2],0) -> [0,2];
([0],1) -> [0,1];
([0,1,0],1) -> [0,1,0];
([2,2],1) -> [1,2,2];
([3,1,1],1) -> [1,3,1,1];
([],3) -> [3];
([2,1],3) -> [2,1,3];
([1,3,3],3) -> [1,3,3];

=================================
STACKOVERFLOW

([2,0,1],1) -> [1,2,0,1];
([2,0,0],3) -> [2,0,0,3];
([3],2) -> [2,3];
([0,2],1) -> [0,1,2];
([2],1) -> [1,2];
([1],1) -> [1];
([0,3,2],2) -> [0,2,3,2];
([2,3,3],0) -> [0,2,3,3];
([3],3) -> [3];
([],3) -> [3];
([],0) -> [0];
([1],0) -> [0,1];
([0],1) -> [0,1];
([3,2,3],3) -> [3,2,3];
([1,0],1) -> [1,0];
([0,0,0],0) -> [0,0,0];
([],2) -> [2];
([1,2,3],0) -> [0,1,2,3];

=================================
STACKOVERFLOW

([],1) -> [1];
([3,3,0],3) -> [3,3,0];
([],0) -> [0];
([1],0) -> [0,1];
([],2) -> [2];
([3],1) -> [1,3];
([],3) -> [3];
([2,1],2) -> [2,1];
([0,2,1],0) -> [0,2,1];
([3,0,0],2) -> [2,3,0,0];
([1],3) -> [1,3];
([2,0,1],0) -> [0,2,0,1];
([0,0],3) -> [0,0,3];
([0,0,1],1) -> [0,0,1];
([3],3) -> [3];
([0,1],1) -> [0,1];
([3,3],1) -> [1,3,3];
([3],2) -> [2,3];

=================================
None
([0,1,3],3) -> [0,1,3];
([3],3) -> [3];
([],1) -> [1];
([0],2) -> [0,2];
([],2) -> [2];
([3],2) -> [2,3];
([],3) -> [3];
([3,3],1) -> [1,3,3];
([0],0) -> [0];
([2],1) -> [1,2];
([0],1) -> [0,1];
([3],1) -> [1,3];
([1,2],0) -> [0,1,2];
([1,1],2) -> [1,1,2];
([1],3) -> [1,3];
([2,3,3],2) -> [2,3,3];
([3,1],3) -> [3,1];
([1],1) -> [1];

=================================
STACKOVERFLOW

([2,1,1],0) -> [0,2,1,1];
([2,0],0) -> [0,2,0];
([1,3],3) -> [1,3];
([0],1) -> [0,1];
([],2) -> [2];
([],0) -> [0];
([2],2) -> [2];
([0,2,0],3) -> [0,2,0,3];
([2,2],1) -> [1,2,2];
([2,1],3) -> [2,1,3];
([3],1) -> [1,3];
([],1) -> [1];
([1,0,2],0) -> [0,1,0,2];
([],3) -> [3];
([2,3,3],1) -> [1,2,3,3];
([2,1,3],1) -> [1,2,1,3];
([0,1],2) -> [0,1,2];
([3,0],2) -> [2,3,0];

=================================
None
([1,3],1) -> [1,3];
([],2) -> [2];
([],1) -> [1];
([2],1) -> [1,2];
([2,1,2],1) -> [1,2,1,2];
([1,0],1) -> [1,0];
([3],3) -> [3];
([0],0) -> [0];
([0,1,0],2) -> [0,1,0,2];
([3,2,2],3) -> [3,2,2];
([0,1,0],1) -> [0,1,0];
([0],2) -> [0,2];
([2],3) -> [2,3];
([0],3) -> [0,3];
([0,0,1],1) -> [0,0,1];
([0,1],2) -> [0,1,2];
([1,1],1) -> [1,1];
([],3) -> [3];

=================================
STACKOVERFLOW

([],2) -> [2];
([1,3,0],0) -> [0,1,3,0];
([],0) -> [0];
([],3) -> [3];
([1,3],2) -> [1,2,3];
([],1) -> [1];
([2,0],0) -> [0,2,0];
([0,3],2) -> [0,2,3];
([1,2,3],0) -> [0,1,2,3];
([1,2,0],3) -> [1,2,0,3];
([3,2],2) -> [2,3,2];
([0,2],1) -> [0,1,2];
([1,1],0) -> [0,1,1];
([1],2) -> [1,2];
([1],0) -> [0,1];
([1,3,1],3) -> [1,3,1];
([2,1,3],2) -> [2,1,3];
([3,3],0) -> [0,3,3];

=================================
None
([1,3],1) -> [1,3];
([],3) -> [3];
([2],0) -> [0,2];
([2,3,2],1) -> [1,2,3,2];
([1,3,1],3) -> [1,3,1];
([2],2) -> [2];
([3],3) -> [3];
([2,2,1],3) -> [2,2,1,3];
([2,3,1],3) -> [2,3,1];
([0,3,2],2) -> [0,2,3,2];
([1,0],1) -> [1,0];
([3,1,2],3) -> [3,1,2];
([3,2],3) -> [3,2];
([0,1,1],3) -> [0,1,1,3];
([3,2,3],2) -> [2,3,2,3];
([],1) -> [1];
([2,3],2) -> [2,3];
([],0) -> [0];

=================================
STACKOVERFLOW

([3,1,0],3) -> [3,1,0];
([],3) -> [3];
([0],3) -> [0,3];
([0,2],0) -> [0,2];
([2],1) -> [1,2];
([],1) -> [1];
([],2) -> [2];
([0],2) -> [0,2];
([1,1],1) -> [1,1];
([],0) -> [0];
([2,2,0],3) -> [2,2,0,3];
([2,0],1) -> [1,2,0];
([3,1,1],3) -> [3,1,1];
([1,3],1) -> [1,3];
([1],0) -> [0,1];
([0,0],3) -> [0,0,3];
([3],1) -> [1,3];
([1],2) -> [1,2];

=================================
None
([1],1) -> [1];
([1],2) -> [1,2];
([1],0) -> [0,1];
([1,1,1],0) -> [0,1,1,1];
([1,2,3],1) -> [1,2,3];
([2],0) -> [0,2];
([],1) -> [1];
([3,3,2],2) -> [2,3,3,2];
([0,0],0) -> [0,0];
([3,3,3],1) -> [1,3,3,3];
([0,1],3) -> [0,1,3];
([],3) -> [3];
([3,2,1],1) -> [1,3,2,1];
([1,0,3],0) -> [0,1,0,3];
([],0) -> [0];
([1,2,3],3) -> [1,2,3];
([1,1],0) -> [0,1,1];
([3,3],1) -> [1,3,3];
([],2) -> [2];

=================================
STACKOVERFLOW

([],2) -> [2];
([0],3) -> [0,3];
([3,0,3],1) -> [1,3,0,3];
([0],0) -> [0];
([3],0) -> [0,3];
([3,2,0],1) -> [1,3,2,0];
([],1) -> [1];
([1,0,2],1) -> [1,0,2];
([0,2,2],3) -> [0,2,2,3];
([3],2) -> [2,3];
([],0) -> [0];
([0],1) -> [0,1];
([2,0],0) -> [0,2,0];
([1,3,1],3) -> [1,3,1];
([2,1,0],3) -> [2,1,0,3];
([2],3) -> [2,3];
([1,3],0) -> [0,1,3];
([2],1) -> [1,2];
([0,0,3],1) -> [0,0,1,3];

=================================
STACKOVERFLOW

([1,1],2) -> [1,1,2];
([1,3,1],2) -> [1,2,3,1];
([0,0,0],1) -> [0,0,0,1];
([3,2,2],2) -> [2,3,2,2];
([2,1,0],0) -> [0,2,1,0];
([],3) -> [3];
([2,0,3],1) -> [1,2,0,3];
([2,1],3) -> [2,1,3];
([0,0],2) -> [0,0,2];
([1,2,0],1) -> [1,2,0];
([3,3,3],0) -> [0,3,3,3];
([2,0],0) -> [0,2,0];
([1,0],0) -> [0,1,0];
([1,3,2],3) -> [1,3,2];
([],0) -> [0];
([2],0) -> [0,2];
([1,3],3) -> [1,3];
([1],1) -> [1];
([3],2) -> [2,3];

=================================
STACKOVERFLOW

([3],2) -> [2,3];
([2,2],1) -> [1,2,2];
([],0) -> [0];
([0,1],1) -> [0,1];
([2,0],1) -> [1,2,0];
([],1) -> [1];
([3,1],3) -> [3,1];
([3,0],1) -> [1,3,0];
([1,2,2],0) -> [0,1,2,2];
([3],3) -> [3];
([2,1,1],3) -> [2,1,1,3];
([1],0) -> [0,1];
([],2) -> [2];
([0,2],2) -> [0,2];
([3,0,2],3) -> [3,0,2];
([],3) -> [3];
([0],0) -> [0];
([2],2) -> [2];
([2,1],0) -> [0,2,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
54.897131 true true

([],2) -> [2];
([],1) -> [1];
([],0) -> [0];
([0],0) -> [0];
([0],2) -> [0,2];
([3],0) -> [0,3];
([],3) -> [3];
([1,3,3],2) -> [1,2,3,3];
([0],3) -> [0,3];
([1,0],0) -> [0,1,0];
([1,2,2],0) -> [0,1,2,2];
([1,0],1) -> [1,0];
([1,2],1) -> [1,2];
([1,1],1) -> [1,1];
([2,2],2) -> [2,2];
([3,3,3],0) -> [0,3,3,3];
([1,0],2) -> [1,0,2];
([2,0,2],3) -> [2,0,2,3];
([3,3,1],0) -> [0,3,3,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
59.703446 true true

([0,0,2],3) -> [0,0,2,3];
([],1) -> [1];
([1],1) -> [1];
([1],2) -> [1,2];
([2],0) -> [0,2];
([3,3,2],1) -> [1,3,3,2];
([0],0) -> [0];
([0,2,3],1) -> [0,1,2,3];
([0],1) -> [0,1];
([3,1],3) -> [3,1];
([1,0,2],1) -> [1,0,2];
([3,0],1) -> [1,3,0];
([0,0],0) -> [0,0];
([3],0) -> [0,3];
([],2) -> [2];
([3,0,1],3) -> [3,0,1];
([1],0) -> [0,1];
([1,1,0],1) -> [1,1,0];
([1],3) -> [1,3];

=================================
STACKOVERFLOW

([],2) -> [2];
([2],3) -> [2,3];
([2,1],0) -> [0,2,1];
([1],0) -> [0,1];
([3],2) -> [2,3];
([2,0,1],0) -> [0,2,0,1];
([1,0],1) -> [1,0];
([3,1,1],1) -> [1,3,1,1];
([0,3,2],1) -> [0,1,3,2];
([3,2],0) -> [0,3,2];
([],0) -> [0];
([3,3,3],2) -> [2,3,3,3];
([3,0,3],3) -> [3,0,3];
([1],3) -> [1,3];
([1],1) -> [1];
([3],1) -> [1,3];
([2,3,2],0) -> [0,2,3,2];
([0,2],0) -> [0,2];
([2,2,3],0) -> [0,2,2,3];

=================================
STACKOVERFLOW

([1],0) -> [0,1];
([0,1,1],0) -> [0,1,1];
([0,2],1) -> [0,1,2];
([0,1],2) -> [0,1,2];
([3,3],0) -> [0,3,3];
([3,2],3) -> [3,2];
([2,0,1],3) -> [2,0,1,3];
([1],3) -> [1,3];
([],3) -> [3];
([0,1],1) -> [0,1];
([0,2,2],2) -> [0,2,2];
([1,3],1) -> [1,3];
([1,0],0) -> [0,1,0];
([],1) -> [1];
([3,0,1],3) -> [3,0,1];
([],0) -> [0];
([0],0) -> [0];
([2,2,0],0) -> [0,2,2,0];
([1],1) -> [1];

=================================
STACKOVERFLOW

([1],1) -> [1];
([],1) -> [1];
([1],2) -> [1,2];
([3],0) -> [0,3];
([3],1) -> [1,3];
([2,1,0],2) -> [2,1,0];
([2,1,2],1) -> [1,2,1,2];
([1,0],2) -> [1,0,2];
([2,3,2],2) -> [2,3,2];
([],2) -> [2];
([1,0,0],1) -> [1,0,0];
([0,3],3) -> [0,3];
([1],3) -> [1,3];
([0,2],3) -> [0,2,3];
([],0) -> [0];
([1],0) -> [0,1];
([3,2],0) -> [0,3,2];
([0,1],1) -> [0,1];
([2,1],0) -> [0,2,1];

=================================
STACKOVERFLOW

([1],3) -> [1,3];
([3,0],1) -> [1,3,0];
([0],0) -> [0];
([],2) -> [2];
([0,0],2) -> [0,0,2];
([2,2,2],1) -> [1,2,2,2];
([1,3,1],0) -> [0,1,3,1];
([1,3,3],0) -> [0,1,3,3];
([2],2) -> [2];
([3],0) -> [0,3];
([0,0,0],3) -> [0,0,0,3];
([],3) -> [3];
([1,1],3) -> [1,1,3];
([1,1,2],0) -> [0,1,1,2];
([1,0],3) -> [1,0,3];
([3,2,2],1) -> [1,3,2,2];
([0,2,0],1) -> [0,1,2,0];
([],1) -> [1];
([2,3,0],0) -> [0,2,3,0];

=================================
STACKOVERFLOW

([2],2) -> [2];
([],1) -> [1];
([3,3,1],3) -> [3,3,1];
([0,2,3],1) -> [0,1,2,3];
([],3) -> [3];
([1,3,3],0) -> [0,1,3,3];
([3],3) -> [3];
([3,2],1) -> [1,3,2];
([],2) -> [2];
([2],1) -> [1,2];
([3,2,0],2) -> [2,3,2,0];
([],0) -> [0];
([1,1],3) -> [1,1,3];
([1,3,2],3) -> [1,3,2];
([1,3,0],3) -> [1,3,0];
([2,0,1],0) -> [0,2,0,1];
([2,0],2) -> [2,0];
([1],3) -> [1,3];
([1,1],2) -> [1,1,2];
([2],0) -> [0,2];

=================================
STACKOVERFLOW

([1,3],0) -> [0,1,3];
([2],3) -> [2,3];
([2,0],2) -> [2,0];
([0,0,0],2) -> [0,0,0,2];
([0],1) -> [0,1];
([0,3,2],3) -> [0,3,2];
([0,3,2],1) -> [0,1,3,2];
([1],3) -> [1,3];
([3],0) -> [0,3];
([0,1,3],1) -> [0,1,3];
([3,1],3) -> [3,1];
([0,0,2],0) -> [0,0,2];
([0,0],0) -> [0,0];
([2,2,1],0) -> [0,2,2,1];
([3,3],3) -> [3,3];
([],3) -> [3];
([0,2],3) -> [0,2,3];
([1,3],3) -> [1,3];
([3,3],0) -> [0,3,3];
([2,1,0],1) -> [1,2,1,0];

=================================
STACKOVERFLOW

([1,1,2],1) -> [1,1,2];
([3,2],1) -> [1,3,2];
([0],2) -> [0,2];
([1,1],3) -> [1,1,3];
([1],1) -> [1];
([2,1,0],2) -> [2,1,0];
([1,3],1) -> [1,3];
([3,2,0],0) -> [0,3,2,0];
([2,3],0) -> [0,2,3];
([3,2,1],0) -> [0,3,2,1];
([1,0],0) -> [0,1,0];
([2],2) -> [2];
([3],1) -> [1,3];
([0,3],2) -> [0,2,3];
([0,0,2],2) -> [0,0,2];
([0,1],3) -> [0,1,3];
([1,1],0) -> [0,1,1];
([2,1,3],2) -> [2,1,3];
([2],0) -> [0,2];
([0],0) -> [0];

=================================
NOSOL

([],1) -> [1];
([],3) -> [3];
([3,0],2) -> [2,3,0];
([1,2,0],1) -> [1,2,0];
([2,3],1) -> [1,2,3];
([0,2],0) -> [0,2];
([0,2],2) -> [0,2];
([],0) -> [0];
([1],2) -> [1,2];
([1,0],3) -> [1,0,3];
([2,0],1) -> [1,2,0];
([1],1) -> [1];
([0],0) -> [0];
([],2) -> [2];
([2],3) -> [2,3];
([3,3,0],0) -> [0,3,3,0];
([1,3,2],1) -> [1,3,2];
([1,0,1],1) -> [1,0,1];
([2],0) -> [0,2];
([2,2],0) -> [0,2,2];

=================================
STACKOVERFLOW

([1],2) -> [1,2];
([1],0) -> [0,1];
([1,0],2) -> [1,0,2];
([],3) -> [3];
([3],1) -> [1,3];
([3,3],3) -> [3,3];
([1,0,3],1) -> [1,0,3];
([3],3) -> [3];
([0,3,2],3) -> [0,3,2];
([0,3,1],2) -> [0,2,3,1];
([],0) -> [0];
([3,1],2) -> [2,3,1];
([2,2,0],1) -> [1,2,2,0];
([],2) -> [2];
([3,2,3],1) -> [1,3,2,3];
([0,2],2) -> [0,2];
([1,2],2) -> [1,2];
([1,1],1) -> [1,1];
([2,3,1],0) -> [0,2,3,1];
([3],0) -> [0,3];

=================================
STACKOVERFLOW

([0,3],3) -> [0,3];
([0,1],2) -> [0,1,2];
([2],0) -> [0,2];
([1,2],1) -> [1,2];
([3,1],1) -> [1,3,1];
([0,0],2) -> [0,0,2];
([1,0],2) -> [1,0,2];
([1,2,0],2) -> [1,2,0];
([1,2,2],0) -> [0,1,2,2];
([],1) -> [1];
([],3) -> [3];
([1,1],1) -> [1,1];
([],2) -> [2];
([3],2) -> [2,3];
([1],0) -> [0,1];
([2,1],3) -> [2,1,3];
([0,1],0) -> [0,1];
([2],1) -> [1,2];
([1],3) -> [1,3];
([2,3],2) -> [2,3];

=================================
STACKOVERFLOW

([1],1) -> [1];
([3,2,2],3) -> [3,2,2];
([0,0,3],1) -> [0,0,1,3];
([],0) -> [0];
([3],3) -> [3];
([3],0) -> [0,3];
([],2) -> [2];
([3,2],1) -> [1,3,2];
([2,0,0],0) -> [0,2,0,0];
([2,0],2) -> [2,0];
([2],3) -> [2,3];
([2,3,3],2) -> [2,3,3];
([0],1) -> [0,1];
([],1) -> [1];
([1],2) -> [1,2];
([0,1],3) -> [0,1,3];
([2,2],2) -> [2,2];
([3],2) -> [2,3];
([1,0],2) -> [1,0,2];
([0,0,3],2) -> [0,0,2,3];

=================================
STACKOVERFLOW

([1],0) -> [0,1];
([],2) -> [2];
([],1) -> [1];
([2,2,3],1) -> [1,2,2,3];
([3],1) -> [1,3];
([0,3],3) -> [0,3];
([0,0,0],0) -> [0,0,0];
([0,2,0],1) -> [0,1,2,0];
([2,0],2) -> [2,0];
([3,3],1) -> [1,3,3];
([3,0,3],3) -> [3,0,3];
([0,1,2],3) -> [0,1,2,3];
([2,3,2],2) -> [2,3,2];
([0,1],1) -> [0,1];
([3,3],2) -> [2,3,3];
([2,1,0],0) -> [0,2,1,0];
([0],3) -> [0,3];
([0,3],0) -> [0,3];
([2,0],0) -> [0,2,0];
([2],1) -> [1,2];

=================================
STACKOVERFLOW

([],0) -> [0];
([],1) -> [1];
([3],0) -> [0,3];
([1],2) -> [1,2];
([3,2,1],3) -> [3,2,1];
([3],3) -> [3];
([3,3,3],0) -> [0,3,3,3];
([3,2,2],0) -> [0,3,2,2];
([],2) -> [2];
([3],1) -> [1,3];
([1,2,1],3) -> [1,2,1,3];
([1,1],2) -> [1,1,2];
([2,3],2) -> [2,3];
([1],1) -> [1];
([2,0],1) -> [1,2,0];
([0,0,1],2) -> [0,0,1,2];
([1,3,1],2) -> [1,2,3,1];
([2,0,1],2) -> [2,0,1];
([0,2,0],2) -> [0,2,0];
([2,0],0) -> [0,2,0];

=================================
STACKOVERFLOW

([0],3) -> [0,3];
([0],2) -> [0,2];
([1],0) -> [0,1];
([2,1],3) -> [2,1,3];
([1,3,0],0) -> [0,1,3,0];
([],2) -> [2];
([2,0,0],2) -> [2,0,0];
([3,1],2) -> [2,3,1];
([2,1,3],1) -> [1,2,1,3];
([1,3,2],1) -> [1,3,2];
([1],1) -> [1];
([1],2) -> [1,2];
([2],2) -> [2];
([2,0,3],3) -> [2,0,3];
([0,1,0],0) -> [0,1,0];
([],3) -> [3];
([0,0],3) -> [0,0,3];
([],0) -> [0];
([0,0],2) -> [0,0,2];
([3],0) -> [0,3];

=================================
STACKOVERFLOW

