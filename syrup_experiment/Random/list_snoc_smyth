([0,0],2) -> [0,0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_snoc = \xs -> \n -> [0, 0, n] in list_snoc) : NatList -> Nat -> NatList)
0.00426999999991 false false

([],1) -> [1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_snoc = \xs -> \n -> [n] in list_snoc) : NatList -> Nat -> NatList)
0.0038770000001 false false

([],0) -> [0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_snoc = \xs -> \n -> [0] in list_snoc) : NatList -> Nat -> NatList)
0.00378500000011 false false

([1,2],2) -> [1,2,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_snoc = \xs -> \n -> [1, n, n] in list_snoc) : NatList -> Nat -> NatList)
0.00474000000008 false false

([0,3,2],1) -> [0,3,2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_snoc = \xs -> \n -> [0, S (S n), S n, n] in list_snoc) : NatList -> Nat -> NatList)
0.00518800000009 false false

([2,1],2) -> [2,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_snoc = \xs -> \n -> [n, 1, n] in list_snoc) : NatList -> Nat -> NatList)
0.00478399999997 false false

([],2) -> [2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_snoc = \xs -> \n -> [n] in list_snoc) : NatList -> Nat -> NatList)
0.0049570000001 false false

([1,0],1) -> [1,0,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_snoc = \xs -> \n -> [n, 0, n] in list_snoc) : NatList -> Nat -> NatList)
0.0042289999999 false false

([],2) -> [2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_snoc = \xs -> \n -> [n] in list_snoc) : NatList -> Nat -> NatList)
0.005672 false false

([0,0],3) -> [0,0,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_snoc = \xs -> \n -> [0, 0, n] in list_snoc) : NatList -> Nat -> NatList)
0.00404400000002 false false

([2,0,3],3) -> [2,0,3,3];
([0,2],2) -> [0,2,2];

=================================
NOSOL

([1,0],3) -> [1,0,3];
([],3) -> [3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons (#2.1 y1, list_snoc (#2.2 y1) n) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons (#2.1 y1, list_snoc (#2.2 y1) n) in list_snoc) : NatList -> Nat -> NatList)
0.0124719999999 true true

([],0) -> [0];
([0,0],1) -> [0,0,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons (0, list_snoc (#2.2 y1) n) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons (0, list_snoc (#2.2 y1) n) in list_snoc) : NatList -> Nat -> NatList)
0.011456 false false

([3],1) -> [3,1];
([0],3) -> [0,3];

=================================
NOSOL

([0,1,1],1) -> [0,1,1,1];
([3,3],3) -> [3,3,3];

=================================
NOSOL

([2,3,2],2) -> [2,3,2,2];
([2,1],1) -> [2,1,1];

=================================
NOSOL

([],3) -> [3];
([3,2,0],0) -> [3,2,0,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      [3, 2, 0, 0] in list_snoc) : NatList -> Nat -> NatList)
0.023567 false false

([2,1,2],1) -> [2,1,2,1];
([3,2],0) -> [3,2,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case n of
    Z y1 -> 
      [3, 2, 0]

    S y1 -> 
      [2, 1, S n, n] in list_snoc) : NatList -> Nat -> NatList)
0.011336 false false

([3],2) -> [3,2];
([],1) -> [1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      [S n, n] in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons (S n, list_snoc (#2.2 y1) n) in list_snoc) : NatList -> Nat -> NatList)
0.0111340000001 false false

([3,1,1],3) -> [3,1,1,3];
([],0) -> [0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons (#2.1 y1, list_snoc (#2.2 y1) n) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons (#2.1 y1, list_snoc (#2.2 y1) n) in list_snoc) : NatList -> Nat -> NatList)
0.0259169999999 true true

([3,3],1) -> [3,3,1];
([0],2) -> [0,2];
([1,3,1],3) -> [1,3,1,3];

=================================
NOSOL

([],2) -> [2];
([2,0,0],0) -> [2,0,0,0];
([3],0) -> [3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, Cons (0, #2.2 y1))) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.027411 false true

([3,0,2],1) -> [3,0,2,1];
([],1) -> [1];
([0,2],1) -> [0,2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0088780000001 true true

([],1) -> [1];
([2],3) -> [2,3];
([1],3) -> [1,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, [n])) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.018012 false true

([0],3) -> [0,3];
([2],3) -> [2,3];
([2,2,1],1) -> [2,2,1,1];

=================================
NOSOL

([],1) -> [1];
([0,2,3],3) -> [0,2,3,3];
([2,1,3],2) -> [2,1,3,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.016507 true true

([1],0) -> [1,0];
([3],2) -> [3,2];
([],3) -> [3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, [n])) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0137279999999 false true

([3,1],2) -> [3,1,2];
([],3) -> [3];
([3],0) -> [3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0174959999999 true true

([2],1) -> [2,1];
([],3) -> [3];
([2,2,2],0) -> [2,2,2,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.02522 true true

([0,3],0) -> [0,3,0];
([1],3) -> [1,3];
([3],1) -> [3,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case n of
    Z y1 -> 
      [0, 3, 0]

    S y1 -> 
      case y1 of
        Z y2 -> 
          [3, 1]

        S y2 -> 
          [1, S y1] in list_snoc) : NatList -> Nat -> NatList)
0.017689 false false

([2],0) -> [2,0];
([],3) -> [3];
([1,3,0],0) -> [1,3,0,0];
([1],3) -> [1,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.014009 true true

([3],1) -> [3,1];
([1,1,1],2) -> [1,1,1,2];
([],0) -> [0];
([1,2],2) -> [1,2,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0249899999999 true true

([1],0) -> [1,0];
([3,1,1],1) -> [3,1,1,1];
([3,3,1],0) -> [3,3,1,0];
([],2) -> [2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.032238 true true

([3,1],1) -> [3,1,1];
([1,0],2) -> [1,0,2];
([3,1],0) -> [3,1,0];
([2,0],3) -> [2,0,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> case n of
    Z y1 -> 
      [3, 1, 0]

    S y1 -> 
      case y1 of
        Z y2 -> 
          [3, 1, n]

        S y2 -> 
          [S y2, 0, n] in list_snoc) : NatList -> Nat -> NatList)
0.0173830000001 false false

([2,2,3],1) -> [2,2,3,1];
([0,3,1],2) -> [0,3,1,2];
([2,1,0],1) -> [2,1,0,1];
([1,1],2) -> [1,1,2];

=================================
NOSOL

([],3) -> [3];
([1],1) -> [1,1];
([1,0,1],0) -> [1,0,1,0];
([3,2],1) -> [3,2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0158429999999 true true

([1,1],2) -> [1,1,2];
([3],0) -> [3,0];
([0],0) -> [0,0];
([],1) -> [1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.011082 true true

([1,2,1],3) -> [1,2,1,3];
([],3) -> [3];
([],0) -> [0];
([1,2,2],2) -> [1,2,2,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0373070000001 true true

([],1) -> [1];
([2,3],3) -> [2,3,3];
([1],2) -> [1,2];
([2,0],0) -> [2,0,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, Cons (n, #2.2 y1))) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0192380000001 false true

([0],2) -> [0,2];
([2],0) -> [2,0];
([1,2],0) -> [1,2,0];
([],1) -> [1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.010689 true true

([1,3,3],0) -> [1,3,3,0];
([2],1) -> [2,1];
([2,2],3) -> [2,2,3];
([2],0) -> [2,0];
([2,2,2],2) -> [2,2,2,2];

=================================
NOSOL

([2,1,2],1) -> [2,1,2,1];
([],2) -> [2];
([],0) -> [0];
([1,1],0) -> [1,1,0];
([1,2],3) -> [1,2,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0182420000001 true true

([0,2],2) -> [0,2,2];
([1],0) -> [1,0];
([2,3,3],2) -> [2,3,3,2];
([1],2) -> [1,2];
([2,2],2) -> [2,2,2];

=================================
NOSOL

([3],2) -> [3,2];
([0],1) -> [0,1];
([3,0],1) -> [3,0,1];
([2,2],0) -> [2,2,0];
([0,3,3],2) -> [0,3,3,2];

=================================
NOSOL

([0,0,2],1) -> [0,0,2,1];
([3],1) -> [3,1];
([],3) -> [3];
([3],2) -> [3,2];
([2,1],2) -> [2,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.014666 true true

([0,3],3) -> [0,3,3];
([3,3,0],1) -> [3,3,0,1];
([1,1],3) -> [1,1,3];
([2],3) -> [2,3];
([],2) -> [2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.020921 true true

([1,3],3) -> [1,3,3];
([1,2],1) -> [1,2,1];
([3,1,2],0) -> [3,1,2,0];
([0,3],2) -> [0,3,2];
([],1) -> [1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0207310000001 true true

([3,2,3],0) -> [3,2,3,0];
([2],1) -> [2,1];
([],3) -> [3];
([1,0],3) -> [1,0,3];
([1,3],2) -> [1,3,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.016989 true true

([0,3,1],2) -> [0,3,1,2];
([1],2) -> [1,2];
([3,1,0],3) -> [3,1,0,3];
([1,3,0],2) -> [1,3,0,2];
([0,3,3],0) -> [0,3,3,0];

=================================
NOSOL

([2,0,3],0) -> [2,0,3,0];
([],3) -> [3];
([1],0) -> [1,0];
([3],0) -> [3,0];
([1],1) -> [1,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0206720000001 true true

([],1) -> [1];
([1,0],2) -> [1,0,2];
([1,3],2) -> [1,3,2];
([1,3],1) -> [1,3,1];
([],2) -> [2];
([0,2],0) -> [0,2,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.01413 true true

([3,0],3) -> [3,0,3];
([],3) -> [3];
([2],2) -> [2,2];
([0,2],3) -> [0,2,3];
([2,1,0],3) -> [2,1,0,3];
([3,1,1],2) -> [3,1,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0173130000001 true true

([2,3],1) -> [2,3,1];
([0],3) -> [0,3];
([0,2,3],3) -> [0,2,3,3];
([0,3,0],1) -> [0,3,0,1];
([3,1,0],2) -> [3,1,0,2];
([0,3],3) -> [0,3,3];

=================================
NOSOL

([3],3) -> [3,3];
([3,3],2) -> [3,3,2];
([1,3],3) -> [1,3,3];
([0],3) -> [0,3];
([2,3],0) -> [2,3,0];
([1],0) -> [1,0];

=================================
NOSOL

([1,1],3) -> [1,1,3];
([0,2],3) -> [0,2,3];
([0,1],0) -> [0,1,0];
([2],3) -> [2,3];
([],1) -> [1];
([3,3],0) -> [3,3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.018116 true true

([3,3,0],3) -> [3,3,0,3];
([0,2],1) -> [0,2,1];
([3],3) -> [3,3];
([],2) -> [2];
([3,0,2],1) -> [3,0,2,1];
([0],2) -> [0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0130039999999 true true

([0,1],2) -> [0,1,2];
([1],2) -> [1,2];
([],3) -> [3];
([2,3],0) -> [2,3,0];
([1,1,2],3) -> [1,1,2,3];
([1],1) -> [1,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.018444 true true

([0,2,2],2) -> [0,2,2,2];
([],3) -> [3];
([2,0,2],1) -> [2,0,2,1];
([1,2],2) -> [1,2,2];
([3,3,3],3) -> [3,3,3,3];
([],1) -> [1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.015269 true true

([],3) -> [3];
([2,3,2],2) -> [2,3,2,2];
([1,1,3],2) -> [1,1,3,2];
([3,0],0) -> [3,0,0];
([0,2,3],3) -> [0,2,3,3];
([1],0) -> [1,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0131080000001 true true

([1,2,2],0) -> [1,2,2,0];
([2],2) -> [2,2];
([0],1) -> [0,1];
([0,0,1],1) -> [0,0,1,1];
([2,1],0) -> [2,1,0];
([3,3,1],1) -> [3,3,1,1];

=================================
NOSOL

([2,0],0) -> [2,0,0];
([3,2],0) -> [3,2,0];
([0,2,2],2) -> [0,2,2,2];
([],0) -> [0];
([1,1,0],2) -> [1,1,0,2];
([],1) -> [1];
([],2) -> [2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0109319999999 true true

([3],0) -> [3,0];
([],2) -> [2];
([3,1],2) -> [3,1,2];
([2,2,0],0) -> [2,2,0,0];
([1],3) -> [1,3];
([3],2) -> [3,2];
([0,3,3],0) -> [0,3,3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0145319999999 true true

([2],2) -> [2,2];
([1,3],0) -> [1,3,0];
([1,0,0],1) -> [1,0,0,1];
([],1) -> [1];
([2],3) -> [2,3];
([3],3) -> [3,3];
([1],3) -> [1,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0199459999999 true true

([],2) -> [2];
([2,0],1) -> [2,0,1];
([2,0],2) -> [2,0,2];
([],0) -> [0];
([3,0],3) -> [3,0,3];
([3,3],0) -> [3,3,0];
([3,2],3) -> [3,2,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.016965 true true

([0],0) -> [0,0];
([1,3],1) -> [1,3,1];
([1],1) -> [1,1];
([2,3,2],3) -> [2,3,2,3];
([],3) -> [3];
([3],2) -> [3,2];
([],2) -> [2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0160189999999 true true

([3,0],3) -> [3,0,3];
([1,3],3) -> [1,3,3];
([0],2) -> [0,2];
([0],3) -> [0,3];
([2],1) -> [2,1];
([],1) -> [1];
([],2) -> [2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0142129999999 true true

([1,3],1) -> [1,3,1];
([1],3) -> [1,3];
([3,2,1],0) -> [3,2,1,0];
([],1) -> [1];
([1,3,2],1) -> [1,3,2,1];
([2],0) -> [2,0];
([3,1],0) -> [3,1,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.024551 true true

([0],3) -> [0,3];
([],3) -> [3];
([1,2,0],2) -> [1,2,0,2];
([0],0) -> [0,0];
([1],2) -> [1,2];
([],0) -> [0];
([2],3) -> [2,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0141140000001 true true

([2,3],2) -> [2,3,2];
([2,2,1],1) -> [2,2,1,1];
([1,1],3) -> [1,1,3];
([],0) -> [0];
([0,2,3],1) -> [0,2,3,1];
([0],2) -> [0,2];
([0,0,0],2) -> [0,0,0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.014907 true true

([],0) -> [0];
([0,0,1],2) -> [0,0,1,2];
([2,2],1) -> [2,2,1];
([2,0,2],0) -> [2,0,2,0];
([0,3,0],0) -> [0,3,0,0];
([],3) -> [3];
([2,2,1],1) -> [2,2,1,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.012291 true true

([2,0],3) -> [2,0,3];
([3,0],1) -> [3,0,1];
([],0) -> [0];
([0],1) -> [0,1];
([3,1],1) -> [3,1,1];
([1,1],0) -> [1,1,0];
([3,0,2],1) -> [3,0,2,1];
([3,3,1],3) -> [3,3,1,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.015733 true true

([0,1,2],2) -> [0,1,2,2];
([],0) -> [0];
([1],3) -> [1,3];
([2,0],2) -> [2,0,2];
([2,0,2],2) -> [2,0,2,2];
([3,1],2) -> [3,1,2];
([3],3) -> [3,3];
([1],2) -> [1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.017012 true true

([1],1) -> [1,1];
([],0) -> [0];
([],2) -> [2];
([2],3) -> [2,3];
([3,3,2],1) -> [3,3,2,1];
([],1) -> [1];
([3,0,0],0) -> [3,0,0,0];
([0,1],2) -> [0,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0124209999999 true true

([1],3) -> [1,3];
([1,1,1],1) -> [1,1,1,1];
([],0) -> [0];
([],3) -> [3];
([1,2],0) -> [1,2,0];
([2],0) -> [2,0];
([3,0],3) -> [3,0,3];
([0,3],3) -> [0,3,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.012966 true true

([1],3) -> [1,3];
([],2) -> [2];
([2,3],1) -> [2,3,1];
([0,1],2) -> [0,1,2];
([2,0],2) -> [2,0,2];
([0,1,1],1) -> [0,1,1,1];
([3],1) -> [3,1];
([0,0,3],3) -> [0,0,3,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.01559 true true

([3],1) -> [3,1];
([1,2],3) -> [1,2,3];
([2],3) -> [2,3];
([2,2],0) -> [2,2,0];
([],1) -> [1];
([1],3) -> [1,3];
([0,1],2) -> [0,1,2];
([1,3,3],0) -> [1,3,3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.021581 true true

([1],1) -> [1,1];
([2,2],0) -> [2,2,0];
([1,3],1) -> [1,3,1];
([0,2],3) -> [0,2,3];
([3,1,0],2) -> [3,1,0,2];
([0],2) -> [0,2];
([2,2,3],2) -> [2,2,3,2];
([],3) -> [3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.023915 true true

([0],3) -> [0,3];
([1,1,3],0) -> [1,1,3,0];
([3],3) -> [3,3];
([0,0],0) -> [0,0,0];
([0,3],1) -> [0,3,1];
([3],2) -> [3,2];
([1,2,2],3) -> [1,2,2,3];
([2,1],1) -> [2,1,1];

=================================
NOSOL

([1,0,3],1) -> [1,0,3,1];
([0],3) -> [0,3];
([1,1,1],2) -> [1,1,1,2];
([3],3) -> [3,3];
([3,3],2) -> [3,3,2];
([3],2) -> [3,2];
([2,0,0],0) -> [2,0,0,0];
([2,1],0) -> [2,1,0];

=================================
NOSOL

([2],3) -> [2,3];
([1,1,0],3) -> [1,1,0,3];
([2,1],0) -> [2,1,0];
([0],2) -> [0,2];
([0],1) -> [0,1];
([3,3,0],3) -> [3,3,0,3];
([1,3],2) -> [1,3,2];
([3,1],0) -> [3,1,0];

=================================
NOSOL

([0],3) -> [0,3];
([3],1) -> [3,1];
([2],0) -> [2,0];
([0,3],1) -> [0,3,1];
([],2) -> [2];
([3,0],3) -> [3,0,3];
([0,0,3],3) -> [0,0,3,3];
([3],2) -> [3,2];
([2,3],2) -> [2,3,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.014643 true true

([],0) -> [0];
([],3) -> [3];
([1,2,1],1) -> [1,2,1,1];
([0,1],2) -> [0,1,2];
([],2) -> [2];
([1,1],1) -> [1,1,1];
([],1) -> [1];
([3,3],1) -> [3,3,1];
([1],1) -> [1,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.015279 true true

([1,3],3) -> [1,3,3];
([0,2],2) -> [0,2,2];
([],1) -> [1];
([0,3,0],0) -> [0,3,0,0];
([1,0,3],1) -> [1,0,3,1];
([2],3) -> [2,3];
([2],2) -> [2,2];
([2,0],1) -> [2,0,1];
([1],0) -> [1,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0194280000001 true true

([2,1],0) -> [2,1,0];
([1],3) -> [1,3];
([],1) -> [1];
([3],0) -> [3,0];
([2,0,1],1) -> [2,0,1,1];
([1,3,3],2) -> [1,3,3,2];
([1,0,2],0) -> [1,0,2,0];
([2],2) -> [2,2];
([3,2,2],3) -> [3,2,2,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0251679999999 true true

([3,1,3],2) -> [3,1,3,2];
([1],3) -> [1,3];
([0,1],2) -> [0,1,2];
([2,3],0) -> [2,3,0];
([],2) -> [2];
([1,1],1) -> [1,1,1];
([1],1) -> [1,1];
([3,3],3) -> [3,3,3];
([],0) -> [0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.018186 true true

([0,0],1) -> [0,0,1];
([3,0,0],1) -> [3,0,0,1];
([],2) -> [2];
([1,3],2) -> [1,3,2];
([0],2) -> [0,2];
([0,1],2) -> [0,1,2];
([0],1) -> [0,1];
([],1) -> [1];
([3,3],0) -> [3,3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0136910000001 true true

([1,0],3) -> [1,0,3];
([1,1],1) -> [1,1,1];
([0,3,0],2) -> [0,3,0,2];
([3],0) -> [3,0];
([0,3,2],1) -> [0,3,2,1];
([3,0,2],3) -> [3,0,2,3];
([1,2,2],2) -> [1,2,2,2];
([0,2,2],0) -> [0,2,2,0];
([2,3,0],0) -> [2,3,0,0];

=================================
NOSOL

([3,1],0) -> [3,1,0];
([],2) -> [2];
([],3) -> [3];
([2,0,2],2) -> [2,0,2,2];
([1,0,3],0) -> [1,0,3,0];
([3],1) -> [3,1];
([2],3) -> [2,3];
([2],1) -> [2,1];
([1],2) -> [1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.02125 true true

([1],3) -> [1,3];
([1,2],0) -> [1,2,0];
([2,0,1],2) -> [2,0,1,2];
([2],2) -> [2,2];
([3,1],1) -> [3,1,1];
([0],3) -> [0,3];
([2,3],2) -> [2,3,2];
([2,0],2) -> [2,0,2];
([0,3],1) -> [0,3,1];

=================================
NOSOL

([1,1],3) -> [1,1,3];
([0],0) -> [0,0];
([1],0) -> [1,0];
([2,2],3) -> [2,2,3];
([2],0) -> [2,0];
([],2) -> [2];
([3],0) -> [3,0];
([2,1,3],1) -> [2,1,3,1];
([0,1],1) -> [0,1,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.015052 true true

([],1) -> [1];
([3],3) -> [3,3];
([3,3],3) -> [3,3,3];
([3,1],0) -> [3,1,0];
([0],2) -> [0,2];
([0,2],3) -> [0,2,3];
([2,2],2) -> [2,2,2];
([1,1],1) -> [1,1,1];
([1],3) -> [1,3];
([],2) -> [2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0311770000001 true true

([0,3,1],3) -> [0,3,1,3];
([1,2],3) -> [1,2,3];
([1],3) -> [1,3];
([2],0) -> [2,0];
([3,0,1],2) -> [3,0,1,2];
([1,0],0) -> [1,0,0];
([3,0,0],0) -> [3,0,0,0];
([],1) -> [1];
([0,3,0],2) -> [0,3,0,2];
([],3) -> [3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0166340000001 true true

([0,3],3) -> [0,3,3];
([1],3) -> [1,3];
([2],2) -> [2,2];
([0],0) -> [0,0];
([0,2],3) -> [0,2,3];
([],2) -> [2];
([0,2,2],1) -> [0,2,2,1];
([0],3) -> [0,3];
([3],2) -> [3,2];
([0],2) -> [0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.016134 true true

([0,0,1],2) -> [0,0,1,2];
([0,3,2],1) -> [0,3,2,1];
([],0) -> [0];
([3],2) -> [3,2];
([],1) -> [1];
([3,2,3],0) -> [3,2,3,0];
([1,1],3) -> [1,1,3];
([0,0],0) -> [0,0,0];
([],3) -> [3];
([1,1,0],1) -> [1,1,0,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0134929999999 true true

([2],1) -> [2,1];
([3,1,2],1) -> [3,1,2,1];
([3],1) -> [3,1];
([],1) -> [1];
([0],1) -> [0,1];
([0,1],0) -> [0,1,0];
([],3) -> [3];
([1,1],1) -> [1,1,1];
([1],1) -> [1,1];
([0],3) -> [0,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.02 true true

([3],2) -> [3,2];
([0,1],0) -> [0,1,0];
([],1) -> [1];
([0,1,1],0) -> [0,1,1,0];
([0],3) -> [0,3];
([3,3],1) -> [3,3,1];
([],2) -> [2];
([0,1,3],2) -> [0,1,3,2];
([3,3],0) -> [3,3,0];
([],3) -> [3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.02091 true true

([3,0],3) -> [3,0,3];
([],1) -> [1];
([2],2) -> [2,2];
([],3) -> [3];
([3,0,0],2) -> [3,0,0,2];
([0],1) -> [0,1];
([0],2) -> [0,2];
([2,2],3) -> [2,2,3];
([0,0],0) -> [0,0,0];
([3],1) -> [3,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0194759999999 true true

([3,3,1],1) -> [3,3,1,1];
([1,0,0],1) -> [1,0,0,1];
([2,2,0],0) -> [2,2,0,0];
([],1) -> [1];
([3,1],1) -> [3,1,1];
([0],1) -> [0,1];
([1,0],1) -> [1,0,1];
([1,0,2],3) -> [1,0,2,3];
([2],0) -> [2,0];
([1,2],0) -> [1,2,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.016419 true true

([2,0,2],2) -> [2,0,2,2];
([2,3,1],1) -> [2,3,1,1];
([],0) -> [0];
([1,3,3],2) -> [1,3,3,2];
([1],1) -> [1,1];
([],3) -> [3];
([1,0],2) -> [1,0,2];
([1,3,1],2) -> [1,3,1,2];
([],1) -> [1];
([2,3],1) -> [2,3,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0194939999999 true true

([],2) -> [2];
([3],2) -> [3,2];
([],1) -> [1];
([3,2,2],1) -> [3,2,2,1];
([2],0) -> [2,0];
([3,3],1) -> [3,3,1];
([1],1) -> [1,1];
([2],3) -> [2,3];
([3],1) -> [3,1];
([0,3],2) -> [0,3,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.014774 true true

([1,0],1) -> [1,0,1];
([3,3],0) -> [3,3,0];
([0,2],1) -> [0,2,1];
([1,2,0],3) -> [1,2,0,3];
([2,3],0) -> [2,3,0];
([],3) -> [3];
([3,3],3) -> [3,3,3];
([3],3) -> [3,3];
([0],3) -> [0,3];
([3,3,1],0) -> [3,3,1,0];
([0],2) -> [0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0175079999999 true true

([0],1) -> [0,1];
([2,1],1) -> [2,1,1];
([1,1,0],1) -> [1,1,0,1];
([3,3],2) -> [3,3,2];
([1,2],1) -> [1,2,1];
([3],1) -> [3,1];
([3],0) -> [3,0];
([],2) -> [2];
([0,2],2) -> [0,2,2];
([0],3) -> [0,3];
([1],1) -> [1,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.016091 true true

([3],3) -> [3,3];
([],0) -> [0];
([],2) -> [2];
([2,1],3) -> [2,1,3];
([0],0) -> [0,0];
([0],2) -> [0,2];
([0,2],0) -> [0,2,0];
([1,3,1],0) -> [1,3,1,0];
([3,0,3],1) -> [3,0,3,1];
([],3) -> [3];
([2],3) -> [2,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0136689999999 true true

([3],3) -> [3,3];
([1],0) -> [1,0];
([3,1],0) -> [3,1,0];
([3],1) -> [3,1];
([3],2) -> [3,2];
([0],1) -> [0,1];
([0,0],3) -> [0,0,3];
([2,2,1],2) -> [2,2,1,2];
([1,3,2],2) -> [1,3,2,2];
([3,2,3],1) -> [3,2,3,1];
([3,3],0) -> [3,3,0];

=================================
NOSOL

([],2) -> [2];
([0,2],0) -> [0,2,0];
([0],0) -> [0,0];
([],0) -> [0];
([0,0],1) -> [0,0,1];
([],3) -> [3];
([3],3) -> [3,3];
([2,1],2) -> [2,1,2];
([0,3,2],2) -> [0,3,2,2];
([2,2],2) -> [2,2,2];
([0,2,2],3) -> [0,2,2,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0152639999999 true true

([0],2) -> [0,2];
([2,1],1) -> [2,1,1];
([0,1,0],2) -> [0,1,0,2];
([],2) -> [2];
([3,3],2) -> [3,3,2];
([3,2],3) -> [3,2,3];
([3,3,3],3) -> [3,3,3,3];
([0,3,1],2) -> [0,3,1,2];
([],3) -> [3];
([2,3,0],1) -> [2,3,0,1];
([3],3) -> [3,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.031741 true true

([2],1) -> [2,1];
([2,2,3],2) -> [2,2,3,2];
([2,2],1) -> [2,2,1];
([2],2) -> [2,2];
([],1) -> [1];
([],0) -> [0];
([3,3,0],1) -> [3,3,0,1];
([2,1],0) -> [2,1,0];
([3,3,2],2) -> [3,3,2,2];
([3,2,2],2) -> [3,2,2,2];
([],2) -> [2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0244299999999 true true

([3,3,3],3) -> [3,3,3,3];
([],1) -> [1];
([0,0],2) -> [0,0,2];
([3,1],2) -> [3,1,2];
([3,1],1) -> [3,1,1];
([0,1,1],0) -> [0,1,1,0];
([],0) -> [0];
([0,1],3) -> [0,1,3];
([1],2) -> [1,2];
([2],2) -> [2,2];
([3],3) -> [3,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0143579999999 true true

([],3) -> [3];
([2,3,3],2) -> [2,3,3,2];
([],0) -> [0];
([3],3) -> [3,3];
([3],2) -> [3,2];
([],1) -> [1];
([0,2,2],2) -> [0,2,2,2];
([],2) -> [2];
([2,2,1],1) -> [2,2,1,1];
([2,3,2],0) -> [2,3,2,0];
([2,2,0],1) -> [2,2,0,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.020354 true true

([2],0) -> [2,0];
([],2) -> [2];
([],3) -> [3];
([1,0],1) -> [1,0,1];
([2,3,3],0) -> [2,3,3,0];
([1,1],2) -> [1,1,2];
([3,1,3],1) -> [3,1,3,1];
([1],0) -> [1,0];
([3,2,3],1) -> [3,2,3,1];
([2],3) -> [2,3];
([2],1) -> [2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0286739999999 true true

([2],0) -> [2,0];
([1,0],2) -> [1,0,2];
([1,0,0],3) -> [1,0,0,3];
([],0) -> [0];
([0,1,3],2) -> [0,1,3,2];
([1,3],0) -> [1,3,0];
([2],2) -> [2,2];
([2,1],3) -> [2,1,3];
([],1) -> [1];
([1,2,2],2) -> [1,2,2,2];
([0,3],1) -> [0,3,1];
([3,0,3],1) -> [3,0,3,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.015296 true true

([3,2,3],2) -> [3,2,3,2];
([3,1,2],3) -> [3,1,2,3];
([0],3) -> [0,3];
([],2) -> [2];
([2,3,0],2) -> [2,3,0,2];
([1],0) -> [1,0];
([2,0,3],2) -> [2,0,3,2];
([2,0,0],3) -> [2,0,0,3];
([0,2],0) -> [0,2,0];
([1,2],3) -> [1,2,3];
([],1) -> [1];
([0],0) -> [0,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.017701 true true

([2,3],2) -> [2,3,2];
([],2) -> [2];
([3,1],1) -> [3,1,1];
([0],3) -> [0,3];
([],0) -> [0];
([],1) -> [1];
([3],0) -> [3,0];
([0,3],0) -> [0,3,0];
([1],1) -> [1,1];
([3],1) -> [3,1];
([2,3,3],3) -> [2,3,3,3];
([2],0) -> [2,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0139590000001 true true

([],2) -> [2];
([0,1,3],3) -> [0,1,3,3];
([2,1],1) -> [2,1,1];
([3],2) -> [3,2];
([0],0) -> [0,0];
([2,0],3) -> [2,0,3];
([],1) -> [1];
([3,0],1) -> [3,0,1];
([1],1) -> [1,1];
([],0) -> [0];
([3,0,1],3) -> [3,0,1,3];
([2,1,2],2) -> [2,1,2,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.014355 true true

([3,0,0],1) -> [3,0,0,1];
([],0) -> [0];
([1],3) -> [1,3];
([0,2],1) -> [0,2,1];
([],3) -> [3];
([3,1,0],0) -> [3,1,0,0];
([2,3],3) -> [2,3,3];
([1,0,0],0) -> [1,0,0,0];
([0,0],1) -> [0,0,1];
([2],3) -> [2,3];
([2,2],1) -> [2,2,1];
([0],0) -> [0,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.016032 true true

([2,0,1],2) -> [2,0,1,2];
([0,1],3) -> [0,1,3];
([],1) -> [1];
([1,2],1) -> [1,2,1];
([1],3) -> [1,3];
([3,2,0],0) -> [3,2,0,0];
([3,1,0],1) -> [3,1,0,1];
([1,0,3],1) -> [1,0,3,1];
([0,2],3) -> [0,2,3];
([0,1,3],1) -> [0,1,3,1];
([1,3,3],2) -> [1,3,3,2];
([2,0],2) -> [2,0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.018908 true true

([1,2,3],1) -> [1,2,3,1];
([3,2],2) -> [3,2,2];
([0],3) -> [0,3];
([0,3,3],3) -> [0,3,3,3];
([],3) -> [3];
([0,0],1) -> [0,0,1];
([],2) -> [2];
([2,2,2],2) -> [2,2,2,2];
([1,0],0) -> [1,0,0];
([1,1,2],1) -> [1,1,2,1];
([1],3) -> [1,3];
([2,0],0) -> [2,0,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0189310000001 true true

([],0) -> [0];
([0,2,0],3) -> [0,2,0,3];
([0],0) -> [0,0];
([0],3) -> [0,3];
([1,1],1) -> [1,1,1];
([2],0) -> [2,0];
([3,3,0],3) -> [3,3,0,3];
([1],0) -> [1,0];
([1,2,3],1) -> [1,2,3,1];
([2,3,0],2) -> [2,3,0,2];
([1],1) -> [1,1];
([2,1,2],0) -> [2,1,2,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0173709999999 true true

([0,2,2],0) -> [0,2,2,0];
([],2) -> [2];
([1,3],1) -> [1,3,1];
([1,2,2],2) -> [1,2,2,2];
([0],2) -> [0,2];
([1,0],0) -> [1,0,0];
([3],3) -> [3,3];
([1,0],2) -> [1,0,2];
([],1) -> [1];
([3,2],0) -> [3,2,0];
([2,3,2],0) -> [2,3,2,0];
([1],2) -> [1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0223000000001 true true

([1],0) -> [1,0];
([],0) -> [0];
([1,3],0) -> [1,3,0];
([],2) -> [2];
([],1) -> [1];
([3],1) -> [3,1];
([0,3],3) -> [0,3,3];
([2,2],2) -> [2,2,2];
([2,1],1) -> [2,1,1];
([2,1],3) -> [2,1,3];
([2,2],1) -> [2,2,1];
([],3) -> [3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.015069 true true

([],3) -> [3];
([2,2,2],0) -> [2,2,2,0];
([1,2,0],1) -> [1,2,0,1];
([1,0],3) -> [1,0,3];
([1],2) -> [1,2];
([2,0],0) -> [2,0,0];
([],1) -> [1];
([3],0) -> [3,0];
([0],0) -> [0,0];
([2,0],3) -> [2,0,3];
([1,0,3],1) -> [1,0,3,1];
([2],2) -> [2,2];
([0,0],0) -> [0,0,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.017431 true true

([1],2) -> [1,2];
([],3) -> [3];
([3,3],0) -> [3,3,0];
([1,0,0],1) -> [1,0,0,1];
([2],1) -> [2,1];
([],0) -> [0];
([0,1,3],3) -> [0,1,3,3];
([0],2) -> [0,2];
([2],2) -> [2,2];
([1,3],2) -> [1,3,2];
([2,2],0) -> [2,2,0];
([1,3,3],2) -> [1,3,3,2];
([3,1,3],2) -> [3,1,3,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0154070000001 true true

([3],3) -> [3,3];
([0],0) -> [0,0];
([],3) -> [3];
([1,3],2) -> [1,3,2];
([1],1) -> [1,1];
([],2) -> [2];
([3,2,1],2) -> [3,2,1,2];
([3,2,3],2) -> [3,2,3,2];
([],1) -> [1];
([3,3,3],3) -> [3,3,3,3];
([3,2,3],0) -> [3,2,3,0];
([3,3],3) -> [3,3,3];
([2],3) -> [2,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.019059 true true

([1],3) -> [1,3];
([3],0) -> [3,0];
([],0) -> [0];
([],1) -> [1];
([],3) -> [3];
([3],2) -> [3,2];
([0,2],3) -> [0,2,3];
([3,0,1],0) -> [3,0,1,0];
([1],0) -> [1,0];
([2],3) -> [2,3];
([2,0,0],0) -> [2,0,0,0];
([0,1,3],3) -> [0,1,3,3];
([2,3],3) -> [2,3,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.017028 true true

([3],2) -> [3,2];
([3],3) -> [3,3];
([],0) -> [0];
([3,3,0],1) -> [3,3,0,1];
([0],0) -> [0,0];
([0,3,0],2) -> [0,3,0,2];
([3,3,1],3) -> [3,3,1,3];
([1,0],0) -> [1,0,0];
([2,3,0],1) -> [2,3,0,1];
([2,2],0) -> [2,2,0];
([2,1],1) -> [2,1,1];
([1,1],2) -> [1,1,2];
([1,0,0],2) -> [1,0,0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0200380000001 true true

([2,2,0],1) -> [2,2,0,1];
([2],1) -> [2,1];
([0,0],1) -> [0,0,1];
([0],3) -> [0,3];
([2],0) -> [2,0];
([2],3) -> [2,3];
([0,1,2],2) -> [0,1,2,2];
([2,0],2) -> [2,0,2];
([0],0) -> [0,0];
([1,1,2],1) -> [1,1,2,1];
([2,1,3],1) -> [2,1,3,1];
([2,0,0],1) -> [2,0,0,1];
([1,2],3) -> [1,2,3];

=================================
NOSOL

([2,0],3) -> [2,0,3];
([0,1],2) -> [0,1,2];
([],0) -> [0];
([2,3],1) -> [2,3,1];
([1,2,0],1) -> [1,2,0,1];
([0],0) -> [0,0];
([],2) -> [2];
([3],2) -> [3,2];
([3,0,2],0) -> [3,0,2,0];
([],3) -> [3];
([1,1,1],2) -> [1,1,1,2];
([1,3,1],0) -> [1,3,1,0];
([1,0],2) -> [1,0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.016922 true true

([],3) -> [3];
([],2) -> [2];
([0,1,0],1) -> [0,1,0,1];
([0,2],3) -> [0,2,3];
([3],1) -> [3,1];
([2],3) -> [2,3];
([0,2,1],3) -> [0,2,1,3];
([2,1],3) -> [2,1,3];
([0,2],0) -> [0,2,0];
([],0) -> [0];
([1,3,2],1) -> [1,3,2,1];
([1,2],0) -> [1,2,0];
([0],1) -> [0,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0231080000001 true true

([1],1) -> [1,1];
([1,1],2) -> [1,1,2];
([2],0) -> [2,0];
([0],2) -> [0,2];
([1,0,0],0) -> [1,0,0,0];
([],2) -> [2];
([2,0],2) -> [2,0,2];
([3,2],3) -> [3,2,3];
([1,0],3) -> [1,0,3];
([2,3,0],2) -> [2,3,0,2];
([1,0,0],1) -> [1,0,0,1];
([],1) -> [1];
([0,2,2],1) -> [0,2,2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0215539999999 true true

([3,3,3],3) -> [3,3,3,3];
([1,2,1],3) -> [1,2,1,3];
([0,1,0],3) -> [0,1,0,3];
([],1) -> [1];
([1,1],0) -> [1,1,0];
([1,3,2],0) -> [1,3,2,0];
([0],0) -> [0,0];
([1,0],0) -> [1,0,0];
([],3) -> [3];
([2,3,0],2) -> [2,3,0,2];
([],2) -> [2];
([1,0,1],3) -> [1,0,1,3];
([2,2,2],1) -> [2,2,2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.018282 true true

([1,2],1) -> [1,2,1];
([1],2) -> [1,2];
([0,1],2) -> [0,1,2];
([3,3],3) -> [3,3,3];
([2,1],0) -> [2,1,0];
([1],0) -> [1,0];
([2],0) -> [2,0];
([2,2],0) -> [2,2,0];
([],0) -> [0];
([2,0],2) -> [2,0,2];
([],1) -> [1];
([3],2) -> [3,2];
([3,3,1],2) -> [3,3,1,2];
([3,1],2) -> [3,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0169169999999 true true

([1],1) -> [1,1];
([],0) -> [0];
([],3) -> [3];
([3,0,0],3) -> [3,0,0,3];
([],2) -> [2];
([1,3,0],1) -> [1,3,0,1];
([2,2],3) -> [2,2,3];
([3,1],2) -> [3,1,2];
([3,0],2) -> [3,0,2];
([1],0) -> [1,0];
([0,2],1) -> [0,2,1];
([2,1,3],0) -> [2,1,3,0];
([3,0],3) -> [3,0,3];
([],1) -> [1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0175730000001 true true

([0],3) -> [0,3];
([3],2) -> [3,2];
([2,2,0],1) -> [2,2,0,1];
([3,2],0) -> [3,2,0];
([2,0],2) -> [2,0,2];
([1,2,0],0) -> [1,2,0,0];
([1],0) -> [1,0];
([3],0) -> [3,0];
([3,0],2) -> [3,0,2];
([2,1,3],1) -> [2,1,3,1];
([3,3,1],0) -> [3,3,1,0];
([3,1,3],2) -> [3,1,3,2];
([],1) -> [1];
([0,3],2) -> [0,3,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.019665 true true

([0,1,2],0) -> [0,1,2,0];
([3,3,0],0) -> [3,3,0,0];
([1,1,3],1) -> [1,1,3,1];
([0,3],1) -> [0,3,1];
([3],1) -> [3,1];
([1,0],0) -> [1,0,0];
([3,1],2) -> [3,1,2];
([1,3,0],3) -> [1,3,0,3];
([],0) -> [0];
([],3) -> [3];
([3,0],3) -> [3,0,3];
([0,3,0],3) -> [0,3,0,3];
([0,3,2],0) -> [0,3,2,0];
([1,0],1) -> [1,0,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.01704 true true

([3],3) -> [3,3];
([0],0) -> [0,0];
([],3) -> [3];
([3,0],1) -> [3,0,1];
([2,3,0],2) -> [2,3,0,2];
([0,3],1) -> [0,3,1];
([1],3) -> [1,3];
([3,2],2) -> [3,2,2];
([2,3,2],1) -> [2,3,2,1];
([1],2) -> [1,2];
([],1) -> [1];
([1],0) -> [1,0];
([1,2],3) -> [1,2,3];
([3],1) -> [3,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0205719999999 true true

([2,2],0) -> [2,2,0];
([1],1) -> [1,1];
([],0) -> [0];
([0],3) -> [0,3];
([0,3],3) -> [0,3,3];
([],2) -> [2];
([2,3,2],3) -> [2,3,2,3];
([3,3],2) -> [3,3,2];
([0],0) -> [0,0];
([1,2,3],0) -> [1,2,3,0];
([1,3],3) -> [1,3,3];
([3,0,2],1) -> [3,0,2,1];
([1,0,0],3) -> [1,0,0,3];
([],1) -> [1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0170370000001 true true

([3],3) -> [3,3];
([],3) -> [3];
([0,3,3],3) -> [0,3,3,3];
([],0) -> [0];
([0,1],2) -> [0,1,2];
([],1) -> [1];
([3,2,0],2) -> [3,2,0,2];
([0,0,2],3) -> [0,0,2,3];
([0,2],1) -> [0,2,1];
([3,0],3) -> [3,0,3];
([3],1) -> [3,1];
([3,0,0],0) -> [3,0,0,0];
([1],2) -> [1,2];
([1,3,2],1) -> [1,3,2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.031264 true true

([0],2) -> [0,2];
([0,1,3],2) -> [0,1,3,2];
([1],1) -> [1,1];
([3,3],1) -> [3,3,1];
([0,1,0],0) -> [0,1,0,0];
([],0) -> [0];
([0],1) -> [0,1];
([2],2) -> [2,2];
([2],0) -> [2,0];
([],3) -> [3];
([0,0,2],3) -> [0,0,2,3];
([2,3,3],1) -> [2,3,3,1];
([3,2],1) -> [3,2,1];
([0,3],0) -> [0,3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.017742 true true

([],0) -> [0];
([2,2,1],3) -> [2,2,1,3];
([0],1) -> [0,1];
([0,1,2],3) -> [0,1,2,3];
([0,3,2],2) -> [0,3,2,2];
([],2) -> [2];
([],1) -> [1];
([1],3) -> [1,3];
([1,3,3],3) -> [1,3,3,3];
([3,3],3) -> [3,3,3];
([0,0],1) -> [0,0,1];
([3],0) -> [3,0];
([1,2,0],3) -> [1,2,0,3];
([0,2,1],2) -> [0,2,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.017685 true true

([3,3],2) -> [3,3,2];
([0,3],3) -> [0,3,3];
([2,1],2) -> [2,1,2];
([],0) -> [0];
([1,3,1],0) -> [1,3,1,0];
([2,2],3) -> [2,2,3];
([],3) -> [3];
([0],2) -> [0,2];
([1,2],1) -> [1,2,1];
([0],0) -> [0,0];
([],2) -> [2];
([0],3) -> [0,3];
([1,3,3],1) -> [1,3,3,1];
([0,1],2) -> [0,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0201099999999 true true

([1],2) -> [1,2];
([0,1],1) -> [0,1,1];
([2],3) -> [2,3];
([2],1) -> [2,1];
([3,2],3) -> [3,2,3];
([],1) -> [1];
([3,3,2],0) -> [3,3,2,0];
([0,3],1) -> [0,3,1];
([3,0],0) -> [3,0,0];
([2,0],3) -> [2,0,3];
([],2) -> [2];
([3,1,0],1) -> [3,1,0,1];
([0],0) -> [0,0];
([3],0) -> [3,0];
([2],0) -> [2,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.018067 true true

([],2) -> [2];
([],1) -> [1];
([],0) -> [0];
([],3) -> [3];
([0,1],0) -> [0,1,0];
([2,3,3],2) -> [2,3,3,2];
([2],1) -> [2,1];
([2,1,1],0) -> [2,1,1,0];
([1,0,0],1) -> [1,0,0,1];
([3,1,1],2) -> [3,1,1,2];
([2,3,2],2) -> [2,3,2,2];
([3,3],0) -> [3,3,0];
([1,0,0],3) -> [1,0,0,3];
([0,2],2) -> [0,2,2];
([2,3,2],3) -> [2,3,2,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.018587 true true

([1,2],2) -> [1,2,2];
([3,2],3) -> [3,2,3];
([2],3) -> [2,3];
([1,3],1) -> [1,3,1];
([1],0) -> [1,0];
([3,3],0) -> [3,3,0];
([3,0],3) -> [3,0,3];
([2],1) -> [2,1];
([1,1],3) -> [1,1,3];
([],2) -> [2];
([2],2) -> [2,2];
([1,2,2],1) -> [1,2,2,1];
([],3) -> [3];
([1],3) -> [1,3];
([0,0],0) -> [0,0,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.020677 true true

([],1) -> [1];
([1],2) -> [1,2];
([],0) -> [0];
([1,3,3],2) -> [1,3,3,2];
([3,2],1) -> [3,2,1];
([],3) -> [3];
([1],3) -> [1,3];
([2,3,1],1) -> [2,3,1,1];
([1],1) -> [1,1];
([3],0) -> [3,0];
([2,1],2) -> [2,1,2];
([1,3],0) -> [1,3,0];
([0,2],2) -> [0,2,2];
([0,1,0],0) -> [0,1,0,0];
([2,0,2],0) -> [2,0,2,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0177699999999 true true

([2],2) -> [2,2];
([],2) -> [2];
([1,3],3) -> [1,3,3];
([3],0) -> [3,0];
([3,2],3) -> [3,2,3];
([0,2],2) -> [0,2,2];
([1,3,2],0) -> [1,3,2,0];
([3,0],0) -> [3,0,0];
([2],1) -> [2,1];
([3,1],2) -> [3,1,2];
([1,3],0) -> [1,3,0];
([2,0],3) -> [2,0,3];
([3,2],2) -> [3,2,2];
([],0) -> [0];
([2,0,0],1) -> [2,0,0,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0171869999999 true true

([0,1,1],3) -> [0,1,1,3];
([],2) -> [2];
([3,1,3],0) -> [3,1,3,0];
([0,2,2],0) -> [0,2,2,0];
([2],3) -> [2,3];
([],0) -> [0];
([3,3],1) -> [3,3,1];
([3,1,3],3) -> [3,1,3,3];
([2,3],0) -> [2,3,0];
([1,1,3],2) -> [1,1,3,2];
([],3) -> [3];
([3],3) -> [3,3];
([1],3) -> [1,3];
([2],1) -> [2,1];
([1,1,3],0) -> [1,1,3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0270410000001 true true

([2,2],0) -> [2,2,0];
([],2) -> [2];
([3,0,0],1) -> [3,0,0,1];
([0,3,3],0) -> [0,3,3,0];
([3,3,2],2) -> [3,3,2,2];
([0,0,0],0) -> [0,0,0,0];
([0],0) -> [0,0];
([],3) -> [3];
([1],3) -> [1,3];
([3,1],1) -> [3,1,1];
([3,3,2],3) -> [3,3,2,3];
([0,2,0],2) -> [0,2,0,2];
([1,0],2) -> [1,0,2];
([3,2],1) -> [3,2,1];
([],1) -> [1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.021444 true true

([3,3],2) -> [3,3,2];
([2,2,0],0) -> [2,2,0,0];
([2],3) -> [2,3];
([],0) -> [0];
([],1) -> [1];
([0,1,3],1) -> [0,1,3,1];
([],2) -> [2];
([3],3) -> [3,3];
([2],2) -> [2,2];
([1],1) -> [1,1];
([1,3,3],1) -> [1,3,3,1];
([],3) -> [3];
([0,3,2],1) -> [0,3,2,1];
([3,3,0],0) -> [3,3,0,0];
([1,3,1],3) -> [1,3,1,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0282340000001 true true

([],2) -> [2];
([1,0,3],1) -> [1,0,3,1];
([1,3],2) -> [1,3,2];
([1,1],2) -> [1,1,2];
([],3) -> [3];
([],0) -> [0];
([2,2],1) -> [2,2,1];
([],1) -> [1];
([1,0,0],3) -> [1,0,0,3];
([2,1,3],0) -> [2,1,3,0];
([0,3,3],3) -> [0,3,3,3];
([2,3],1) -> [2,3,1];
([2,2],3) -> [2,2,3];
([1],0) -> [1,0];
([1,0,1],0) -> [1,0,1,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0184850000001 true true

([],0) -> [0];
([],1) -> [1];
([1,3,3],2) -> [1,3,3,2];
([],2) -> [2];
([],3) -> [3];
([3,3],3) -> [3,3,3];
([0],0) -> [0,0];
([2],1) -> [2,1];
([2,3],0) -> [2,3,0];
([3,3,3],1) -> [3,3,3,1];
([3,3,3],0) -> [3,3,3,0];
([0,0,3],3) -> [0,0,3,3];
([1,3,0],0) -> [1,3,0,0];
([3,2],2) -> [3,2,2];
([2,1],2) -> [2,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0248140000001 true true

([1],2) -> [1,2];
([],0) -> [0];
([0,3,2],1) -> [0,3,2,1];
([3],1) -> [3,1];
([0,1,0],3) -> [0,1,0,3];
([],3) -> [3];
([0,2],1) -> [0,2,1];
([3,1,0],3) -> [3,1,0,3];
([3,3,2],1) -> [3,3,2,1];
([],2) -> [2];
([3,3],2) -> [3,3,2];
([0],1) -> [0,1];
([1,3],3) -> [1,3,3];
([0,2,1],3) -> [0,2,1,3];
([1],3) -> [1,3];
([],1) -> [1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0246509999999 true true

([1,3],1) -> [1,3,1];
([0,0,3],1) -> [0,0,3,1];
([],1) -> [1];
([1,3],3) -> [1,3,3];
([],2) -> [2];
([0],0) -> [0,0];
([0,2,0],0) -> [0,2,0,0];
([],3) -> [3];
([1,0,0],2) -> [1,0,0,2];
([0],2) -> [0,2];
([3,3,0],0) -> [3,3,0,0];
([1],0) -> [1,0];
([3],3) -> [3,3];
([2,2],0) -> [2,2,0];
([2,3,2],0) -> [2,3,2,0];
([2,3,0],1) -> [2,3,0,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.021512 true true

([3],2) -> [3,2];
([1],1) -> [1,1];
([0,1],2) -> [0,1,2];
([0],0) -> [0,0];
([0,1,1],0) -> [0,1,1,0];
([1],3) -> [1,3];
([3,3,2],0) -> [3,3,2,0];
([],0) -> [0];
([1,1],1) -> [1,1,1];
([],1) -> [1];
([],2) -> [2];
([0,2],0) -> [0,2,0];
([1],2) -> [1,2];
([2],3) -> [2,3];
([0,2,2],1) -> [0,2,2,1];
([1,3],0) -> [1,3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.017574 true true

([],1) -> [1];
([3,0,0],3) -> [3,0,0,3];
([1,2],3) -> [1,2,3];
([1],2) -> [1,2];
([],3) -> [3];
([2],1) -> [2,1];
([0],2) -> [0,2];
([0,1],2) -> [0,1,2];
([],2) -> [2];
([3,0,1],3) -> [3,0,1,3];
([2,1],2) -> [2,1,2];
([0,3],3) -> [0,3,3];
([2,3,1],2) -> [2,3,1,2];
([2,3],0) -> [2,3,0];
([2,3,3],3) -> [2,3,3,3];
([2,3,0],0) -> [2,3,0,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0223149999999 true true

([3],3) -> [3,3];
([2,1,2],0) -> [2,1,2,0];
([],1) -> [1];
([2,3],0) -> [2,3,0];
([2,0,1],3) -> [2,0,1,3];
([],0) -> [0];
([0,3],3) -> [0,3,3];
([],2) -> [2];
([1],3) -> [1,3];
([2,2,3],3) -> [2,2,3,3];
([],3) -> [3];
([3,3,3],2) -> [3,3,3,2];
([3],0) -> [3,0];
([3,1,2],2) -> [3,1,2,2];
([0,3,1],1) -> [0,3,1,1];
([0],2) -> [0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.019194 true true

([1,0,0],0) -> [1,0,0,0];
([2,3,2],2) -> [2,3,2,2];
([2],2) -> [2,2];
([3,2,1],0) -> [3,2,1,0];
([3],3) -> [3,3];
([3,2,0],2) -> [3,2,0,2];
([0,1],1) -> [0,1,1];
([3,0,2],1) -> [3,0,2,1];
([0],1) -> [0,1];
([1,3,2],2) -> [1,3,2,2];
([3,1],0) -> [3,1,0];
([],1) -> [1];
([2,3,1],0) -> [2,3,1,0];
([0,0],0) -> [0,0,0];
([2,0],3) -> [2,0,3];
([],3) -> [3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.024631 true true

([],2) -> [2];
([],3) -> [3];
([3,2,3],1) -> [3,2,3,1];
([],1) -> [1];
([2],2) -> [2,2];
([1,3,0],0) -> [1,3,0,0];
([0,1,2],2) -> [0,1,2,2];
([3],1) -> [3,1];
([2,1,1],3) -> [2,1,1,3];
([3],0) -> [3,0];
([0,2,1],2) -> [0,2,1,2];
([1],2) -> [1,2];
([0,0,1],1) -> [0,0,1,1];
([1,2],1) -> [1,2,1];
([0,0,0],1) -> [0,0,0,1];
([2],1) -> [2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0208749999999 true true

([],1) -> [1];
([0,2,0],2) -> [0,2,0,2];
([1],1) -> [1,1];
([0,3,0],2) -> [0,3,0,2];
([0,0],0) -> [0,0,0];
([3,2],2) -> [3,2,2];
([],3) -> [3];
([],2) -> [2];
([3,2],1) -> [3,2,1];
([2],3) -> [2,3];
([2,1,0],2) -> [2,1,0,2];
([3],3) -> [3,3];
([3],1) -> [3,1];
([1,0,1],0) -> [1,0,1,0];
([0],0) -> [0,0];
([0,3,1],3) -> [0,3,1,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.020622 true true

([],1) -> [1];
([3,1,2],1) -> [3,1,2,1];
([0],1) -> [0,1];
([1,2,2],1) -> [1,2,2,1];
([1],3) -> [1,3];
([0,1],0) -> [0,1,0];
([2],3) -> [2,3];
([],0) -> [0];
([2,3],3) -> [2,3,3];
([3,0],0) -> [3,0,0];
([0,3],1) -> [0,3,1];
([],3) -> [3];
([3,1,2],2) -> [3,1,2,2];
([],2) -> [2];
([3,3],0) -> [3,3,0];
([0,2],0) -> [0,2,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0181580000001 true true

([2],1) -> [2,1];
([],2) -> [2];
([2,0,0],3) -> [2,0,0,3];
([],1) -> [1];
([2],3) -> [2,3];
([3,2,2],2) -> [3,2,2,2];
([2],2) -> [2,2];
([0,3,3],3) -> [0,3,3,3];
([0,2,3],3) -> [0,2,3,3];
([],0) -> [0];
([0],2) -> [0,2];
([3,3,2],1) -> [3,3,2,1];
([3,2,3],0) -> [3,2,3,0];
([2,0,1],0) -> [2,0,1,0];
([2,1],0) -> [2,1,0];
([3,2,1],3) -> [3,2,1,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0187530000001 true true

([],1) -> [1];
([],3) -> [3];
([1,0,0],1) -> [1,0,0,1];
([1],2) -> [1,2];
([0,2],0) -> [0,2,0];
([2],1) -> [2,1];
([1],1) -> [1,1];
([],0) -> [0];
([3],2) -> [3,2];
([2,0],1) -> [2,0,1];
([3],1) -> [3,1];
([],2) -> [2];
([3,1],1) -> [3,1,1];
([0],1) -> [0,1];
([1,0],0) -> [1,0,0];
([0,3],0) -> [0,3,0];
([1],3) -> [1,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0172620000001 true true

([3,1,3],3) -> [3,1,3,3];
([2],2) -> [2,2];
([0,0,0],1) -> [0,0,0,1];
([1,2,0],0) -> [1,2,0,0];
([1,1],1) -> [1,1,1];
([0,2,3],3) -> [0,2,3,3];
([],1) -> [1];
([1],3) -> [1,3];
([1,1,3],3) -> [1,1,3,3];
([0,1],2) -> [0,1,2];
([0,2,3],1) -> [0,2,3,1];
([],0) -> [0];
([3,0],1) -> [3,0,1];
([2,0,1],1) -> [2,0,1,1];
([0,2,1],1) -> [0,2,1,1];
([],2) -> [2];
([0,3],1) -> [0,3,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.020315 true true

([0,0,1],1) -> [0,0,1,1];
([],3) -> [3];
([0,3],1) -> [0,3,1];
([2,2,1],1) -> [2,2,1,1];
([0],1) -> [0,1];
([1,0],2) -> [1,0,2];
([3,3],2) -> [3,3,2];
([1],2) -> [1,2];
([3],2) -> [3,2];
([2,1],2) -> [2,1,2];
([],2) -> [2];
([2,0,2],1) -> [2,0,2,1];
([1],1) -> [1,1];
([],0) -> [0];
([3],0) -> [3,0];
([1,1],1) -> [1,1,1];
([0,2,3],0) -> [0,2,3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.017842 true true

([2,3,1],2) -> [2,3,1,2];
([3],1) -> [3,1];
([2,0,2],2) -> [2,0,2,2];
([],3) -> [3];
([],2) -> [2];
([3,1],1) -> [3,1,1];
([1],3) -> [1,3];
([2,3],0) -> [2,3,0];
([1],2) -> [1,2];
([1,2],3) -> [1,2,3];
([],0) -> [0];
([],1) -> [1];
([0],0) -> [0,0];
([0,3,2],0) -> [0,3,2,0];
([1,3,0],3) -> [1,3,0,3];
([2],1) -> [2,1];
([3,3],1) -> [3,3,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0188539999999 true true

([],2) -> [2];
([],1) -> [1];
([3,0],0) -> [3,0,0];
([1,3,3],2) -> [1,3,3,2];
([],0) -> [0];
([1],1) -> [1,1];
([1],3) -> [1,3];
([3,0],1) -> [3,0,1];
([1],2) -> [1,2];
([3,3,0],1) -> [3,3,0,1];
([1,1],3) -> [1,1,3];
([0],1) -> [0,1];
([0,1,3],3) -> [0,1,3,3];
([1,0,3],3) -> [1,0,3,3];
([2,3,3],1) -> [2,3,3,1];
([2,2],2) -> [2,2,2];
([3],3) -> [3,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.018282 true true

([0,2],1) -> [0,2,1];
([3],0) -> [3,0];
([],2) -> [2];
([0],0) -> [0,0];
([],3) -> [3];
([0],3) -> [0,3];
([2,1,2],0) -> [2,1,2,0];
([2],2) -> [2,2];
([1,2,1],1) -> [1,2,1,1];
([1,1],2) -> [1,1,2];
([],1) -> [1];
([2],3) -> [2,3];
([2,1,0],0) -> [2,1,0,0];
([1,1,3],0) -> [1,1,3,0];
([3],2) -> [3,2];
([],0) -> [0];
([2],1) -> [2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0169149999999 true true

([0,1,1],1) -> [0,1,1,1];
([3,3],1) -> [3,3,1];
([2],1) -> [2,1];
([3,3,1],2) -> [3,3,1,2];
([0,2],0) -> [0,2,0];
([2,2,3],0) -> [2,2,3,0];
([2,0,2],3) -> [2,0,2,3];
([3],0) -> [3,0];
([0],1) -> [0,1];
([0],3) -> [0,3];
([3,1,3],3) -> [3,1,3,3];
([3],2) -> [3,2];
([],0) -> [0];
([0,0],2) -> [0,0,2];
([1,3,1],0) -> [1,3,1,0];
([3,2,2],2) -> [3,2,2,2];
([0,3],2) -> [0,3,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0242619999999 true true

([],3) -> [3];
([1,0],1) -> [1,0,1];
([2],2) -> [2,2];
([],2) -> [2];
([],0) -> [0];
([2],1) -> [2,1];
([],1) -> [1];
([0,3,3],2) -> [0,3,3,2];
([1,0,3],1) -> [1,0,3,1];
([1],1) -> [1,1];
([0],0) -> [0,0];
([1,2],3) -> [1,2,3];
([2],3) -> [2,3];
([1],3) -> [1,3];
([1,1,0],3) -> [1,1,0,3];
([1,2],2) -> [1,2,2];
([2,3,0],2) -> [2,3,0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.016944 true true

([0,1,3],2) -> [0,1,3,2];
([],3) -> [3];
([2,1,2],1) -> [2,1,2,1];
([3,3,0],2) -> [3,3,0,2];
([],0) -> [0];
([3,0],1) -> [3,0,1];
([1,2],2) -> [1,2,2];
([0,2,2],3) -> [0,2,2,3];
([2,3,3],2) -> [2,3,3,2];
([],1) -> [1];
([0,3],2) -> [0,3,2];
([0],3) -> [0,3];
([0,1,0],3) -> [0,1,0,3];
([0,3],0) -> [0,3,0];
([2,2],2) -> [2,2,2];
([3],2) -> [3,2];
([1,1],3) -> [1,1,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0203349999999 true true

([0,1],1) -> [0,1,1];
([],2) -> [2];
([1,1,2],1) -> [1,1,2,1];
([0],2) -> [0,2];
([],0) -> [0];
([3,1,2],3) -> [3,1,2,3];
([],3) -> [3];
([2,1],0) -> [2,1,0];
([0],3) -> [0,3];
([1,0,2],2) -> [1,0,2,2];
([1],1) -> [1,1];
([2],1) -> [2,1];
([2,0,2],2) -> [2,0,2,2];
([1,1],0) -> [1,1,0];
([],1) -> [1];
([1,2,1],1) -> [1,2,1,1];
([1,3,3],0) -> [1,3,3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0178969999999 true true

([2,1],3) -> [2,1,3];
([1,0],2) -> [1,0,2];
([2,2,1],3) -> [2,2,1,3];
([1],2) -> [1,2];
([2,1],2) -> [2,1,2];
([],2) -> [2];
([2,1,2],1) -> [2,1,2,1];
([],3) -> [3];
([3,1],0) -> [3,1,0];
([],1) -> [1];
([3,3],1) -> [3,3,1];
([3],0) -> [3,0];
([3,1,0],1) -> [3,1,0,1];
([0,0,3],1) -> [0,0,3,1];
([2],1) -> [2,1];
([0,2,1],2) -> [0,2,1,2];
([3,2,1],1) -> [3,2,1,1];
([0,0],0) -> [0,0,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.021986 true true

([2],0) -> [2,0];
([],2) -> [2];
([0,0,1],1) -> [0,0,1,1];
([],1) -> [1];
([],3) -> [3];
([1,3,3],2) -> [1,3,3,2];
([3],2) -> [3,2];
([3,0],3) -> [3,0,3];
([1,1,3],0) -> [1,1,3,0];
([],0) -> [0];
([1],2) -> [1,2];
([2],1) -> [2,1];
([0],3) -> [0,3];
([0,0],3) -> [0,0,3];
([1],0) -> [1,0];
([0,2,0],2) -> [0,2,0,2];
([0,2],0) -> [0,2,0];
([0,2,0],3) -> [0,2,0,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0178100000001 true true

([],2) -> [2];
([2,3,2],0) -> [2,3,2,0];
([2],3) -> [2,3];
([],3) -> [3];
([2,3,1],3) -> [2,3,1,3];
([0,2,1],3) -> [0,2,1,3];
([2,0,1],3) -> [2,0,1,3];
([3,3],2) -> [3,3,2];
([0,3,3],2) -> [0,3,3,2];
([0],0) -> [0,0];
([1],2) -> [1,2];
([2,2,3],0) -> [2,2,3,0];
([2],0) -> [2,0];
([],0) -> [0];
([3],2) -> [3,2];
([1,1],3) -> [1,1,3];
([1,2,1],3) -> [1,2,1,3];
([1,1,3],0) -> [1,1,3,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.020837 true true

([2,3,1],1) -> [2,3,1,1];
([3],3) -> [3,3];
([3,1,3],1) -> [3,1,3,1];
([3],1) -> [3,1];
([],0) -> [0];
([],3) -> [3];
([1,1],1) -> [1,1,1];
([3],0) -> [3,0];
([0,3],0) -> [0,3,0];
([1,1,3],0) -> [1,1,3,0];
([3],2) -> [3,2];
([1,1],3) -> [1,1,3];
([2],2) -> [2,2];
([],2) -> [2];
([2,0,1],3) -> [2,0,1,3];
([0,3],3) -> [0,3,3];
([0,1,1],2) -> [0,1,1,2];
([0],2) -> [0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.018579 true true

([2,0,0],1) -> [2,0,0,1];
([0,1,2],0) -> [0,1,2,0];
([1,1],0) -> [1,1,0];
([0,3],2) -> [0,3,2];
([2,1,1],1) -> [2,1,1,1];
([],2) -> [2];
([1,3,1],0) -> [1,3,1,0];
([2,0],1) -> [2,0,1];
([1,1,3],1) -> [1,1,3,1];
([3],1) -> [3,1];
([1,0],1) -> [1,0,1];
([2],1) -> [2,1];
([0],3) -> [0,3];
([],0) -> [0];
([2,3],1) -> [2,3,1];
([2,2,3],0) -> [2,2,3,0];
([2],3) -> [2,3];
([2,0,3],2) -> [2,0,3,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0212650000001 true true

([],3) -> [3];
([3,2],0) -> [3,2,0];
([0,1,2],1) -> [0,1,2,1];
([1],0) -> [1,0];
([0],1) -> [0,1];
([2,1,0],1) -> [2,1,0,1];
([0,2,1],2) -> [0,2,1,2];
([0,0],2) -> [0,0,2];
([],0) -> [0];
([0,0],0) -> [0,0,0];
([1,0],3) -> [1,0,3];
([2,1,1],3) -> [2,1,1,3];
([1,1,2],1) -> [1,1,2,1];
([0,2],2) -> [0,2,2];
([3],3) -> [3,3];
([2],3) -> [2,3];
([2],0) -> [2,0];
([0,2],1) -> [0,2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0201689999999 true true

([],1) -> [1];
([],0) -> [0];
([0],1) -> [0,1];
([],3) -> [3];
([3],2) -> [3,2];
([0],0) -> [0,0];
([3,2],0) -> [3,2,0];
([0,3],1) -> [0,3,1];
([1,0],3) -> [1,0,3];
([],2) -> [2];
([0],2) -> [0,2];
([0,0,3],3) -> [0,0,3,3];
([1,1,1],1) -> [1,1,1,1];
([2],1) -> [2,1];
([1,1,3],0) -> [1,1,3,0];
([0,3,0],3) -> [0,3,0,3];
([1,2,0],1) -> [1,2,0,1];
([0,2],0) -> [0,2,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.021215 true true

([2,3,1],0) -> [2,3,1,0];
([1],0) -> [1,0];
([],0) -> [0];
([1,0],1) -> [1,0,1];
([3],3) -> [3,3];
([0,3],3) -> [0,3,3];
([0,1],2) -> [0,1,2];
([],3) -> [3];
([3],0) -> [3,0];
([3,2,1],1) -> [3,2,1,1];
([2],1) -> [2,1];
([3,3,1],2) -> [3,3,1,2];
([],2) -> [2];
([3,1,3],1) -> [3,1,3,1];
([0],1) -> [0,1];
([],1) -> [1];
([3,1],1) -> [3,1,1];
([3,1,1],2) -> [3,1,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.019644 true true

([3],3) -> [3,3];
([],1) -> [1];
([1,0],2) -> [1,0,2];
([3],0) -> [3,0];
([3,2,2],3) -> [3,2,2,3];
([],3) -> [3];
([3],2) -> [3,2];
([0,2],1) -> [0,2,1];
([2,1],1) -> [2,1,1];
([],0) -> [0];
([0],3) -> [0,3];
([0,2],0) -> [0,2,0];
([3,2],3) -> [3,2,3];
([3,1],0) -> [3,1,0];
([3,1,3],3) -> [3,1,3,3];
([3,3,0],2) -> [3,3,0,2];
([3,2],1) -> [3,2,1];
([1],2) -> [1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.020313 true true

([0],3) -> [0,3];
([2,3],1) -> [2,3,1];
([1,3],1) -> [1,3,1];
([],0) -> [0];
([1,0],1) -> [1,0,1];
([],1) -> [1];
([2],3) -> [2,3];
([1,3],3) -> [1,3,3];
([1,2,1],0) -> [1,2,1,0];
([0,1],1) -> [0,1,1];
([0,1],2) -> [0,1,2];
([3,3,0],0) -> [3,3,0,0];
([1,0,2],0) -> [1,0,2,0];
([0,3,1],1) -> [0,3,1,1];
([2],0) -> [2,0];
([2,2,0],1) -> [2,2,0,1];
([0,2],2) -> [0,2,2];
([1,3,3],2) -> [1,3,3,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.019468 true true

([3,1],1) -> [3,1,1];
([],1) -> [1];
([1,3],0) -> [1,3,0];
([0],3) -> [0,3];
([3],2) -> [3,2];
([2],1) -> [2,1];
([],0) -> [0];
([3,3],0) -> [3,3,0];
([2],3) -> [2,3];
([1,3],1) -> [1,3,1];
([1,3,2],1) -> [1,3,2,1];
([2,0,1],3) -> [2,0,1,3];
([],2) -> [2];
([0],1) -> [0,1];
([3],3) -> [3,3];
([0,2,2],3) -> [0,2,2,3];
([3,2],0) -> [3,2,0];
([2],2) -> [2,2];
([2,3],2) -> [2,3,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.019499 true true

([1,3,3],2) -> [1,3,3,2];
([2,0],3) -> [2,0,3];
([3],1) -> [3,1];
([0,2,1],3) -> [0,2,1,3];
([1,2],0) -> [1,2,0];
([0,1],3) -> [0,1,3];
([1],2) -> [1,2];
([3],0) -> [3,0];
([0,3,2],0) -> [0,3,2,0];
([],3) -> [3];
([3],3) -> [3,3];
([3,2],2) -> [3,2,2];
([1],3) -> [1,3];
([],2) -> [2];
([2,2],3) -> [2,2,3];
([2,1,2],0) -> [2,1,2,0];
([0,3,3],1) -> [0,3,3,1];
([0],1) -> [0,1];
([3,2],1) -> [3,2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0274710000001 true true

([2,2],0) -> [2,2,0];
([3],1) -> [3,1];
([2],0) -> [2,0];
([1],0) -> [1,0];
([],0) -> [0];
([1,1,2],3) -> [1,1,2,3];
([],3) -> [3];
([2,0],0) -> [2,0,0];
([3],0) -> [3,0];
([3,0],1) -> [3,0,1];
([],2) -> [2];
([],1) -> [1];
([3,2],0) -> [3,2,0];
([3,2,0],3) -> [3,2,0,3];
([0,3,1],1) -> [0,3,1,1];
([3,3,3],3) -> [3,3,3,3];
([0],3) -> [0,3];
([0],0) -> [0,0];
([1,1],2) -> [1,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.018605 true true

([1,1],3) -> [1,1,3];
([3],3) -> [3,3];
([0,3],1) -> [0,3,1];
([],1) -> [1];
([1,0],2) -> [1,0,2];
([1,0],3) -> [1,0,3];
([],0) -> [0];
([0,3,3],1) -> [0,3,3,1];
([],3) -> [3];
([1,2,0],1) -> [1,2,0,1];
([1,3,3],3) -> [1,3,3,3];
([0,3,1],1) -> [0,3,1,1];
([0],0) -> [0,0];
([],2) -> [2];
([0,0],0) -> [0,0,0];
([3],1) -> [3,1];
([1,1,1],1) -> [1,1,1,1];
([2,1],3) -> [2,1,3];
([2,2],1) -> [2,2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0207519999999 true true

([0,2],3) -> [0,2,3];
([1,2,3],3) -> [1,2,3,3];
([],0) -> [0];
([],1) -> [1];
([1,2,0],3) -> [1,2,0,3];
([3,2,2],3) -> [3,2,2,3];
([0,2],0) -> [0,2,0];
([0,1,3],0) -> [0,1,3,0];
([],3) -> [3];
([],2) -> [2];
([1],2) -> [1,2];
([2,0],2) -> [2,0,2];
([2],2) -> [2,2];
([3,2,2],2) -> [3,2,2,2];
([1,0],1) -> [1,0,1];
([3],0) -> [3,0];
([2,2],3) -> [2,2,3];
([1,2],0) -> [1,2,0];
([1,1,2],3) -> [1,1,2,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0202059999999 true true

([2,0],2) -> [2,0,2];
([1,0],1) -> [1,0,1];
([3],0) -> [3,0];
([2],0) -> [2,0];
([2,1],1) -> [2,1,1];
([2,0],1) -> [2,0,1];
([3,3],2) -> [3,3,2];
([3],3) -> [3,3];
([3,1,1],0) -> [3,1,1,0];
([],3) -> [3];
([],2) -> [2];
([1],2) -> [1,2];
([],1) -> [1];
([3],1) -> [3,1];
([3,0,0],1) -> [3,0,0,1];
([],0) -> [0];
([1],1) -> [1,1];
([1,3,1],3) -> [1,3,1,3];
([1,1],3) -> [1,1,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0253520000001 true true

([],1) -> [1];
([0],2) -> [0,2];
([2,1,3],1) -> [2,1,3,1];
([1,2,2],2) -> [1,2,2,2];
([0,1],0) -> [0,1,0];
([2],2) -> [2,2];
([],3) -> [3];
([3,3,2],3) -> [3,3,2,3];
([],2) -> [2];
([2,2],2) -> [2,2,2];
([0,0],2) -> [0,0,2];
([0,0,1],0) -> [0,0,1,0];
([1,0,0],3) -> [1,0,0,3];
([2,0,0],0) -> [2,0,0,0];
([0],0) -> [0,0];
([0,3,3],0) -> [0,3,3,0];
([],0) -> [0];
([0,0],1) -> [0,0,1];
([1,3,2],1) -> [1,3,2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.019646 true true

([0,1,3],2) -> [0,1,3,2];
([3],1) -> [3,1];
([],3) -> [3];
([1,1,1],0) -> [1,1,1,0];
([2,2],3) -> [2,2,3];
([0,3,3],1) -> [0,3,3,1];
([2],2) -> [2,2];
([2,3],3) -> [2,3,3];
([],1) -> [1];
([],2) -> [2];
([0],0) -> [0,0];
([1],2) -> [1,2];
([1],3) -> [1,3];
([0,3],2) -> [0,3,2];
([1,0],2) -> [1,0,2];
([0],1) -> [0,1];
([],0) -> [0];
([0,0],2) -> [0,0,2];
([0],3) -> [0,3];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0192959999999 true true

([2,1,0],0) -> [2,1,0,0];
([1,3],3) -> [1,3,3];
([3,3],1) -> [3,3,1];
([1,2,0],3) -> [1,2,0,3];
([0],2) -> [0,2];
([1,2],3) -> [1,2,3];
([3,2,2],3) -> [3,2,2,3];
([1],2) -> [1,2];
([],3) -> [3];
([2,0,0],0) -> [2,0,0,0];
([2,0,3],0) -> [2,0,3,0];
([],1) -> [1];
([1,2],0) -> [1,2,0];
([2,1],3) -> [2,1,3];
([3],0) -> [3,0];
([],0) -> [0];
([1,1,2],2) -> [1,1,2,2];
([0,1,2],2) -> [0,1,2,2];
([2,1],2) -> [2,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0225109999999 true true

([0,1],2) -> [0,1,2];
([0,3,2],0) -> [0,3,2,0];
([2,0],3) -> [2,0,3];
([],0) -> [0];
([3,1,2],1) -> [3,1,2,1];
([2,0],1) -> [2,0,1];
([2],2) -> [2,2];
([3],3) -> [3,3];
([1,0],3) -> [1,0,3];
([0],1) -> [0,1];
([0,3,2],3) -> [0,3,2,3];
([0,2,3],3) -> [0,2,3,3];
([0,2],1) -> [0,2,1];
([0],2) -> [0,2];
([2,3,0],0) -> [2,3,0,0];
([1,0],0) -> [1,0,0];
([2],0) -> [2,0];
([1],3) -> [1,3];
([],2) -> [2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.020845 true true

([0,2,0],3) -> [0,2,0,3];
([],3) -> [3];
([],1) -> [1];
([1,2,2],0) -> [1,2,2,0];
([1],1) -> [1,1];
([],0) -> [0];
([3,2,1],0) -> [3,2,1,0];
([0],0) -> [0,0];
([2,0],3) -> [2,0,3];
([3,0,3],0) -> [3,0,3,0];
([0,0],2) -> [0,0,2];
([3,3],3) -> [3,3,3];
([0,1,0],1) -> [0,1,0,1];
([1,0],0) -> [1,0,0];
([3],0) -> [3,0];
([3,0],0) -> [3,0,0];
([0,0],0) -> [0,0,0];
([3,2],1) -> [3,2,1];
([0],3) -> [0,3];
([1],0) -> [1,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.02199 true true

([3],3) -> [3,3];
([3],2) -> [3,2];
([1],3) -> [1,3];
([],3) -> [3];
([2],2) -> [2,2];
([3],0) -> [3,0];
([2,0,2],1) -> [2,0,2,1];
([3,2,1],2) -> [3,2,1,2];
([2,2],1) -> [2,2,1];
([3,1,3],2) -> [3,1,3,2];
([],0) -> [0];
([0],2) -> [0,2];
([1,2],0) -> [1,2,0];
([],2) -> [2];
([1,3,3],0) -> [1,3,3,0];
([1,3],2) -> [1,3,2];
([0],0) -> [0,0];
([1],0) -> [1,0];
([3,2,2],1) -> [3,2,2,1];
([2,3,3],1) -> [2,3,3,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0226500000001 true true

([],0) -> [0];
([],1) -> [1];
([1,3],1) -> [1,3,1];
([3],0) -> [3,0];
([0,0],3) -> [0,0,3];
([1],3) -> [1,3];
([0,1],0) -> [0,1,0];
([1,1,0],0) -> [1,1,0,0];
([1,3,2],0) -> [1,3,2,0];
([1],0) -> [1,0];
([0],0) -> [0,0];
([3,1,0],0) -> [3,1,0,0];
([1,2,3],2) -> [1,2,3,2];
([3],3) -> [3,3];
([2,2],1) -> [2,2,1];
([1],1) -> [1,1];
([3,1,2],3) -> [3,1,2,3];
([0],2) -> [0,2];
([2,0,3],2) -> [2,0,3,2];
([3],1) -> [3,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0180290000001 true true

([2],2) -> [2,2];
([0,3,3],3) -> [0,3,3,3];
([],3) -> [3];
([2,0,0],1) -> [2,0,0,1];
([1],3) -> [1,3];
([0,3,3],0) -> [0,3,3,0];
([3,3,0],0) -> [3,3,0,0];
([1],2) -> [1,2];
([1,3],3) -> [1,3,3];
([1,3],2) -> [1,3,2];
([0,1,0],3) -> [0,1,0,3];
([],2) -> [2];
([2],1) -> [2,1];
([3,2],0) -> [3,2,0];
([2,0],1) -> [2,0,1];
([0,0],3) -> [0,0,3];
([3,1,3],3) -> [3,1,3,3];
([],1) -> [1];
([0,2],3) -> [0,2,3];
([2,2],1) -> [2,2,1];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0231470000001 true true

([2,1,1],0) -> [2,1,1,0];
([],3) -> [3];
([2,2],0) -> [2,2,0];
([2],3) -> [2,3];
([],1) -> [1];
([1,3],1) -> [1,3,1];
([3,0],3) -> [3,0,3];
([],0) -> [0];
([0,3,0],1) -> [0,3,0,1];
([0,2],2) -> [0,2,2];
([2],0) -> [2,0];
([1],2) -> [1,2];
([3],3) -> [3,3];
([1,1],3) -> [1,1,3];
([1,0,3],0) -> [1,0,3,0];
([2],2) -> [2,2];
([],2) -> [2];
([3,0],2) -> [3,0,2];
([0],3) -> [0,3];
([1,0,0],2) -> [1,0,0,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0179780000001 true true

([],1) -> [1];
([0,0,3],1) -> [0,0,3,1];
([3,1,2],1) -> [3,1,2,1];
([1,3],2) -> [1,3,2];
([1],2) -> [1,2];
([1,1,1],2) -> [1,1,1,2];
([3,3,2],1) -> [3,3,2,1];
([],0) -> [0];
([1,1,3],0) -> [1,1,3,0];
([0],0) -> [0,0];
([],3) -> [3];
([2,1,1],0) -> [2,1,1,0];
([2,1],0) -> [2,1,0];
([2,2,2],2) -> [2,2,2,2];
([2,2],1) -> [2,2,1];
([2],0) -> [2,0];
([2],2) -> [2,2];
([3,3,0],1) -> [3,3,0,1];
([0,1,2],1) -> [0,1,2,1];
([1],0) -> [1,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0204610000001 true true

([1,0],3) -> [1,0,3];
([0,2,0],1) -> [0,2,0,1];
([3,2],2) -> [3,2,2];
([3],3) -> [3,3];
([],3) -> [3];
([2,0,2],2) -> [2,0,2,2];
([],0) -> [0];
([],2) -> [2];
([1,2,2],3) -> [1,2,2,3];
([2],3) -> [2,3];
([0],3) -> [0,3];
([1,2],1) -> [1,2,1];
([3],1) -> [3,1];
([2,0],0) -> [2,0,0];
([1],3) -> [1,3];
([0],2) -> [0,2];
([3,0],3) -> [3,0,3];
([2,2,0],1) -> [2,2,0,1];
([2,3],1) -> [2,3,1];
([0,3,1],2) -> [0,3,1,2];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.021154 true true

([2],2) -> [2,2];
([0,0,1],1) -> [0,0,1,1];
([1],3) -> [1,3];
([0,1,3],0) -> [0,1,3,0];
([],2) -> [2];
([1],0) -> [1,0];
([1,3,1],2) -> [1,3,1,2];
([3],1) -> [3,1];
([0,3,3],3) -> [0,3,3,3];
([3,2],0) -> [3,2,0];
([],3) -> [3];
([1],2) -> [1,2];
([1,0],1) -> [1,0,1];
([],1) -> [1];
([0,2],3) -> [0,2,3];
([3],0) -> [3,0];
([1,1,3],3) -> [1,1,3,3];
([1,3,3],3) -> [1,3,3,3];
([2,0],2) -> [2,0,2];
([],0) -> [0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0202630000001 true true

([1,1],3) -> [1,1,3];
([2],3) -> [2,3];
([0],1) -> [0,1];
([3,0],0) -> [3,0,0];
([3],1) -> [3,1];
([2,0,0],0) -> [2,0,0,0];
([2,1],3) -> [2,1,3];
([],3) -> [3];
([0,2],2) -> [0,2,2];
([1],2) -> [1,2];
([3,0],1) -> [3,0,1];
([],1) -> [1];
([2,3],1) -> [2,3,1];
([1,3,2],1) -> [1,3,2,1];
([3,0],2) -> [3,0,2];
([0,1],2) -> [0,1,2];
([1,2],3) -> [1,2,3];
([],2) -> [2];
([2,0],2) -> [2,0,2];
([1],0) -> [1,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0239349999999 true true

([3],3) -> [3,3];
([],0) -> [0];
([],3) -> [3];
([0,1,3],2) -> [0,1,3,2];
([2],0) -> [2,0];
([],1) -> [1];
([0,3,3],1) -> [0,3,3,1];
([1,2,1],3) -> [1,2,1,3];
([2,0,1],2) -> [2,0,1,2];
([0],1) -> [0,1];
([0],2) -> [0,2];
([1],3) -> [1,3];
([1],2) -> [1,2];
([],2) -> [2];
([2,1,1],0) -> [2,1,1,0];
([2,3,1],1) -> [2,3,1,1];
([1,1,1],2) -> [1,1,1,2];
([1,0],1) -> [1,0,1];
([0,0],3) -> [0,0,3];
([0],0) -> [0,0];

=================================
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
(\list_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_snoc = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, list_snoc (#2.2 y1) n)) in list_snoc) : NatList -> Nat -> NatList)
0.0209150000001 true true

