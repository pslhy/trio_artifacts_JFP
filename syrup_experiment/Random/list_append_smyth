([2],[]) -> [2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> xs in list_append) : NatList -> NatList -> NatList)
0.004187 false false

([2],[1,0]) -> [2,1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> Cons (2, ys) in list_append) : NatList -> NatList -> NatList)
0.00438400000007 false false

([],[]) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> [] in list_append) : NatList -> NatList -> NatList)
0.00378099999989 false false

([2,3],[]) -> [2,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> xs in list_append) : NatList -> NatList -> NatList)
0.00437000000011 false false

([2,3],[]) -> [2,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> xs in list_append) : NatList -> NatList -> NatList)
0.00435500000003 false false

([3,1,2],[]) -> [3,1,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> xs in list_append) : NatList -> NatList -> NatList)
0.00475899999992 false false

([0],[1,0,1]) -> [0,1,0,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> Cons (0, ys) in list_append) : NatList -> NatList -> NatList)
0.00436300000001 false false

([1,2],[1]) -> [1,2,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> Cons (1, Cons (2, ys)) in list_append) : NatList -> NatList -> NatList)
0.00446800000009 false false

([2],[]) -> [2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> xs in list_append) : NatList -> NatList -> NatList)
0.00419699999998 false false

([],[0,0,1]) -> [0,0,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> ys in list_append) : NatList -> NatList -> NatList)
0.0043189999999 false false

([2],[1]) -> [2,1];
([2],[0,0]) -> [2,0,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> Cons (2, ys) in list_append) : NatList -> NatList -> NatList)
0.00452799999994 false false

([3,2],[3]) -> [3,2,3];
([],[]) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.014044 true true

([],[1,1]) -> [1,1];
([],[]) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> ys in list_append) : NatList -> NatList -> NatList)
0.00381900000002 false false

([3],[3]) -> [3,3];
([3],[]) -> [3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_append = \xs -> \ys -> Cons (3, ys) in list_append) : NatList -> NatList -> NatList)
0.00455600000009 false false

([3],[3]) -> [3,3];
([3,3,1],[0,1]) -> [3,3,1,0,1];

=================================
NOSOL

([3,2],[0,1]) -> [3,2,0,1];
([],[3]) -> [3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0265039999999 true true

([3,3],[0,0,2]) -> [3,3,0,0,2];
([1,1],[]) -> [1,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case ys of
    Nil y1 -> 
      [1, 1]

    Cons y1 -> 
      Cons (3, Cons (3, Cons (0, #2.2 y1))) in list_append) : NatList -> NatList -> NatList)
0.010133 false false

([1],[3]) -> [1,3];
([],[]) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (1, ys) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , Cons
            ( S (S (#2.1 y1))
            , list_append (#2.2 y1) xs
            )
        ) in list_append) : NatList -> NatList -> NatList)
0.00765999999999 false false

([1,3,1],[]) -> [1,3,1];
([1],[2,0,3]) -> [1,2,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case ys of
    Nil y1 -> 
      xs

    Cons y1 -> 
      Cons (1, ys) in list_append) : NatList -> NatList -> NatList)
0.015731 false false

([1,3,0],[0,1,0]) -> [1,3,0,0,1,0];
([2],[3,3]) -> [2,3,3];

=================================
NOSOL

([2,2],[2,1]) -> [2,2,2,1];
([2,2,1],[1,2,2]) -> [2,2,1,1,2,2];
([1,1,1],[]) -> [1,1,1];

=================================
NOSOL

([2],[3]) -> [2,3];
([2,1,0],[2,1]) -> [2,1,0,2,1];
([1,2],[1,3,2]) -> [1,2,1,3,2];

=================================
NOSOL

([0],[]) -> [0];
([2,1,3],[0,1,2]) -> [2,1,3,0,1,2];
([],[0,2]) -> [0,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00861099999997 true true

([],[]) -> [];
([0,2],[3,2]) -> [0,2,3,2];
([0,1,2],[]) -> [0,1,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00894199999993 true true

([0,2,1],[0]) -> [0,2,1,0];
([1,3,0],[2,1]) -> [1,3,0,2,1];
([2,2],[3,0,0]) -> [2,2,3,0,0];

=================================
NOSOL

([3,0],[3,3]) -> [3,0,3,3];
([3],[2,3]) -> [3,2,3];
([3,0,3],[1]) -> [3,0,3,1];

=================================
NOSOL

([],[1,2,3]) -> [1,2,3];
([3],[2,2,3]) -> [3,2,2,3];
([1,0,0],[2,3,2]) -> [1,0,0,2,3,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0119259999999 true true

([3,2],[1,2,1]) -> [3,2,1,2,1];
([0],[]) -> [0];
([],[3,3,3]) -> [3,3,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0125989999999 true true

([0],[2,0]) -> [0,2,0];
([],[3]) -> [3];
([],[2]) -> [2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons (0, ys) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons (0, list_append (#2.2 y1) ys) in list_append) : NatList -> NatList -> NatList)
0.009006 false false

([0,2,1],[]) -> [0,2,1];
([],[0,3]) -> [0,3];
([1,3,2],[2]) -> [1,3,2,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.027135 true true

([],[]) -> [];
([1],[2,2]) -> [1,2,2];
([2,2],[1,3]) -> [2,2,1,3];
([1,2,0],[1,0]) -> [1,2,0,1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0110440000001 true true

([],[]) -> [];
([3,2],[]) -> [3,2];
([0,2,1],[]) -> [0,2,1];
([1,0,0],[1]) -> [1,0,0,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.008914 true true

([],[3,2,2]) -> [3,2,2];
([2,2,1],[2]) -> [2,2,1,2];
([1,3],[]) -> [1,3];
([3,0,0],[3]) -> [3,0,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.01998 true true

([3,1],[2,3]) -> [3,1,2,3];
([1],[0]) -> [1,0];
([3,0],[2,3]) -> [3,0,2,3];
([1,1,2],[1,0,2]) -> [1,1,2,1,0,2];

=================================
NOSOL

([3,1],[0,0,1]) -> [3,1,0,0,1];
([1,0,2],[3,0]) -> [1,0,2,3,0];
([],[1,0]) -> [1,0];
([],[3]) -> [3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00979000000007 true true

([],[0,2]) -> [0,2];
([],[2]) -> [2];
([],[1,2]) -> [1,2];
([0,1],[2]) -> [0,1,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons (0, Cons (1, ys)) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00884599999995 false true

([2,1,2],[]) -> [2,1,2];
([1,1],[3]) -> [1,1,3];
([],[3]) -> [3];
([1,3,0],[1,1,3]) -> [1,3,0,1,1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.01928 true true

([],[0,0]) -> [0,0];
([2,2,0],[3,1,0]) -> [2,2,0,3,1,0];
([2,3],[2]) -> [2,3,2];
([],[1]) -> [1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00903799999992 true true

([3],[]) -> [3];
([1,2,0],[1,1,2]) -> [1,2,0,1,1,2];
([3,3,3],[1,1]) -> [3,3,3,1,1];
([],[1,0]) -> [1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0141920000001 true true

([2,2],[2,3,2]) -> [2,2,2,3,2];
([],[3,1,2]) -> [3,1,2];
([],[3]) -> [3];
([1,1,3],[0]) -> [1,1,3,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0125499999999 true true

([2,0,0],[1]) -> [2,0,0,1];
([1],[2]) -> [1,2];
([3],[0,1,3]) -> [3,0,1,3];
([3,1],[3,2]) -> [3,1,3,2];
([1],[3,2]) -> [1,3,2];

=================================
NOSOL

([],[]) -> [];
([2,1],[0,3]) -> [2,1,0,3];
([1,1],[]) -> [1,1];
([0],[]) -> [0];
([2],[]) -> [2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0100420000001 true true

([2,0,3],[0]) -> [2,0,3,0];
([],[2,1,1]) -> [2,1,1];
([],[2,3]) -> [2,3];
([],[1,0,1]) -> [1,0,1];
([1,0,0],[]) -> [1,0,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0162439999999 true true

([1],[0]) -> [1,0];
([2],[3,1]) -> [2,3,1];
([0,1],[0,2,0]) -> [0,1,0,2,0];
([3,1,0],[3,0]) -> [3,1,0,3,0];
([3],[3]) -> [3,3];

=================================
NOSOL

([3,3,2],[2]) -> [3,3,2,2];
([],[2,3]) -> [2,3];
([0,2,1],[2]) -> [0,2,1,2];
([2,1,3],[2,3]) -> [2,1,3,2,3];
([],[0,0,1]) -> [0,0,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.01082 true true

([0],[2,1]) -> [0,2,1];
([2,0,1],[1,0,0]) -> [2,0,1,1,0,0];
([1,2],[0,1]) -> [1,2,0,1];
([],[2,1]) -> [2,1];
([],[]) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00770299999999 true true

([3],[0,0]) -> [3,0,0];
([],[3]) -> [3];
([0,1],[0,0]) -> [0,1,0,0];
([2],[2,0]) -> [2,2,0];
([2,3],[1]) -> [2,3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.010227 true true

([],[1,1,1]) -> [1,1,1];
([1],[1,0]) -> [1,1,0];
([1,1,3],[2,2]) -> [1,1,3,2,2];
([1,2],[0,2]) -> [1,2,0,2];
([0],[]) -> [0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.013956 true true

([2,0,3],[1,3]) -> [2,0,3,1,3];
([0,2],[0,1,1]) -> [0,2,0,1,1];
([2,0],[0,0]) -> [2,0,0,0];
([3,1,0],[]) -> [3,1,0];
([0,0,1],[1,1]) -> [0,0,1,1,1];

=================================
NOSOL

([2],[1,3,2]) -> [2,1,3,2];
([2,1],[]) -> [2,1];
([3,0,1],[]) -> [3,0,1];
([],[]) -> [];
([0,0],[]) -> [0,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case ys of
    Nil y1 -> 
      xs

    Cons y1 -> 
      Cons (S (#2.1 y1), ys) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0108279999999 false true

([3],[3,0]) -> [3,3,0];
([0,1],[2]) -> [0,1,2];
([2,1,3],[0,0,3]) -> [2,1,3,0,0,3];
([3,3],[0]) -> [3,3,0];
([0,2,1],[0]) -> [0,2,1,0];
([2],[]) -> [2];

=================================
NOSOL

([],[2]) -> [2];
([3],[3,1,1]) -> [3,3,1,1];
([],[1,1]) -> [1,1];
([2],[1,0,0]) -> [2,1,0,0];
([0,1],[]) -> [0,1];
([1,2],[0,0]) -> [1,2,0,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.01052 true true

([3],[1,3,1]) -> [3,1,3,1];
([2,0],[]) -> [2,0];
([],[3,1]) -> [3,1];
([3,3],[3,0,1]) -> [3,3,3,0,1];
([1],[]) -> [1];
([2],[3,0,2]) -> [2,3,0,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.015877 true true

([3],[]) -> [3];
([0,1],[2]) -> [0,1,2];
([2,2,0],[2,1,1]) -> [2,2,0,2,1,1];
([],[]) -> [];
([0,0,2],[3,1,0]) -> [0,0,2,3,1,0];
([1,3],[]) -> [1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00810299999989 true true

([3],[0,1]) -> [3,0,1];
([1],[]) -> [1];
([3],[]) -> [3];
([2],[0,3]) -> [2,0,3];
([],[]) -> [];
([],[1,3,0]) -> [1,3,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons (#2.1 y1, ys) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00713100000007 false true

([1,3,2],[3,3,2]) -> [1,3,2,3,3,2];
([],[]) -> [];
([1],[2,2]) -> [1,2,2];
([3],[]) -> [3];
([0,1],[2]) -> [0,1,2];
([1,2],[3,0,3]) -> [1,2,3,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0087739999999 true true

([1,0,2],[1,2,2]) -> [1,0,2,1,2,2];
([3],[2,0,0]) -> [3,2,0,0];
([2],[0]) -> [2,0];
([],[]) -> [];
([1,3,2],[]) -> [1,3,2];
([1,3],[]) -> [1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00925699999993 true true

([],[]) -> [];
([3,3],[]) -> [3,3];
([3],[0]) -> [3,0];
([0,0],[1,2]) -> [0,0,1,2];
([0,3],[2]) -> [0,3,2];
([],[0]) -> [0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00706500000001 true true

([0,3],[1,2]) -> [0,3,1,2];
([1,2],[0,2]) -> [1,2,0,2];
([3,3,3],[3]) -> [3,3,3,3];
([0,2,2],[1,0]) -> [0,2,2,1,0];
([0],[3,3]) -> [0,3,3];
([3],[0,1,0]) -> [3,0,1,0];

=================================
NOSOL

([0,1,2],[0,3,1]) -> [0,1,2,0,3,1];
([3],[]) -> [3];
([],[3,2]) -> [3,2];
([2,3,2],[1]) -> [2,3,2,1];
([],[]) -> [];
([],[2,2]) -> [2,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00804799999992 true true

([],[1]) -> [1];
([],[2]) -> [2];
([2],[]) -> [2];
([0,2,2],[]) -> [0,2,2];
([2,2,0],[]) -> [2,2,0];
([3,2,3],[2,0]) -> [3,2,3,2,0];
([],[2,0,0]) -> [2,0,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0106290000001 true true

([0,3,2],[]) -> [0,3,2];
([2,3,0],[3]) -> [2,3,0,3];
([1],[1,3,3]) -> [1,1,3,3];
([1],[1,2]) -> [1,1,2];
([],[2]) -> [2];
([],[1,2]) -> [1,2];
([2,3],[3]) -> [2,3,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0129629999999 true true

([0],[2,1]) -> [0,2,1];
([0,2,3],[1,0,0]) -> [0,2,3,1,0,0];
([2,2,2],[2,2,2]) -> [2,2,2,2,2,2];
([1,3,0],[2]) -> [1,3,0,2];
([3,3],[3,1]) -> [3,3,3,1];
([0],[0,2,3]) -> [0,0,2,3];
([3,3],[]) -> [3,3];

=================================
NOSOL

([],[2,1]) -> [2,1];
([],[1]) -> [1];
([0,3],[]) -> [0,3];
([2],[0]) -> [2,0];
([0,1],[]) -> [0,1];
([2,2,2],[1,0,3]) -> [2,2,2,1,0,3];
([3],[0,0]) -> [3,0,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.01099 true true

([3,1,3],[3,2]) -> [3,1,3,3,2];
([1,0,2],[0,0,2]) -> [1,0,2,0,0,2];
([],[2,2,0]) -> [2,2,0];
([0,0],[1,0,2]) -> [0,0,1,0,2];
([1,3,1],[]) -> [1,3,1];
([3,0,2],[3,0,3]) -> [3,0,2,3,0,3];
([0,1,1],[1]) -> [0,1,1,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.016005 true true

([1,2,0],[]) -> [1,2,0];
([2],[1,1,0]) -> [2,1,1,0];
([],[]) -> [];
([1,1,1],[1,3]) -> [1,1,1,1,3];
([0],[]) -> [0];
([],[1,2]) -> [1,2];
([3],[1,1,0]) -> [3,1,1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0076140000001 true true

([0,3],[2,0,2]) -> [0,3,2,0,2];
([],[2,3,3]) -> [2,3,3];
([3,1,0],[3,1,1]) -> [3,1,0,3,1,1];
([1,3,2],[3,2,3]) -> [1,3,2,3,2,3];
([3,3],[1,0,3]) -> [3,3,1,0,3];
([3],[0,2]) -> [3,0,2];
([],[1]) -> [1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0106430000001 true true

([1],[]) -> [1];
([0,3,3],[]) -> [0,3,3];
([1,2],[2,2]) -> [1,2,2,2];
([1],[2]) -> [1,2];
([0,0],[0]) -> [0,0,0];
([3],[0]) -> [3,0];
([1,3],[2]) -> [1,3,2];

=================================
NOSOL

([3],[]) -> [3];
([2,1,3],[]) -> [2,1,3];
([2],[1]) -> [2,1];
([1,2,3],[3,0,2]) -> [1,2,3,3,0,2];
([0,1],[2,2]) -> [0,1,2,2];
([],[3,3]) -> [3,3];
([2],[2,0]) -> [2,2,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0113120000001 true true

([1],[0,3,0]) -> [1,0,3,0];
([1,0,2],[1,0,1]) -> [1,0,2,1,0,1];
([0],[1]) -> [0,1];
([],[3]) -> [3];
([0,3],[1,0,0]) -> [0,3,1,0,0];
([1,0],[2]) -> [1,0,2];
([],[1,0]) -> [1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.013099 true true

([],[1]) -> [1];
([0,1],[0,3,3]) -> [0,1,0,3,3];
([3],[1,2]) -> [3,1,2];
([1,2,3],[]) -> [1,2,3];
([1],[2,1]) -> [1,2,1];
([3,0],[0,1]) -> [3,0,0,1];
([1,1],[2,1]) -> [1,1,2,1];
([0],[]) -> [0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.011526 true true

([0,3],[3]) -> [0,3,3];
([1],[2,2]) -> [1,2,2];
([2],[]) -> [2];
([1,2,3],[3,1]) -> [1,2,3,3,1];
([],[2,0]) -> [2,0];
([],[1,1,3]) -> [1,1,3];
([3],[2]) -> [3,2];
([0],[3,2]) -> [0,3,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0122280000001 true true

([0],[0,0]) -> [0,0,0];
([0,2],[0,1]) -> [0,2,0,1];
([1,2,1],[2,3,2]) -> [1,2,1,2,3,2];
([],[0,3,2]) -> [0,3,2];
([2,2,1],[]) -> [2,2,1];
([2],[1,1]) -> [2,1,1];
([2,2,1],[1,3]) -> [2,2,1,1,3];
([1],[1]) -> [1,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0148670000001 true true

([],[2]) -> [2];
([],[0]) -> [0];
([3],[]) -> [3];
([1,1,1],[2,2]) -> [1,1,1,2,2];
([2,2],[]) -> [2,2];
([3,1],[0]) -> [3,1,0];
([],[]) -> [];
([0,2],[1]) -> [0,2,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00752200000011 true true

([],[3]) -> [3];
([0,0],[]) -> [0,0];
([2,1],[]) -> [2,1];
([0,3,0],[2,0]) -> [0,3,0,2,0];
([1,0],[0,3,0]) -> [1,0,0,3,0];
([0,0,1],[0]) -> [0,0,1,0];
([2],[2]) -> [2,2];
([3,2],[2,1]) -> [3,2,2,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0123249999999 true true

([3],[0,0,3]) -> [3,0,0,3];
([],[2]) -> [2];
([3,3],[]) -> [3,3];
([2],[]) -> [2];
([],[3,1,3]) -> [3,1,3];
([],[]) -> [];
([3,0],[0,3]) -> [3,0,0,3];
([3,0,2],[1,3]) -> [3,0,2,1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00842899999998 true true

([],[2]) -> [2];
([0,0],[0]) -> [0,0,0];
([],[3]) -> [3];
([],[1,2,2]) -> [1,2,2];
([],[1,0,3]) -> [1,0,3];
([2,1,0],[0,0]) -> [2,1,0,0,0];
([1],[0,0,1]) -> [1,0,0,1];
([],[2,2,1]) -> [2,2,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00880099999995 true true

([0],[1]) -> [0,1];
([0],[]) -> [0];
([0,1,1],[1,2,1]) -> [0,1,1,1,2,1];
([0,0],[0,1,3]) -> [0,0,0,1,3];
([0,2],[]) -> [0,2];
([0,1,1],[]) -> [0,1,1];
([3,1,0],[3,0,2]) -> [3,1,0,3,0,2];
([],[0]) -> [0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0121180000001 true true

([0,0,2],[1]) -> [0,0,2,1];
([0,2],[0,0,3]) -> [0,2,0,0,3];
([2,2],[]) -> [2,2];
([2,1,1],[]) -> [2,1,1];
([2,2,0],[2]) -> [2,2,0,2];
([0,1],[]) -> [0,1];
([1],[0,1,1]) -> [1,0,1,1];
([0],[1,3,1]) -> [0,1,3,1];

=================================
NOSOL

([0,1],[0,0]) -> [0,1,0,0];
([2,3,0],[1]) -> [2,3,0,1];
([1,1],[0,0]) -> [1,1,0,0];
([2,3,3],[]) -> [2,3,3];
([2,3],[0,1]) -> [2,3,0,1];
([],[0]) -> [0];
([0,3],[]) -> [0,3];
([3],[1]) -> [3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.021853 true true

([],[1,2]) -> [1,2];
([0],[0,0,1]) -> [0,0,0,1];
([0,1,1],[1,2]) -> [0,1,1,1,2];
([],[0,3,1]) -> [0,3,1];
([0],[2,3]) -> [0,2,3];
([],[0]) -> [0];
([3],[]) -> [3];
([2,1],[2,0,1]) -> [2,1,2,0,1];
([0,2],[]) -> [0,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0111690000001 true true

([],[0]) -> [0];
([],[2,0]) -> [2,0];
([0,2,2],[3,2,1]) -> [0,2,2,3,2,1];
([],[]) -> [];
([],[2,1,2]) -> [2,1,2];
([0,2],[]) -> [0,2];
([1,0,3],[2]) -> [1,0,3,2];
([0,3,3],[3,0,3]) -> [0,3,3,3,0,3];
([],[2,2,2]) -> [2,2,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0120999999999 true true

([0,2,1],[3,3,0]) -> [0,2,1,3,3,0];
([1,2,0],[3,2]) -> [1,2,0,3,2];
([],[]) -> [];
([1],[1]) -> [1,1];
([3,2],[]) -> [3,2];
([3,1],[2,3]) -> [3,1,2,3];
([3,3,1],[0]) -> [3,3,1,0];
([0],[]) -> [0];
([],[2]) -> [2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0085160000001 true true

([3,3,3],[3,0]) -> [3,3,3,3,0];
([2,3,3],[3]) -> [2,3,3,3];
([2],[]) -> [2];
([1,0,0],[1,3,0]) -> [1,0,0,1,3,0];
([3],[3,1,2]) -> [3,3,1,2];
([3],[3]) -> [3,3];
([0,3,2],[]) -> [0,3,2];
([],[1,1,1]) -> [1,1,1];
([2,3],[3]) -> [2,3,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0169550000001 true true

([1,1,2],[1,0]) -> [1,1,2,1,0];
([3,0],[]) -> [3,0];
([1],[3,0]) -> [1,3,0];
([],[1]) -> [1];
([1],[1,3]) -> [1,1,3];
([0,2,1],[0,2,2]) -> [0,2,1,0,2,2];
([2,3,0],[0,2]) -> [2,3,0,0,2];
([1],[1,0]) -> [1,1,0];
([1],[]) -> [1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0141289999999 true true

([0],[2]) -> [0,2];
([],[0,0,3]) -> [0,0,3];
([2,2],[3]) -> [2,2,3];
([],[2,2,1]) -> [2,2,1];
([],[2,3]) -> [2,3];
([3],[3,2]) -> [3,3,2];
([],[3,3,3]) -> [3,3,3];
([0,1,0],[0,1]) -> [0,1,0,0,1];
([],[3,3,2]) -> [3,3,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.011407 true true

([3,1,3],[1,3,0]) -> [3,1,3,1,3,0];
([0,0],[]) -> [0,0];
([],[]) -> [];
([2,2],[3,1,0]) -> [2,2,3,1,0];
([3,3],[2,3]) -> [3,3,2,3];
([],[0]) -> [0];
([],[3,1]) -> [3,1];
([2,1],[2]) -> [2,1,2];
([],[3]) -> [3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00712999999996 true true

([1,1,0],[2,3]) -> [1,1,0,2,3];
([3,2,3],[2]) -> [3,2,3,2];
([3,2,3],[2,0]) -> [3,2,3,2,0];
([2,3,0],[]) -> [2,3,0];
([0,1,3],[3,2,2]) -> [0,1,3,3,2,2];
([0],[]) -> [0];
([1,1,1],[3,0,3]) -> [1,1,1,3,0,3];
([1],[0,2]) -> [1,0,2];
([1,2,3],[3,2]) -> [1,2,3,3,2];

=================================
NOSOL

([],[2,2]) -> [2,2];
([3,1],[1,2,1]) -> [3,1,1,2,1];
([2,1,2],[1]) -> [2,1,2,1];
([],[2,0,0]) -> [2,0,0];
([3,2],[1]) -> [3,2,1];
([],[3,2,3]) -> [3,2,3];
([3],[2]) -> [3,2];
([3,2,3],[3]) -> [3,2,3,3];
([2],[1,3,1]) -> [2,1,3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.036934 true true

([1,2,0],[1,2]) -> [1,2,0,1,2];
([],[0]) -> [0];
([],[0,1]) -> [0,1];
([],[1]) -> [1];
([3,2,0],[]) -> [3,2,0];
([1,2],[2]) -> [1,2,2];
([],[2,1,1]) -> [2,1,1];
([0,1,0],[]) -> [0,1,0];
([],[0,3]) -> [0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0102609999999 true true

([2],[]) -> [2];
([0,2],[3,1,0]) -> [0,2,3,1,0];
([1],[]) -> [1];
([1,2],[3]) -> [1,2,3];
([2],[1]) -> [2,1];
([0,3],[2,2,1]) -> [0,3,2,2,1];
([1],[3,0]) -> [1,3,0];
([0],[2]) -> [0,2];
([2,3],[]) -> [2,3];
([],[]) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0097659999999 true true

([3],[2,1]) -> [3,2,1];
([3],[3]) -> [3,3];
([0],[]) -> [0];
([1,0,2],[3]) -> [1,0,2,3];
([0,2],[]) -> [0,2];
([3,3,1],[3,1,0]) -> [3,3,1,3,1,0];
([2,0],[2,3,2]) -> [2,0,2,3,2];
([],[1,3,2]) -> [1,3,2];
([3,1],[]) -> [3,1];
([2],[0]) -> [2,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0134869999999 true true

([1,0,3],[1,1,1]) -> [1,0,3,1,1,1];
([1,1,2],[3,1]) -> [1,1,2,3,1];
([0,0,3],[0,0,1]) -> [0,0,3,0,0,1];
([],[0,1]) -> [0,1];
([0,2,3],[0,3]) -> [0,2,3,0,3];
([2,2,2],[3,1,1]) -> [2,2,2,3,1,1];
([0,3],[1]) -> [0,3,1];
([3,0],[1,2]) -> [3,0,1,2];
([0,2,2],[3]) -> [0,2,2,3];
([1],[2]) -> [1,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0231739999999 true true

([3],[2]) -> [3,2];
([0,1],[0]) -> [0,1,0];
([0,1],[1]) -> [0,1,1];
([2],[3,0]) -> [2,3,0];
([],[1]) -> [1];
([3],[]) -> [3];
([0],[3]) -> [0,3];
([0,0,1],[]) -> [0,0,1];
([1],[0,2,2]) -> [1,0,2,2];
([3],[3,1]) -> [3,3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0158329999999 true true

([0,1,0],[1,2]) -> [0,1,0,1,2];
([0,1,2],[]) -> [0,1,2];
([3],[]) -> [3];
([1,0,1],[3]) -> [1,0,1,3];
([],[0]) -> [0];
([1],[0,0]) -> [1,0,0];
([],[3,2,3]) -> [3,2,3];
([1,2],[2,1,0]) -> [1,2,2,1,0];
([1,0,1],[3,2]) -> [1,0,1,3,2];
([1,3,2],[0,1]) -> [1,3,2,0,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0103670000001 true true

([2,0],[]) -> [2,0];
([2,2],[3,2,3]) -> [2,2,3,2,3];
([3,3],[1,2,0]) -> [3,3,1,2,0];
([2,2],[2]) -> [2,2,2];
([],[1,2,1]) -> [1,2,1];
([0,3,0],[1,0,3]) -> [0,3,0,1,0,3];
([],[1,1,2]) -> [1,1,2];
([0],[1,3]) -> [0,1,3];
([0,3,0],[]) -> [0,3,0];
([1,1,1],[0]) -> [1,1,1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.018047 true true

([0],[2,0]) -> [0,2,0];
([3,0,1],[2,1]) -> [3,0,1,2,1];
([0],[2,3,3]) -> [0,2,3,3];
([3],[]) -> [3];
([1],[2,2]) -> [1,2,2];
([],[0]) -> [0];
([0],[]) -> [0];
([3,2,1],[2,3,3]) -> [3,2,1,2,3,3];
([],[0,2]) -> [0,2];
([2],[2]) -> [2,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0125459999999 true true

([3],[2,0,2]) -> [3,2,0,2];
([],[1]) -> [1];
([0],[]) -> [0];
([1,3,1],[2,0,0]) -> [1,3,1,2,0,0];
([3],[3,0]) -> [3,3,0];
([3],[]) -> [3];
([1,1,2],[0,3,0]) -> [1,1,2,0,3,0];
([],[]) -> [];
([3,1,0],[0,3]) -> [3,1,0,0,3];
([1,2],[2,3]) -> [1,2,2,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00794999999994 true true

([],[3]) -> [3];
([3,2],[]) -> [3,2];
([3],[]) -> [3];
([0,0],[]) -> [0,0];
([],[3,3]) -> [3,3];
([0,1],[1,1,3]) -> [0,1,1,1,3];
([2],[]) -> [2];
([],[3,2,0]) -> [3,2,0];
([2,2,0],[]) -> [2,2,0];
([2,0,3],[]) -> [2,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0135290000001 true true

([],[2,2,3]) -> [2,2,3];
([],[]) -> [];
([0],[0]) -> [0,0];
([],[0,2,0]) -> [0,2,0];
([],[2,2,2]) -> [2,2,2];
([2,3,3],[3,3]) -> [2,3,3,3,3];
([0,3,1],[2,1,2]) -> [0,3,1,2,1,2];
([1,1,0],[3]) -> [1,1,0,3];
([0],[1,0]) -> [0,1,0];
([],[1]) -> [1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00842699999998 true true

([3,0,2],[1,1,1]) -> [3,0,2,1,1,1];
([],[3,1]) -> [3,1];
([0],[]) -> [0];
([2],[]) -> [2];
([2,2],[]) -> [2,2];
([1],[2,1]) -> [1,2,1];
([],[0,3]) -> [0,3];
([3,0],[]) -> [3,0];
([1,1,3],[3,2]) -> [1,1,3,3,2];
([],[0]) -> [0];
([2,0,3],[]) -> [2,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0139019999999 true true

([3,1],[1,3,2]) -> [3,1,1,3,2];
([1,3],[0,1]) -> [1,3,0,1];
([3,3],[1]) -> [3,3,1];
([3,3,1],[3,0]) -> [3,3,1,3,0];
([2,0,0],[0]) -> [2,0,0,0];
([1,1],[3]) -> [1,1,3];
([0,3],[2,3]) -> [0,3,2,3];
([3,1],[2]) -> [3,1,2];
([3,2,2],[3]) -> [3,2,2,3];
([],[3,3,1]) -> [3,3,1];
([0,1,0],[1,1]) -> [0,1,0,1,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0158859999999 true true

([0],[]) -> [0];
([],[]) -> [];
([],[2]) -> [2];
([],[0]) -> [0];
([2],[]) -> [2];
([0],[3,0]) -> [0,3,0];
([3,1,1],[0]) -> [3,1,1,0];
([3,3,2],[2,1,2]) -> [3,3,2,2,1,2];
([],[2,2,0]) -> [2,2,0];
([1],[]) -> [1];
([1,2,3],[1,1,0]) -> [1,2,3,1,1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0078860000001 true true

([],[1,2]) -> [1,2];
([0],[]) -> [0];
([3],[]) -> [3];
([2],[]) -> [2];
([3],[1,3]) -> [3,1,3];
([],[0,2,0]) -> [0,2,0];
([0],[0,0,1]) -> [0,0,0,1];
([],[]) -> [];
([3,0],[1,0,0]) -> [3,0,1,0,0];
([2],[0,3]) -> [2,0,3];
([3],[0,3]) -> [3,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00824800000009 true true

([2,2],[3,0,3]) -> [2,2,3,0,3];
([1],[2,3,0]) -> [1,2,3,0];
([0,0],[]) -> [0,0];
([3,0,0],[3]) -> [3,0,0,3];
([3,1,2],[2,2,2]) -> [3,1,2,2,2,2];
([2,1,3],[1,0]) -> [2,1,3,1,0];
([3],[2,2,0]) -> [3,2,2,0];
([1,2,1],[3]) -> [1,2,1,3];
([3,3],[1,3]) -> [3,3,1,3];
([0,3],[0,0,3]) -> [0,3,0,0,3];
([3],[3]) -> [3,3];

=================================
NOSOL

([],[3,1]) -> [3,1];
([2,0],[1,3]) -> [2,0,1,3];
([3,2],[2,2]) -> [3,2,2,2];
([0,3,3],[0,3,0]) -> [0,3,3,0,3,0];
([2,1,3],[3,0,0]) -> [2,1,3,3,0,0];
([0,3,1],[1,0]) -> [0,3,1,1,0];
([1,1,3],[0,3,1]) -> [1,1,3,0,3,1];
([1],[0,2]) -> [1,0,2];
([2,0],[]) -> [2,0];
([0,1,0],[0]) -> [0,1,0,0];
([0,0,1],[3,0,0]) -> [0,0,1,3,0,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.016764 true true

([],[]) -> [];
([2,0],[2,0,1]) -> [2,0,2,0,1];
([2,3,2],[3]) -> [2,3,2,3];
([],[2]) -> [2];
([],[3,2,1]) -> [3,2,1];
([2,1,2],[3]) -> [2,1,2,3];
([3,0,2],[2,0,1]) -> [3,0,2,2,0,1];
([1],[2,1]) -> [1,2,1];
([2,0],[3,0]) -> [2,0,3,0];
([0],[0,3]) -> [0,0,3];
([3],[1,0,3]) -> [3,1,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00832700000001 true true

([],[]) -> [];
([3],[2]) -> [3,2];
([3,1,0],[]) -> [3,1,0];
([],[1]) -> [1];
([1],[0]) -> [1,0];
([1],[2,1]) -> [1,2,1];
([3],[3]) -> [3,3];
([1],[]) -> [1];
([1,3],[0]) -> [1,3,0];
([],[3]) -> [3];
([1,1],[3]) -> [1,1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00881200000003 true true

([0,2,2],[0]) -> [0,2,2,0];
([0],[0,0]) -> [0,0,0];
([],[]) -> [];
([1,2],[]) -> [1,2];
([1,0,0],[3,2]) -> [1,0,0,3,2];
([2,1,2],[]) -> [2,1,2];
([3,2],[]) -> [3,2];
([2,2,2],[]) -> [2,2,2];
([],[1]) -> [1];
([2,1],[2]) -> [2,1,2];
([3,3,2],[0,0]) -> [3,3,2,0,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.014187 true true

([2],[3,0,3]) -> [2,3,0,3];
([0,2,3],[3,2,3]) -> [0,2,3,3,2,3];
([],[1]) -> [1];
([3,0,1],[2,3,0]) -> [3,0,1,2,3,0];
([0,0,3],[]) -> [0,0,3];
([0,0],[0,2,2]) -> [0,0,0,2,2];
([1,1],[2,2]) -> [1,1,2,2];
([],[0,0]) -> [0,0];
([0,2,2],[0,0]) -> [0,2,2,0,0];
([2,3],[0,2,3]) -> [2,3,0,2,3];
([],[]) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00762400000008 true true

([1,3],[1,1,2]) -> [1,3,1,1,2];
([3,2],[3,3]) -> [3,2,3,3];
([],[2,2]) -> [2,2];
([0,0,0],[]) -> [0,0,0];
([],[2]) -> [2];
([],[2,3]) -> [2,3];
([2,2],[0]) -> [2,2,0];
([3],[]) -> [3];
([1,1,3],[3,0,0]) -> [1,1,3,3,0,0];
([1,3,2],[3]) -> [1,3,2,3];
([0,3],[2,1]) -> [0,3,2,1];
([1,3],[]) -> [1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.014392 true true

([],[2,0]) -> [2,0];
([1,2,2],[]) -> [1,2,2];
([1,3,0],[3,3]) -> [1,3,0,3,3];
([1],[3,2]) -> [1,3,2];
([],[]) -> [];
([1],[0,2]) -> [1,0,2];
([1,0],[]) -> [1,0];
([1],[]) -> [1];
([2,3],[1,2]) -> [2,3,1,2];
([],[3]) -> [3];
([],[1,0]) -> [1,0];
([3,1,2],[]) -> [3,1,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00848399999995 true true

([2],[2,3]) -> [2,2,3];
([1],[]) -> [1];
([],[]) -> [];
([3],[2,2,2]) -> [3,2,2,2];
([2,0],[3,3]) -> [2,0,3,3];
([],[2,0,2]) -> [2,0,2];
([1,0],[1,3]) -> [1,0,1,3];
([],[2,1,3]) -> [2,1,3];
([1,3,1],[1,0,3]) -> [1,3,1,1,0,3];
([0],[0]) -> [0,0];
([3,2,0],[3,1,1]) -> [3,2,0,3,1,1];
([],[1,1]) -> [1,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00806800000009 true true

([0],[1,3,3]) -> [0,1,3,3];
([],[3,3,1]) -> [3,3,1];
([2,0,3],[2]) -> [2,0,3,2];
([],[3,1,0]) -> [3,1,0];
([2,0],[0,0,1]) -> [2,0,0,0,1];
([],[2]) -> [2];
([3],[0]) -> [3,0];
([],[1]) -> [1];
([],[]) -> [];
([0,2,1],[3]) -> [0,2,1,3];
([0,0],[3]) -> [0,0,3];
([],[0,0]) -> [0,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00745499999994 true true

([0,3,2],[2,2,3]) -> [0,3,2,2,2,3];
([2,1],[]) -> [2,1];
([1,1,2],[]) -> [1,1,2];
([],[]) -> [];
([3],[1]) -> [3,1];
([2,1,2],[2,2,0]) -> [2,1,2,2,2,0];
([3,0,0],[1]) -> [3,0,0,1];
([],[0]) -> [0];
([1,0],[0,0]) -> [1,0,0,0];
([2,0],[0,3,0]) -> [2,0,0,3,0];
([3,0],[]) -> [3,0];
([0,0],[1,2]) -> [0,0,1,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00841100000002 true true

([],[]) -> [];
([],[1,1,1]) -> [1,1,1];
([],[2,1,3]) -> [2,1,3];
([2,3,1],[1]) -> [2,3,1,1];
([3,3,3],[]) -> [3,3,3];
([0,2,3],[3]) -> [0,2,3,3];
([1,2,3],[1,3]) -> [1,2,3,1,3];
([],[0]) -> [0];
([2,0],[2,2]) -> [2,0,2,2];
([1,1,0],[1]) -> [1,1,0,1];
([],[2,1]) -> [2,1];
([1,3],[]) -> [1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00827400000003 true true

([],[2,2,2]) -> [2,2,2];
([0,0],[0]) -> [0,0,0];
([0,1],[2,1]) -> [0,1,2,1];
([0],[]) -> [0];
([0,0],[2,2,0]) -> [0,0,2,2,0];
([0,3],[]) -> [0,3];
([],[3,0]) -> [3,0];
([],[2]) -> [2];
([2],[1,3]) -> [2,1,3];
([2],[0,2,1]) -> [2,0,2,1];
([1],[1,0]) -> [1,1,0];
([2,2,3],[3,0]) -> [2,2,3,3,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0123189999999 true true

([0,3],[]) -> [0,3];
([0],[]) -> [0];
([3],[0,0,1]) -> [3,0,0,1];
([1,3],[0,1,0]) -> [1,3,0,1,0];
([2,1],[]) -> [2,1];
([0,1,0],[1]) -> [0,1,0,1];
([3,0,3],[0,2]) -> [3,0,3,0,2];
([3,3],[]) -> [3,3];
([2],[3,0,3]) -> [2,3,0,3];
([3,3],[2,0,2]) -> [3,3,2,0,2];
([],[0]) -> [0];
([3],[2]) -> [3,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.017259 true true

([1,1],[]) -> [1,1];
([1],[1]) -> [1,1];
([],[1,1]) -> [1,1];
([0,3,3],[]) -> [0,3,3];
([2,3,2],[0,0,0]) -> [2,3,2,0,0,0];
([2,1],[3,1]) -> [2,1,3,1];
([],[]) -> [];
([0,0],[3,0,3]) -> [0,0,3,0,3];
([],[0,0,1]) -> [0,0,1];
([0,1],[3,1]) -> [0,1,3,1];
([0,1],[]) -> [0,1];
([1],[2,1,0]) -> [1,2,1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00911999999994 true true

([2,1],[0]) -> [2,1,0];
([3],[3]) -> [3,3];
([],[1,1]) -> [1,1];
([3,2,1],[1,0]) -> [3,2,1,1,0];
([2,1],[0,3,3]) -> [2,1,0,3,3];
([1,2,3],[1]) -> [1,2,3,1];
([0,2],[1,0,2]) -> [0,2,1,0,2];
([],[0]) -> [0];
([1],[0,1,3]) -> [1,0,1,3];
([0,2],[1,1]) -> [0,2,1,1];
([],[]) -> [];
([1,0],[2,1]) -> [1,0,2,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00828999999999 true true

([3],[1,2,1]) -> [3,1,2,1];
([2,0],[]) -> [2,0];
([2],[]) -> [2];
([1,0],[1]) -> [1,0,1];
([0],[]) -> [0];
([3,1],[0,0,0]) -> [3,1,0,0,0];
([0,0,1],[]) -> [0,0,1];
([3,0,1],[2]) -> [3,0,1,2];
([2],[1]) -> [2,1];
([3,2,0],[2,2]) -> [3,2,0,2,2];
([],[]) -> [];
([3],[0,3,1]) -> [3,0,3,1];
([2,3],[2]) -> [2,3,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00971699999991 true true

([2],[2,1,1]) -> [2,2,1,1];
([0],[2,3]) -> [0,2,3];
([],[0,1,3]) -> [0,1,3];
([2,3],[3]) -> [2,3,3];
([],[1,3,0]) -> [1,3,0];
([1,2,1],[1,0]) -> [1,2,1,1,0];
([],[3,0]) -> [3,0];
([0,1,1],[2,2,2]) -> [0,1,1,2,2,2];
([3,0],[2,0,0]) -> [3,0,2,0,0];
([0],[2,1]) -> [0,2,1];
([3],[0,3]) -> [3,0,3];
([1],[2,1]) -> [1,2,1];
([2],[3,0]) -> [2,3,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0203730000001 true true

([1],[1,3]) -> [1,1,3];
([],[1]) -> [1];
([0,3],[1,1,0]) -> [0,3,1,1,0];
([2],[1]) -> [2,1];
([1],[3]) -> [1,3];
([2,3,2],[3,0,0]) -> [2,3,2,3,0,0];
([1,1],[2]) -> [1,1,2];
([0,2],[0]) -> [0,2,0];
([3],[3,0]) -> [3,3,0];
([2,2,0],[2,0]) -> [2,2,0,2,0];
([],[3,3,1]) -> [3,3,1];
([3,0],[0]) -> [3,0,0];
([1,1],[3]) -> [1,1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0140710000001 true true

([2],[3,3,0]) -> [2,3,3,0];
([1],[0]) -> [1,0];
([2,1,2],[]) -> [2,1,2];
([3,2],[]) -> [3,2];
([],[1]) -> [1];
([0,1],[3]) -> [0,1,3];
([1,2,1],[3]) -> [1,2,1,3];
([1],[2]) -> [1,2];
([],[2,1]) -> [2,1];
([2,2],[0]) -> [2,2,0];
([],[3,3,0]) -> [3,3,0];
([0,2],[]) -> [0,2];
([2,1],[3,0]) -> [2,1,3,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0135519999999 true true

([2],[3,2]) -> [2,3,2];
([2,1],[]) -> [2,1];
([1,3,0],[3,3]) -> [1,3,0,3,3];
([3,1],[1,1,0]) -> [3,1,1,1,0];
([1],[0,3,2]) -> [1,0,3,2];
([3],[3,3,1]) -> [3,3,3,1];
([2,2],[]) -> [2,2];
([0],[]) -> [0];
([3,1],[1]) -> [3,1,1];
([3],[1,3,3]) -> [3,1,3,3];
([1,2,2],[1,0,2]) -> [1,2,2,1,0,2];
([3],[1]) -> [3,1];
([0,1],[2,0,2]) -> [0,1,2,0,2];

=================================
NOSOL

([3,1,0],[2]) -> [3,1,0,2];
([3],[2]) -> [3,2];
([],[1,1]) -> [1,1];
([0,0],[1,0,1]) -> [0,0,1,0,1];
([2,0,0],[3,3]) -> [2,0,0,3,3];
([2],[3,2]) -> [2,3,2];
([2,0],[3,0]) -> [2,0,3,0];
([0],[3,2]) -> [0,3,2];
([3,1],[3,1]) -> [3,1,3,1];
([1],[1,1,1]) -> [1,1,1,1];
([1],[0,1]) -> [1,0,1];
([],[]) -> [];
([2,1],[3,1]) -> [2,1,3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00925699999993 true true

([3,0,2],[1]) -> [3,0,2,1];
([1,0,0],[0,0]) -> [1,0,0,0,0];
([1,1],[0,3,2]) -> [1,1,0,3,2];
([],[3]) -> [3];
([1],[]) -> [1];
([],[1,0,2]) -> [1,0,2];
([1,2,2],[]) -> [1,2,2];
([2,0,0],[1]) -> [2,0,0,1];
([2,2],[]) -> [2,2];
([0,2,1],[1]) -> [0,2,1,1];
([1,2,1],[]) -> [1,2,1];
([0,1,3],[3,0,3]) -> [0,1,3,3,0,3];
([],[1]) -> [1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0150980000001 true true

([1,2,0],[2,0]) -> [1,2,0,2,0];
([2,3],[]) -> [2,3];
([],[0,0,0]) -> [0,0,0];
([0],[]) -> [0];
([1,2],[3]) -> [1,2,3];
([3,0],[]) -> [3,0];
([0],[1,3]) -> [0,1,3];
([2,1,0],[2]) -> [2,1,0,2];
([2],[]) -> [2];
([0],[0,1,3]) -> [0,0,1,3];
([],[1,1,1]) -> [1,1,1];
([0],[1]) -> [0,1];
([1,0],[]) -> [1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.013602 true true

([1,0],[3,3,0]) -> [1,0,3,3,0];
([1,0],[0,0,2]) -> [1,0,0,0,2];
([1,0],[0]) -> [1,0,0];
([3],[1]) -> [3,1];
([3,3,2],[2]) -> [3,3,2,2];
([2,3,2],[2,3]) -> [2,3,2,2,3];
([0,0],[1,0]) -> [0,0,1,0];
([1,1,0],[0]) -> [1,1,0,0];
([1],[0,1]) -> [1,0,1];
([3,2],[0,2,3]) -> [3,2,0,2,3];
([1,0],[0,2]) -> [1,0,0,2];
([1,3],[]) -> [1,3];
([3],[3]) -> [3,3];

=================================
NOSOL

([3,0],[3,3]) -> [3,0,3,3];
([],[]) -> [];
([0,1,0],[]) -> [0,1,0];
([1],[0,2,3]) -> [1,0,2,3];
([0,1,2],[]) -> [0,1,2];
([2],[3,1]) -> [2,3,1];
([1,2,2],[]) -> [1,2,2];
([3,0,1],[3,2]) -> [3,0,1,3,2];
([2,1,2],[0,2]) -> [2,1,2,0,2];
([0],[2,1]) -> [0,2,1];
([1],[]) -> [1];
([1,2],[1]) -> [1,2,1];
([],[1,3,1]) -> [1,3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00829599999997 true true

([0,2],[3,0,1]) -> [0,2,3,0,1];
([2,3,0],[0]) -> [2,3,0,0];
([2,1,1],[1,3,3]) -> [2,1,1,1,3,3];
([1,1],[1,0,3]) -> [1,1,1,0,3];
([0],[0,1,3]) -> [0,0,1,3];
([0],[3,2,3]) -> [0,3,2,3];
([1,1,1],[3,3,0]) -> [1,1,1,3,3,0];
([3,0,2],[1,0,2]) -> [3,0,2,1,0,2];
([0],[]) -> [0];
([0,2,0],[]) -> [0,2,0];
([1,0,2],[]) -> [1,0,2];
([2,0,2],[2,0]) -> [2,0,2,2,0];
([],[]) -> [];
([3,0],[1]) -> [3,0,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0123679999999 true true

([1,0],[3]) -> [1,0,3];
([3],[2]) -> [3,2];
([1],[2,1]) -> [1,2,1];
([3,2],[0,3]) -> [3,2,0,3];
([0,2],[3]) -> [0,2,3];
([0],[0]) -> [0,0];
([],[1,2,1]) -> [1,2,1];
([1,3],[1,3,3]) -> [1,3,1,3,3];
([0,0,2],[1,2]) -> [0,0,2,1,2];
([2,3],[1]) -> [2,3,1];
([3],[3]) -> [3,3];
([0,2],[3,2]) -> [0,2,3,2];
([0,2],[1]) -> [0,2,1];
([],[2,0,0]) -> [2,0,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.013956 true true

([1],[1]) -> [1,1];
([3,3],[]) -> [3,3];
([],[]) -> [];
([1,3,0],[3]) -> [1,3,0,3];
([3,3],[2,2]) -> [3,3,2,2];
([3,1],[1,0]) -> [3,1,1,0];
([1,3],[1,2,1]) -> [1,3,1,2,1];
([2,3],[]) -> [2,3];
([],[1]) -> [1];
([0,3],[0,0]) -> [0,3,0,0];
([],[0]) -> [0];
([0],[0]) -> [0,0];
([0,2],[3,0]) -> [0,2,3,0];
([],[1,1,2]) -> [1,1,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00930300000005 true true

([2,2],[2,1]) -> [2,2,2,1];
([3],[2,1]) -> [3,2,1];
([0],[0]) -> [0,0];
([2,0,2],[]) -> [2,0,2];
([],[1]) -> [1];
([2],[]) -> [2];
([],[]) -> [];
([0,0,2],[]) -> [0,0,2];
([2,0],[]) -> [2,0];
([0,3],[1]) -> [0,3,1];
([1,0,3],[0,0]) -> [1,0,3,0,0];
([],[3,2]) -> [3,2];
([0,2],[0]) -> [0,2,0];
([0,3,1],[3,3]) -> [0,3,1,3,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00912500000004 true true

([1,3],[1,1]) -> [1,3,1,1];
([1,1,1],[0]) -> [1,1,1,0];
([2,0,0],[]) -> [2,0,0];
([3],[0,0]) -> [3,0,0];
([],[3,2]) -> [3,2];
([],[]) -> [];
([1,0,0],[]) -> [1,0,0];
([1,1,1],[3,1,2]) -> [1,1,1,3,1,2];
([2],[1]) -> [2,1];
([1],[2,1,3]) -> [1,2,1,3];
([],[0,3,3]) -> [0,3,3];
([2,0,0],[2]) -> [2,0,0,2];
([0],[3,3,3]) -> [0,3,3,3];
([2],[1,2]) -> [2,1,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0095839999999 true true

([2,0,3],[]) -> [2,0,3];
([0],[1]) -> [0,1];
([3],[1,0,3]) -> [3,1,0,3];
([3],[2]) -> [3,2];
([2,0,1],[0,3]) -> [2,0,1,0,3];
([0,0],[0]) -> [0,0,0];
([1],[]) -> [1];
([1,2,1],[1]) -> [1,2,1,1];
([1,2],[0,2,2]) -> [1,2,0,2,2];
([2,0,1],[0]) -> [2,0,1,0];
([1,0],[3,2,1]) -> [1,0,3,2,1];
([3],[1]) -> [3,1];
([3,1,0],[1,0]) -> [3,1,0,1,0];
([],[3,2]) -> [3,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.01604 true true

([0],[3]) -> [0,3];
([1,1],[1,1]) -> [1,1,1,1];
([2,3],[1,1,1]) -> [2,3,1,1,1];
([],[2,0,1]) -> [2,0,1];
([2],[]) -> [2];
([2],[1,0]) -> [2,1,0];
([],[]) -> [];
([1,1,1],[0]) -> [1,1,1,0];
([1,2],[3,1]) -> [1,2,3,1];
([3],[2,2,3]) -> [3,2,2,3];
([],[1,0,2]) -> [1,0,2];
([2,1,2],[3,2]) -> [2,1,2,3,2];
([],[1]) -> [1];
([3,1,0],[0,0,1]) -> [3,1,0,0,0,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00901500000009 true true

([2,2],[2,1]) -> [2,2,2,1];
([0,1],[1]) -> [0,1,1];
([1,3,3],[0,2,3]) -> [1,3,3,0,2,3];
([3],[1]) -> [3,1];
([2,3],[]) -> [2,3];
([0],[3,0,2]) -> [0,3,0,2];
([2],[3,1,3]) -> [2,3,1,3];
([0],[]) -> [0];
([2,3,0],[0,0]) -> [2,3,0,0,0];
([1],[0,3,0]) -> [1,0,3,0];
([0],[1,0,3]) -> [0,1,0,3];
([0,2],[]) -> [0,2];
([],[1]) -> [1];
([3,0,2],[2,0,3]) -> [3,0,2,2,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.015711 true true

([],[1]) -> [1];
([0,1,3],[0,2,3]) -> [0,1,3,0,2,3];
([],[2,0,1]) -> [2,0,1];
([3,0,3],[0,2]) -> [3,0,3,0,2];
([],[0,3]) -> [0,3];
([],[]) -> [];
([2],[1,0]) -> [2,1,0];
([0],[3,2]) -> [0,3,2];
([1],[2,3,2]) -> [1,2,3,2];
([3,1,0],[0]) -> [3,1,0,0];
([3,1],[2,0,0]) -> [3,1,2,0,0];
([2,1,1],[2,1]) -> [2,1,1,2,1];
([3],[2,1,1]) -> [3,2,1,1];
([],[0]) -> [0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00992599999995 true true

([1],[3,3,3]) -> [1,3,3,3];
([],[]) -> [];
([3,2,0],[1,1]) -> [3,2,0,1,1];
([0,0,2],[3]) -> [0,0,2,3];
([2],[0,2]) -> [2,0,2];
([0],[1]) -> [0,1];
([2,1],[0]) -> [2,1,0];
([0],[2]) -> [0,2];
([],[0,2,3]) -> [0,2,3];
([0,2],[]) -> [0,2];
([],[3]) -> [3];
([],[0]) -> [0];
([1,2],[2]) -> [1,2,2];
([],[1,2]) -> [1,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00881200000003 true true

([],[3,1]) -> [3,1];
([0,2,0],[0,2]) -> [0,2,0,0,2];
([],[3,3,3]) -> [3,3,3];
([2,1],[3]) -> [2,1,3];
([],[0,2,0]) -> [0,2,0];
([],[]) -> [];
([1],[3]) -> [1,3];
([2,0,0],[1]) -> [2,0,0,1];
([0],[1,0,2]) -> [0,1,0,2];
([2,1,0],[0,0]) -> [2,1,0,0,0];
([1,1,2],[0,0]) -> [1,1,2,0,0];
([0],[2,2]) -> [0,2,2];
([],[2]) -> [2];
([],[3,2,1]) -> [3,2,1];
([0,1,1],[]) -> [0,1,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00853099999995 true true

([1],[]) -> [1];
([2],[2,3]) -> [2,2,3];
([3],[3]) -> [3,3];
([0,3,3],[0]) -> [0,3,3,0];
([],[2,1,0]) -> [2,1,0];
([1],[3,0]) -> [1,3,0];
([],[3,3]) -> [3,3];
([1,3],[1,3,3]) -> [1,3,1,3,3];
([0,3,2],[1,1]) -> [0,3,2,1,1];
([2,0],[0,3,2]) -> [2,0,0,3,2];
([0,1],[2,2,0]) -> [0,1,2,2,0];
([1],[2,3,1]) -> [1,2,3,1];
([1,2],[3,0,3]) -> [1,2,3,0,3];
([],[3,0]) -> [3,0];
([3],[2,3,1]) -> [3,2,3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0161519999999 true true

([2,0],[0,2,3]) -> [2,0,0,2,3];
([],[2,2,2]) -> [2,2,2];
([],[]) -> [];
([3],[2,1]) -> [3,2,1];
([2,3,0],[]) -> [2,3,0];
([3,3,3],[3,3]) -> [3,3,3,3,3];
([3,0],[0]) -> [3,0,0];
([1,2,0],[0,2]) -> [1,2,0,0,2];
([0,2],[1]) -> [0,2,1];
([2],[0]) -> [2,0];
([],[1,1,2]) -> [1,1,2];
([1,2,3],[0,0]) -> [1,2,3,0,0];
([3,0,0],[1,1,3]) -> [3,0,0,1,1,3];
([3],[3,2,0]) -> [3,3,2,0];
([0,1],[0]) -> [0,1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00974300000007 true true

([3,2,3],[2,0,3]) -> [3,2,3,2,0,3];
([2,3],[1]) -> [2,3,1];
([1,2,0],[0]) -> [1,2,0,0];
([1,0],[0]) -> [1,0,0];
([3],[0,3]) -> [3,0,3];
([2,3,0],[3,0,1]) -> [2,3,0,3,0,1];
([],[3]) -> [3];
([2],[1,2,3]) -> [2,1,2,3];
([3,1,0],[]) -> [3,1,0];
([],[2,2]) -> [2,2];
([2,3,3],[2,1]) -> [2,3,3,2,1];
([0,2,2],[0,0,0]) -> [0,2,2,0,0,0];
([1,2,2],[]) -> [1,2,2];
([],[0,2,0]) -> [0,2,0];
([],[]) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00922500000001 true true

([2,3],[1,3]) -> [2,3,1,3];
([3,2,1],[]) -> [3,2,1];
([],[3,1]) -> [3,1];
([2,2,1],[2,1]) -> [2,2,1,2,1];
([2],[1,0,0]) -> [2,1,0,0];
([],[0,2]) -> [0,2];
([3,0,1],[0,0]) -> [3,0,1,0,0];
([2,2],[0,2,1]) -> [2,2,0,2,1];
([],[2]) -> [2];
([2,0],[1]) -> [2,0,1];
([3],[1,2]) -> [3,1,2];
([0],[0,1,2]) -> [0,0,1,2];
([1,1,0],[3,2,1]) -> [1,1,0,3,2,1];
([],[1,2,3]) -> [1,2,3];
([3],[3,1]) -> [3,3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.013905 true true

([],[]) -> [];
([],[2]) -> [2];
([3,0,1],[2,1,1]) -> [3,0,1,2,1,1];
([0],[0,2,0]) -> [0,0,2,0];
([],[1,2]) -> [1,2];
([0,0,1],[1,3]) -> [0,0,1,1,3];
([3],[3,2,1]) -> [3,3,2,1];
([0,3],[1,3,1]) -> [0,3,1,3,1];
([2,1],[]) -> [2,1];
([3,3,1],[]) -> [3,3,1];
([1],[3,2]) -> [1,3,2];
([1,1],[1,1,0]) -> [1,1,1,1,0];
([0],[]) -> [0];
([2],[]) -> [2];
([0,0,2],[]) -> [0,0,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0174480000001 true true

([],[]) -> [];
([],[2,1]) -> [2,1];
([3],[]) -> [3];
([0,0],[1,2]) -> [0,0,1,2];
([3,1],[0]) -> [3,1,0];
([0],[0]) -> [0,0];
([2,1],[1,3]) -> [2,1,1,3];
([],[3,0,2]) -> [3,0,2];
([2,0,2],[0]) -> [2,0,2,0];
([],[2,0]) -> [2,0];
([0,0],[1,3,1]) -> [0,0,1,3,1];
([2,1,3],[3,1]) -> [2,1,3,3,1];
([],[0,1,1]) -> [0,1,1];
([0,0],[]) -> [0,0];
([1,0],[2]) -> [1,0,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00913799999989 true true

([0,1,2],[]) -> [0,1,2];
([],[1,0]) -> [1,0];
([3,1],[]) -> [3,1];
([],[]) -> [];
([],[0,0,3]) -> [0,0,3];
([],[0,1]) -> [0,1];
([1,1,3],[2,3,0]) -> [1,1,3,2,3,0];
([1,2],[3,1]) -> [1,2,3,1];
([1,0,1],[1,0,0]) -> [1,0,1,1,0,0];
([1,3],[0]) -> [1,3,0];
([],[0,3]) -> [0,3];
([3,3],[]) -> [3,3];
([],[3,1,1]) -> [3,1,1];
([1,0],[1]) -> [1,0,1];
([2,3,1],[1,1]) -> [2,3,1,1,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00954400000001 true true

([0,2,2],[0]) -> [0,2,2,0];
([1],[0,0]) -> [1,0,0];
([2,1,2],[0,1]) -> [2,1,2,0,1];
([2],[3,3,1]) -> [2,3,3,1];
([0,1],[0,3,2]) -> [0,1,0,3,2];
([],[2,0]) -> [2,0];
([],[1]) -> [1];
([],[1,2]) -> [1,2];
([2],[1]) -> [2,1];
([3,2,2],[2,2]) -> [3,2,2,2,2];
([0],[]) -> [0];
([0,0],[2,3,0]) -> [0,0,2,3,0];
([2],[]) -> [2];
([1],[]) -> [1];
([2,0],[1]) -> [2,0,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.013774 true true

([],[3,3]) -> [3,3];
([2,1],[1,3,1]) -> [2,1,1,3,1];
([0],[2,2,1]) -> [0,2,2,1];
([3,0],[2,2]) -> [3,0,2,2];
([],[2,2]) -> [2,2];
([0,2],[1]) -> [0,2,1];
([1],[3]) -> [1,3];
([0],[1,3]) -> [0,1,3];
([],[1]) -> [1];
([0],[]) -> [0];
([],[2,2,2]) -> [2,2,2];
([3,1],[]) -> [3,1];
([2,1,0],[]) -> [2,1,0];
([1],[2]) -> [1,2];
([3,1,3],[2,3,2]) -> [3,1,3,2,3,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0141169999999 true true

([2],[2,3,3]) -> [2,2,3,3];
([0],[2,2]) -> [0,2,2];
([],[]) -> [];
([3,3],[]) -> [3,3];
([],[3]) -> [3];
([2,1],[1,1,3]) -> [2,1,1,1,3];
([0],[]) -> [0];
([3],[1,0]) -> [3,1,0];
([1,2],[3]) -> [1,2,3];
([3,2,3],[]) -> [3,2,3];
([0,0,3],[2]) -> [0,0,3,2];
([1,0],[]) -> [1,0];
([1,3],[]) -> [1,3];
([0],[0,3,2]) -> [0,0,3,2];
([],[0,1]) -> [0,1];
([1,2,2],[2,1,1]) -> [1,2,2,2,1,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00922300000002 true true

([2,2],[2,1,1]) -> [2,2,2,1,1];
([1],[1,0,0]) -> [1,1,0,0];
([3,2],[2,1]) -> [3,2,2,1];
([3,1],[3,1,3]) -> [3,1,3,1,3];
([2,0,3],[]) -> [2,0,3];
([3,3],[2]) -> [3,3,2];
([],[]) -> [];
([],[0,0,1]) -> [0,0,1];
([],[2,1]) -> [2,1];
([2,0,2],[]) -> [2,0,2];
([2,3,1],[3]) -> [2,3,1,3];
([0,0,1],[1,0,0]) -> [0,0,1,1,0,0];
([],[3,3,2]) -> [3,3,2];
([0,1],[2]) -> [0,1,2];
([1],[0,1,0]) -> [1,0,1,0];
([3,3],[3,1]) -> [3,3,3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00988499999994 true true

([3],[0,0]) -> [3,0,0];
([2,1],[]) -> [2,1];
([],[0,0,0]) -> [0,0,0];
([0,1,2],[2,0,3]) -> [0,1,2,2,0,3];
([1,1,1],[]) -> [1,1,1];
([],[0,2]) -> [0,2];
([0,3],[3]) -> [0,3,3];
([],[]) -> [];
([2,3],[1,3,2]) -> [2,3,1,3,2];
([3,1],[1,3,0]) -> [3,1,1,3,0];
([],[2,2]) -> [2,2];
([3],[0,3,3]) -> [3,0,3,3];
([3],[2,1,0]) -> [3,2,1,0];
([0,3,0],[1]) -> [0,3,0,1];
([0,2],[3,3]) -> [0,2,3,3];
([1,3],[]) -> [1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.010025 true true

([0,0,3],[1,0,3]) -> [0,0,3,1,0,3];
([3,0],[0,0,1]) -> [3,0,0,0,1];
([2,3],[]) -> [2,3];
([0,0],[3,0,1]) -> [0,0,3,0,1];
([3],[2]) -> [3,2];
([0,1],[0,3,2]) -> [0,1,0,3,2];
([1,3,1],[0]) -> [1,3,1,0];
([],[1,0,2]) -> [1,0,2];
([3,2],[3,1,1]) -> [3,2,3,1,1];
([],[3]) -> [3];
([2],[1,1]) -> [2,1,1];
([3],[2,3,1]) -> [3,2,3,1];
([0,0],[]) -> [0,0];
([3,2],[2,3]) -> [3,2,2,3];
([3,2,1],[]) -> [3,2,1];
([],[0]) -> [0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.014539 true true

([0,0],[2]) -> [0,0,2];
([1,3,1],[3]) -> [1,3,1,3];
([3],[0,0]) -> [3,0,0];
([3],[]) -> [3];
([0,2],[0,0]) -> [0,2,0,0];
([],[2,1,1]) -> [2,1,1];
([2],[1]) -> [2,1];
([],[0,1,0]) -> [0,1,0];
([],[3,1]) -> [3,1];
([2,0],[]) -> [2,0];
([3],[1,1]) -> [3,1,1];
([1],[]) -> [1];
([],[]) -> [];
([2],[2,3]) -> [2,2,3];
([1],[0,3]) -> [1,0,3];
([3,0],[]) -> [3,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00902900000006 true true

([],[3,0,2]) -> [3,0,2];
([0,1,1],[2,3]) -> [0,1,1,2,3];
([1,3],[3]) -> [1,3,3];
([2],[0]) -> [2,0];
([3,1],[2]) -> [3,1,2];
([1,2],[1]) -> [1,2,1];
([0,1,1],[2,1]) -> [0,1,1,2,1];
([1],[3,3,3]) -> [1,3,3,3];
([3,0],[3]) -> [3,0,3];
([1,2,1],[0,1]) -> [1,2,1,0,1];
([2],[2,2,2]) -> [2,2,2,2];
([1,3],[]) -> [1,3];
([2],[2]) -> [2,2];
([0,3],[3]) -> [0,3,3];
([],[]) -> [];
([2,3],[1,1,2]) -> [2,3,1,1,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00928500000009 true true

([0],[0,1,0]) -> [0,0,1,0];
([1,1,1],[]) -> [1,1,1];
([2,0],[0]) -> [2,0,0];
([],[]) -> [];
([2,3,1],[]) -> [2,3,1];
([2,2],[]) -> [2,2];
([0],[]) -> [0];
([0,3],[]) -> [0,3];
([2,1,1],[0,0]) -> [2,1,1,0,0];
([],[1,3]) -> [1,3];
([3,0,1],[1,3]) -> [3,0,1,1,3];
([2,2],[2,2]) -> [2,2,2,2];
([0,1],[]) -> [0,1];
([3],[]) -> [3];
([3,0],[]) -> [3,0];
([1,3,1],[3,3]) -> [1,3,1,3,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00993799999992 true true

([3],[0,2]) -> [3,0,2];
([1,0],[1]) -> [1,0,1];
([1,1,2],[2,0]) -> [1,1,2,2,0];
([1],[0]) -> [1,0];
([2,2],[]) -> [2,2];
([3],[1]) -> [3,1];
([3,2],[]) -> [3,2];
([0,3],[1,3]) -> [0,3,1,3];
([],[1,1,2]) -> [1,1,2];
([1],[0,1,3]) -> [1,0,1,3];
([3,2,0],[3]) -> [3,2,0,3];
([1,2,0],[3,2,1]) -> [1,2,0,3,2,1];
([3,1,1],[1,3]) -> [3,1,1,1,3];
([],[]) -> [];
([1],[2]) -> [1,2];
([],[1,3]) -> [1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00898200000006 true true

([],[]) -> [];
([2],[3]) -> [2,3];
([1,0],[1,0]) -> [1,0,1,0];
([3,0,3],[]) -> [3,0,3];
([],[0]) -> [0];
([3],[]) -> [3];
([],[3,1]) -> [3,1];
([2,0],[]) -> [2,0];
([2,3],[3,1]) -> [2,3,3,1];
([2],[1,1,3]) -> [2,1,1,3];
([],[2,2,3]) -> [2,2,3];
([1],[3,0]) -> [1,3,0];
([3],[3,2,2]) -> [3,3,2,2];
([0],[0,0]) -> [0,0,0];
([2,1,2],[2]) -> [2,1,2,2];
([1],[0,2,1]) -> [1,0,2,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00808099999995 true true

([],[1,2,3]) -> [1,2,3];
([1,1],[]) -> [1,1];
([1],[]) -> [1];
([3,1],[]) -> [3,1];
([],[]) -> [];
([1],[2,0,2]) -> [1,2,0,2];
([2,1,2],[3,0]) -> [2,1,2,3,0];
([3,3],[3]) -> [3,3,3];
([1],[1,2]) -> [1,1,2];
([2,3,0],[2,1,3]) -> [2,3,0,2,1,3];
([],[3,2,1]) -> [3,2,1];
([0],[0,2]) -> [0,0,2];
([3,0],[3]) -> [3,0,3];
([0,0],[1,3]) -> [0,0,1,3];
([0,3,2],[0,1,1]) -> [0,3,2,0,1,1];
([3,0,1],[1,2]) -> [3,0,1,1,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00988200000006 true true

([0],[0,2]) -> [0,0,2];
([3,0],[3]) -> [3,0,3];
([2],[0,2,2]) -> [2,0,2,2];
([],[2,1,1]) -> [2,1,1];
([],[3,1,3]) -> [3,1,3];
([2,1,3],[]) -> [2,1,3];
([0,1],[1,1,3]) -> [0,1,1,1,3];
([],[1,0]) -> [1,0];
([],[2,0]) -> [2,0];
([1,2,3],[2,3,1]) -> [1,2,3,2,3,1];
([3],[]) -> [3];
([],[1,1]) -> [1,1];
([],[]) -> [];
([0,2,3],[0,1,2]) -> [0,2,3,0,1,2];
([0],[0,2,0]) -> [0,0,2,0];
([1,3,0],[]) -> [1,3,0];
([1,2,0],[1,0,3]) -> [1,2,0,1,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0118600000001 true true

([],[3,1,0]) -> [3,1,0];
([0,3],[2,1]) -> [0,3,2,1];
([0],[]) -> [0];
([2,1],[3]) -> [2,1,3];
([],[]) -> [];
([3,1],[3,1,3]) -> [3,1,3,1,3];
([],[0,2]) -> [0,2];
([3],[1,1,2]) -> [3,1,1,2];
([3,3],[3,0,0]) -> [3,3,3,0,0];
([1,2,3],[]) -> [1,2,3];
([1],[]) -> [1];
([2,0,2],[1,3]) -> [2,0,2,1,3];
([2],[1,0]) -> [2,1,0];
([3,1,0],[1,2,1]) -> [3,1,0,1,2,1];
([3,1,3],[2,3,1]) -> [3,1,3,2,3,1];
([0,1,3],[3,1]) -> [0,1,3,3,1];
([3,1,1],[3,1,3]) -> [3,1,1,3,1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.010094 true true

([1],[2,1]) -> [1,2,1];
([2,0],[2,1]) -> [2,0,2,1];
([2,0,2],[]) -> [2,0,2];
([1,2,3],[1,0,3]) -> [1,2,3,1,0,3];
([1],[3,1]) -> [1,3,1];
([],[1]) -> [1];
([0,0,0],[2,0]) -> [0,0,0,2,0];
([0,2,3],[1,1,2]) -> [0,2,3,1,1,2];
([],[0]) -> [0];
([2,2,1],[2]) -> [2,2,1,2];
([3],[0,0]) -> [3,0,0];
([1,3,0],[]) -> [1,3,0];
([3,1,2],[]) -> [3,1,2];
([],[3]) -> [3];
([3,0],[0,0,0]) -> [3,0,0,0,0];
([0,0,1],[1,1,1]) -> [0,0,1,1,1,1];
([3],[]) -> [3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.023938 true true

([],[3,3,1]) -> [3,3,1];
([0],[3,0,0]) -> [0,3,0,0];
([],[2,2]) -> [2,2];
([2,2,1],[2,2,1]) -> [2,2,1,2,2,1];
([2],[]) -> [2];
([0,2,0],[0]) -> [0,2,0,0];
([2],[0]) -> [2,0];
([],[3,3]) -> [3,3];
([1,3],[]) -> [1,3];
([3,3],[1,2,0]) -> [3,3,1,2,0];
([0],[]) -> [0];
([3,3],[3]) -> [3,3,3];
([0,2,0],[3,2,3]) -> [0,2,0,3,2,3];
([],[3,1]) -> [3,1];
([2],[1]) -> [2,1];
([3,1,1],[1]) -> [3,1,1,1];
([],[0]) -> [0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0138010000001 true true

([3],[]) -> [3];
([1],[3,0]) -> [1,3,0];
([0,3,0],[]) -> [0,3,0];
([3],[1,2]) -> [3,1,2];
([1,3],[]) -> [1,3];
([],[2]) -> [2];
([1,3,2],[2,0]) -> [1,3,2,2,0];
([],[0]) -> [0];
([0,0],[]) -> [0,0];
([],[1]) -> [1];
([],[1,1]) -> [1,1];
([],[3,2,3]) -> [3,2,3];
([],[0,2,2]) -> [0,2,2];
([1],[]) -> [1];
([0,1],[]) -> [0,1];
([2,0,0],[1,3,2]) -> [2,0,0,1,3,2];
([3],[0]) -> [3,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.013551 true true

([1,0,1],[3,2]) -> [1,0,1,3,2];
([0,3],[0]) -> [0,3,0];
([1,0],[]) -> [1,0];
([3,2],[0,0]) -> [3,2,0,0];
([2],[]) -> [2];
([1],[0,1,1]) -> [1,0,1,1];
([0,0,0],[]) -> [0,0,0];
([],[3,1]) -> [3,1];
([],[0,1]) -> [0,1];
([0,2],[0,1,3]) -> [0,2,0,1,3];
([0,0,3],[2]) -> [0,0,3,2];
([1,0],[3]) -> [1,0,3];
([1],[1]) -> [1,1];
([2,1,1],[3]) -> [2,1,1,3];
([0,1,1],[]) -> [0,1,1];
([3,3,3],[0,2,3]) -> [3,3,3,0,2,3];
([0,1],[1]) -> [0,1,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0136480000001 true true

([1,0],[0,0,0]) -> [1,0,0,0,0];
([],[3]) -> [3];
([],[0,0,1]) -> [0,0,1];
([0,0,0],[3,0]) -> [0,0,0,3,0];
([1,3],[]) -> [1,3];
([0],[0,3,0]) -> [0,0,3,0];
([],[2,2]) -> [2,2];
([3,3,0],[]) -> [3,3,0];
([0],[2,0,3]) -> [0,2,0,3];
([2,0,0],[3,3]) -> [2,0,0,3,3];
([],[3,0]) -> [3,0];
([0],[3]) -> [0,3];
([2,3,1],[3]) -> [2,3,1,3];
([1,2,0],[]) -> [1,2,0];
([3,1],[]) -> [3,1];
([0],[3,1,1]) -> [0,3,1,1];
([0,0,3],[]) -> [0,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0241699999999 true true

([1,1,2],[0]) -> [1,1,2,0];
([3,2,2],[]) -> [3,2,2];
([1,2,0],[]) -> [1,2,0];
([0,3],[2,3,3]) -> [0,3,2,3,3];
([2,3,1],[]) -> [2,3,1];
([1,2,1],[]) -> [1,2,1];
([],[]) -> [];
([3,2,2],[3,1]) -> [3,2,2,3,1];
([2],[0]) -> [2,0];
([],[3,1]) -> [3,1];
([3,0,1],[]) -> [3,0,1];
([2],[2]) -> [2,2];
([2],[2,1]) -> [2,2,1];
([1],[]) -> [1];
([],[0,1]) -> [0,1];
([1],[3,1]) -> [1,3,1];
([1,3],[]) -> [1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00936000000002 true true

([2,1,3],[]) -> [2,1,3];
([3],[]) -> [3];
([],[0,3,2]) -> [0,3,2];
([0,0,2],[]) -> [0,0,2];
([],[1,1,3]) -> [1,1,3];
([],[]) -> [];
([0,1,2],[0,3]) -> [0,1,2,0,3];
([2],[1,1,1]) -> [2,1,1,1];
([],[3,1,2]) -> [3,1,2];
([1,3,1],[]) -> [1,3,1];
([0,2,3],[2,3]) -> [0,2,3,2,3];
([0],[2,2]) -> [0,2,2];
([1,0],[3,0,1]) -> [1,0,3,0,1];
([0,3],[3]) -> [0,3,3];
([1,1,2],[]) -> [1,1,2];
([1],[]) -> [1];
([1],[3,1]) -> [1,3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00959899999998 true true

([3,3,3],[3,0,1]) -> [3,3,3,3,0,1];
([1,2],[0,3,2]) -> [1,2,0,3,2];
([2],[1,0]) -> [2,1,0];
([2,0],[]) -> [2,0];
([2],[]) -> [2];
([1],[1]) -> [1,1];
([],[3,0,3]) -> [3,0,3];
([3,0],[2]) -> [3,0,2];
([1,3,0],[3,1,3]) -> [1,3,0,3,1,3];
([2,0,2],[]) -> [2,0,2];
([],[2]) -> [2];
([2],[0,0]) -> [2,0,0];
([3],[1]) -> [3,1];
([2],[3,3]) -> [2,3,3];
([0,1,0],[1,1,3]) -> [0,1,0,1,1,3];
([],[2,3]) -> [2,3];
([2,3],[1,0,3]) -> [2,3,1,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0154460000001 true true

([1],[]) -> [1];
([0,0,3],[0]) -> [0,0,3,0];
([0,2],[]) -> [0,2];
([],[2]) -> [2];
([0],[2,2]) -> [0,2,2];
([1],[0,1,0]) -> [1,0,1,0];
([3,0],[]) -> [3,0];
([2,3,0],[1]) -> [2,3,0,1];
([0],[0,0,0]) -> [0,0,0,0];
([2,0],[3,0,0]) -> [2,0,3,0,0];
([0,2,2],[2,2]) -> [0,2,2,2,2];
([0],[2,3]) -> [0,2,3];
([3,1],[2,3]) -> [3,1,2,3];
([1,2,1],[]) -> [1,2,1];
([],[2,1]) -> [2,1];
([1],[2]) -> [1,2];
([],[0,2,3]) -> [0,2,3];
([2,0,2],[0]) -> [2,0,2,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0172480000001 true true

([2],[0]) -> [2,0];
([3,2,1],[2,0,1]) -> [3,2,1,2,0,1];
([],[0,2,3]) -> [0,2,3];
([],[2,2,2]) -> [2,2,2];
([1,3],[1]) -> [1,3,1];
([],[3,2]) -> [3,2];
([1,3],[]) -> [1,3];
([],[0]) -> [0];
([0],[3,3]) -> [0,3,3];
([],[]) -> [];
([0],[]) -> [0];
([1],[]) -> [1];
([2,1],[]) -> [2,1];
([0,2,2],[]) -> [0,2,2];
([],[3,0,2]) -> [3,0,2];
([3,3],[0,3]) -> [3,3,0,3];
([0,3],[1,0,1]) -> [0,3,1,0,1];
([0,3,2],[2]) -> [0,3,2,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00971600000003 true true

([1,1],[2]) -> [1,1,2];
([],[]) -> [];
([],[3,0,3]) -> [3,0,3];
([],[2,3,3]) -> [2,3,3];
([],[0,1]) -> [0,1];
([3],[1,0,0]) -> [3,1,0,0];
([],[3,2,0]) -> [3,2,0];
([3,1,0],[3,2]) -> [3,1,0,3,2];
([1,3,1],[2,1]) -> [1,3,1,2,1];
([0,3],[1,3]) -> [0,3,1,3];
([3,0,2],[3,2,1]) -> [3,0,2,3,2,1];
([2,0,0],[1]) -> [2,0,0,1];
([3,1],[1]) -> [3,1,1];
([0,2],[2,2]) -> [0,2,2,2];
([1,3,1],[3]) -> [1,3,1,3];
([1,2],[0]) -> [1,2,0];
([0,1,0],[0]) -> [0,1,0,0];
([1],[0,1]) -> [1,0,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.01016 true true

([],[3,0]) -> [3,0];
([0,3],[]) -> [0,3];
([0,2,2],[0]) -> [0,2,2,0];
([1],[]) -> [1];
([3],[1,0]) -> [3,1,0];
([2,3],[0]) -> [2,3,0];
([],[2,2]) -> [2,2];
([3,1],[1,2,0]) -> [3,1,1,2,0];
([],[1,0]) -> [1,0];
([3,0,1],[]) -> [3,0,1];
([1,0],[]) -> [1,0];
([2,2],[2]) -> [2,2,2];
([0],[]) -> [0];
([3,1],[0,2,2]) -> [3,1,0,2,2];
([3],[1,2]) -> [3,1,2];
([],[0]) -> [0];
([0,2,3],[1,2,0]) -> [0,2,3,1,2,0];
([],[]) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00971200000004 true true

([2,1],[2,1]) -> [2,1,2,1];
([1],[0,0]) -> [1,0,0];
([0],[2,0,1]) -> [0,2,0,1];
([3,3],[3,2,2]) -> [3,3,3,2,2];
([0],[3,1,2]) -> [0,3,1,2];
([1,2,3],[0]) -> [1,2,3,0];
([],[1,3]) -> [1,3];
([0],[0,2,2]) -> [0,0,2,2];
([1,2,3],[]) -> [1,2,3];
([3,2,3],[0,2]) -> [3,2,3,0,2];
([0,0,3],[1,2,2]) -> [0,0,3,1,2,2];
([2,3,0],[2]) -> [2,3,0,2];
([2,3,0],[2,1,3]) -> [2,3,0,2,1,3];
([1],[]) -> [1];
([],[0]) -> [0];
([0,2],[2,1]) -> [0,2,2,1];
([0,3,2],[]) -> [0,3,2];
([1],[1,2,1]) -> [1,1,2,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0155440000001 true true

([],[]) -> [];
([0,2],[1,1]) -> [0,2,1,1];
([3],[0,2]) -> [3,0,2];
([1,2,0],[]) -> [1,2,0];
([2,3],[0,3,0]) -> [2,3,0,3,0];
([],[3,1,0]) -> [3,1,0];
([1,1,3],[]) -> [1,1,3];
([2,1],[0,0,1]) -> [2,1,0,0,1];
([0,2,1],[2]) -> [0,2,1,2];
([2,2],[2,2,1]) -> [2,2,2,2,1];
([0,3,2],[3]) -> [0,3,2,3];
([0],[]) -> [0];
([],[2,3]) -> [2,3];
([],[0,0]) -> [0,0];
([2,0],[2,2,1]) -> [2,0,2,2,1];
([0,1,3],[]) -> [0,1,3];
([3,2],[1,1]) -> [3,2,1,1];
([],[0]) -> [0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00983399999996 true true

([2,0,3],[3,0,3]) -> [2,0,3,3,0,3];
([],[3,1,0]) -> [3,1,0];
([0,3],[2]) -> [0,3,2];
([],[1,1,1]) -> [1,1,1];
([1],[]) -> [1];
([0,1,0],[2,2]) -> [0,1,0,2,2];
([],[3,2]) -> [3,2];
([3,3],[1,2]) -> [3,3,1,2];
([2,1],[2,3,1]) -> [2,1,2,3,1];
([2,1],[3,0,2]) -> [2,1,3,0,2];
([],[]) -> [];
([1],[1,0]) -> [1,1,0];
([3],[]) -> [3];
([],[0,3]) -> [0,3];
([3,1],[]) -> [3,1];
([0],[0,3]) -> [0,0,3];
([1,0,0],[3]) -> [1,0,0,3];
([3,0,3],[]) -> [3,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00939300000005 true true

([1,2],[0,3,3]) -> [1,2,0,3,3];
([2,3],[2,0]) -> [2,3,2,0];
([2,3],[3,2,3]) -> [2,3,3,2,3];
([0,1],[3,2]) -> [0,1,3,2];
([0,1,0],[1,3,2]) -> [0,1,0,1,3,2];
([3,2,1],[2,1]) -> [3,2,1,2,1];
([0],[3,2,0]) -> [0,3,2,0];
([],[0,2]) -> [0,2];
([2,2,3],[1]) -> [2,2,3,1];
([0],[0,3]) -> [0,0,3];
([1,2],[]) -> [1,2];
([0,2,0],[3,0]) -> [0,2,0,3,0];
([2,0],[3,1]) -> [2,0,3,1];
([],[]) -> [];
([],[2]) -> [2];
([],[1,2,3]) -> [1,2,3];
([0,1,3],[0,2]) -> [0,1,3,0,2];
([3,1,0],[1,1,3]) -> [3,1,0,1,1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0103549999999 true true

([1],[0,1,3]) -> [1,0,1,3];
([3,1,1],[2,3]) -> [3,1,1,2,3];
([2,2,3],[1,0,0]) -> [2,2,3,1,0,0];
([3,3,0],[0]) -> [3,3,0,0];
([2,0],[]) -> [2,0];
([],[]) -> [];
([0,1,0],[]) -> [0,1,0];
([2,0,0],[]) -> [2,0,0];
([2,0],[3,3,3]) -> [2,0,3,3,3];
([],[0,0]) -> [0,0];
([2,1,1],[2]) -> [2,1,1,2];
([3,3],[2,3]) -> [3,3,2,3];
([3,3,1],[]) -> [3,3,1];
([],[2,0,2]) -> [2,0,2];
([0,2],[0]) -> [0,2,0];
([1],[3,1]) -> [1,3,1];
([3,2],[]) -> [3,2];
([],[3,3,3]) -> [3,3,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.01082 true true

([3,0,0],[2,3]) -> [3,0,0,2,3];
([0],[]) -> [0];
([3,0,0],[2,0]) -> [3,0,0,2,0];
([],[]) -> [];
([2,0,0],[3]) -> [2,0,0,3];
([],[0,1,1]) -> [0,1,1];
([1,0],[]) -> [1,0];
([0,1,2],[]) -> [0,1,2];
([],[1]) -> [1];
([3,2,1],[]) -> [3,2,1];
([0],[2,3]) -> [0,2,3];
([1,2,1],[3,3,3]) -> [1,2,1,3,3,3];
([3,1,0],[1]) -> [3,1,0,1];
([3],[1]) -> [3,1];
([3,0,0],[1]) -> [3,0,0,1];
([],[0]) -> [0];
([3,0,3],[0,1,0]) -> [3,0,3,0,1,0];
([0,0],[2]) -> [0,0,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00963700000011 true true

([3,3],[3,1,3]) -> [3,3,3,1,3];
([0,1],[2,2,3]) -> [0,1,2,2,3];
([3],[]) -> [3];
([],[1,1,3]) -> [1,1,3];
([3],[1,2,2]) -> [3,1,2,2];
([],[1,1,1]) -> [1,1,1];
([2],[2]) -> [2,2];
([],[2]) -> [2];
([0],[]) -> [0];
([2,3,2],[]) -> [2,3,2];
([2],[2,2]) -> [2,2,2];
([],[0,1]) -> [0,1];
([],[0]) -> [0];
([],[1,2,0]) -> [1,2,0];
([0,2,3],[2,1,2]) -> [0,2,3,2,1,2];
([1,0,0],[]) -> [1,0,0];
([2,1,2],[0]) -> [2,1,2,0];
([0,0],[2,3,1]) -> [0,0,2,3,1];
([],[1]) -> [1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0153290000001 true true

([],[0]) -> [0];
([1,0,3],[2,2]) -> [1,0,3,2,2];
([],[1,1,2]) -> [1,1,2];
([1],[3,0]) -> [1,3,0];
([],[1,0]) -> [1,0];
([3],[0,2,0]) -> [3,0,2,0];
([],[0,2,1]) -> [0,2,1];
([2,1,0],[1]) -> [2,1,0,1];
([],[0,2,0]) -> [0,2,0];
([2,0],[]) -> [2,0];
([2,3],[]) -> [2,3];
([],[3]) -> [3];
([],[1,0,3]) -> [1,0,3];
([0,0,3],[]) -> [0,0,3];
([],[0,2]) -> [0,2];
([3,2],[1]) -> [3,2,1];
([],[]) -> [];
([2],[0,2,2]) -> [2,0,2,2];
([],[2,3,1]) -> [2,3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0094959999999 true true

([],[3,1]) -> [3,1];
([2],[2,2]) -> [2,2,2];
([],[0,2]) -> [0,2];
([2,1],[]) -> [2,1];
([],[2]) -> [2];
([],[1]) -> [1];
([2],[]) -> [2];
([0,3,0],[3,1,3]) -> [0,3,0,3,1,3];
([2,0],[0,0,1]) -> [2,0,0,0,1];
([1,0,2],[]) -> [1,0,2];
([2],[0,3]) -> [2,0,3];
([0,0,2],[0,0]) -> [0,0,2,0,0];
([1],[3,0,1]) -> [1,3,0,1];
([],[]) -> [];
([3],[]) -> [3];
([1,3],[]) -> [1,3];
([1,2,0],[0,2]) -> [1,2,0,0,2];
([3,2],[0,0]) -> [3,2,0,0];
([],[2,1]) -> [2,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0092259999999 true true

([1,2,3],[2]) -> [1,2,3,2];
([],[1]) -> [1];
([3,3],[]) -> [3,3];
([0,2,2],[1,3]) -> [0,2,2,1,3];
([2,0,0],[1,3,1]) -> [2,0,0,1,3,1];
([],[3,1]) -> [3,1];
([0,2],[2,1]) -> [0,2,2,1];
([],[2,2,0]) -> [2,2,0];
([3],[1,3]) -> [3,1,3];
([3],[3]) -> [3,3];
([1,0],[]) -> [1,0];
([],[]) -> [];
([2],[2]) -> [2,2];
([2,0,0],[]) -> [2,0,0];
([2],[]) -> [2];
([],[2,2]) -> [2,2];
([],[0,3]) -> [0,3];
([1],[0,1,1]) -> [1,0,1,1];
([2,1,3],[2]) -> [2,1,3,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.010667 true true

([],[1,1]) -> [1,1];
([0,2],[2]) -> [0,2,2];
([0,2,3],[2,0,0]) -> [0,2,3,2,0,0];
([0],[0,0,2]) -> [0,0,0,2];
([3,1,0],[]) -> [3,1,0];
([3,2],[1,1]) -> [3,2,1,1];
([],[1,0]) -> [1,0];
([2,3,2],[1,2,3]) -> [2,3,2,1,2,3];
([2],[]) -> [2];
([0,1],[0]) -> [0,1,0];
([],[2,0]) -> [2,0];
([3,0,0],[1,3]) -> [3,0,0,1,3];
([0],[]) -> [0];
([1,1],[0,0,2]) -> [1,1,0,0,2];
([2,3,1],[0,0]) -> [2,3,1,0,0];
([2,3],[3,3]) -> [2,3,3,3];
([3],[2,3,0]) -> [3,2,3,0];
([2,3],[3]) -> [2,3,3];
([3,3,1],[1,0]) -> [3,3,1,1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0162889999999 true true

([],[]) -> [];
([0,2,3],[1]) -> [0,2,3,1];
([2,3,3],[3]) -> [2,3,3,3];
([3,2,0],[3,0]) -> [3,2,0,3,0];
([3,3],[]) -> [3,3];
([],[2,2]) -> [2,2];
([0,1],[0]) -> [0,1,0];
([3],[0]) -> [3,0];
([2,0],[0]) -> [2,0,0];
([1,2,2],[2]) -> [1,2,2,2];
([3,2,0],[0]) -> [3,2,0,0];
([2,3,1],[]) -> [2,3,1];
([],[1,1,1]) -> [1,1,1];
([0],[2]) -> [0,2];
([2,1,2],[0]) -> [2,1,2,0];
([3],[1,3,3]) -> [3,1,3,3];
([1],[1,2]) -> [1,1,2];
([3],[3,2]) -> [3,3,2];
([],[3,0,3]) -> [3,0,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0104449999999 true true

([2],[]) -> [2];
([],[0]) -> [0];
([1],[3,1]) -> [1,3,1];
([2,3],[]) -> [2,3];
([2,3,1],[0,2,0]) -> [2,3,1,0,2,0];
([3,1,3],[2,1,0]) -> [3,1,3,2,1,0];
([],[1,3]) -> [1,3];
([2],[0,3]) -> [2,0,3];
([1,1],[]) -> [1,1];
([1,2],[3,0]) -> [1,2,3,0];
([3,0,0],[]) -> [3,0,0];
([3,2],[3,1,2]) -> [3,2,3,1,2];
([0,2,2],[0]) -> [0,2,2,0];
([2,0,1],[]) -> [2,0,1];
([0],[]) -> [0];
([3,1],[0,2]) -> [3,1,0,2];
([3,1],[0,0,3]) -> [3,1,0,0,3];
([2,2],[2,1,2]) -> [2,2,2,1,2];
([],[2,2]) -> [2,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.016269 true true

([3,3,3],[2]) -> [3,3,3,2];
([0,3],[2]) -> [0,3,2];
([3],[3]) -> [3,3];
([1,2],[3,1,1]) -> [1,2,3,1,1];
([1,3,0],[]) -> [1,3,0];
([2,1],[1,3]) -> [2,1,1,3];
([0,2],[3,3]) -> [0,2,3,3];
([1,0],[2]) -> [1,0,2];
([0],[3,2,2]) -> [0,3,2,2];
([2],[1,3]) -> [2,1,3];
([1,2],[0,1]) -> [1,2,0,1];
([0,2],[]) -> [0,2];
([3,1],[]) -> [3,1];
([],[2]) -> [2];
([],[]) -> [];
([2,1],[0,1]) -> [2,1,0,1];
([],[3,2]) -> [3,2];
([2],[0,2]) -> [2,0,2];
([3],[1]) -> [3,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00982500000009 true true

([1,2],[2,2]) -> [1,2,2,2];
([0,1,0],[0]) -> [0,1,0,0];
([3],[2,0,2]) -> [3,2,0,2];
([2],[2]) -> [2,2];
([],[1]) -> [1];
([],[3,2,0]) -> [3,2,0];
([3,1],[3]) -> [3,1,3];
([3,2],[2,1,2]) -> [3,2,2,1,2];
([1],[]) -> [1];
([3,2],[]) -> [3,2];
([2,2],[3]) -> [2,2,3];
([0,3],[1,0,2]) -> [0,3,1,0,2];
([1],[1,3,2]) -> [1,1,3,2];
([1],[2]) -> [1,2];
([],[0,0]) -> [0,0];
([1,0,2],[3]) -> [1,0,2,3];
([0,1],[1,2,2]) -> [0,1,1,2,2];
([2,2,0],[2]) -> [2,2,0,2];
([1,0,1],[]) -> [1,0,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.016181 true true

([],[0]) -> [0];
([2,0],[3,2,3]) -> [2,0,3,2,3];
([0,3,1],[2,2,1]) -> [0,3,1,2,2,1];
([],[]) -> [];
([2,0,3],[]) -> [2,0,3];
([0,2],[3]) -> [0,2,3];
([0,1,2],[3,2,0]) -> [0,1,2,3,2,0];
([1],[]) -> [1];
([1,3],[3]) -> [1,3,3];
([3,1,0],[0]) -> [3,1,0,0];
([0,2],[1,1]) -> [0,2,1,1];
([],[3,3,1]) -> [3,3,1];
([0],[]) -> [0];
([],[0,1]) -> [0,1];
([1,1],[3,1]) -> [1,1,3,1];
([3,2,1],[3,3,3]) -> [3,2,1,3,3,3];
([],[1,0,0]) -> [1,0,0];
([],[2]) -> [2];
([2,2,3],[]) -> [2,2,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.010188 true true

([],[]) -> [];
([3,2],[2]) -> [3,2,2];
([3,1],[]) -> [3,1];
([],[3,1]) -> [3,1];
([1],[3]) -> [1,3];
([],[1,2,2]) -> [1,2,2];
([],[1,3,1]) -> [1,3,1];
([1],[1]) -> [1,1];
([1],[1,1]) -> [1,1,1];
([],[0]) -> [0];
([2,1,0],[2]) -> [2,1,0,2];
([0,3],[]) -> [0,3];
([],[2,1]) -> [2,1];
([0],[0]) -> [0,0];
([1,2],[0]) -> [1,2,0];
([0,1],[0,2]) -> [0,1,0,2];
([1,3,0],[2,0,3]) -> [1,3,0,2,0,3];
([0,1,0],[3,3,2]) -> [0,1,0,3,3,2];
([2],[]) -> [2];
([3],[0,1,0]) -> [3,0,1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0101629999999 true true

([0],[]) -> [0];
([1,2,0],[0]) -> [1,2,0,0];
([1],[2,1,3]) -> [1,2,1,3];
([1,3],[]) -> [1,3];
([1,3,2],[]) -> [1,3,2];
([0,0,0],[2]) -> [0,0,0,2];
([],[3,0]) -> [3,0];
([],[0]) -> [0];
([],[0,0]) -> [0,0];
([3,2,2],[2]) -> [3,2,2,2];
([2],[3,3,0]) -> [2,3,3,0];
([],[1,1,3]) -> [1,1,3];
([1,2],[]) -> [1,2];
([3,1],[]) -> [3,1];
([],[3]) -> [3];
([2,3],[0,2,1]) -> [2,3,0,2,1];
([1,1],[]) -> [1,1];
([3,1],[0]) -> [3,1,0];
([1,2,0],[0,1]) -> [1,2,0,0,1];
([2,3,0],[1]) -> [2,3,0,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.01638 true true

([3],[3,1,1]) -> [3,3,1,1];
([0],[0,0]) -> [0,0,0];
([2],[0,1]) -> [2,0,1];
([],[3]) -> [3];
([],[0,0,0]) -> [0,0,0];
([],[]) -> [];
([],[3,2]) -> [3,2];
([3,3,2],[1,0]) -> [3,3,2,1,0];
([2],[]) -> [2];
([1],[0]) -> [1,0];
([1],[]) -> [1];
([],[1]) -> [1];
([1,2],[2,1,3]) -> [1,2,2,1,3];
([0],[2,1,2]) -> [0,2,1,2];
([3],[]) -> [3];
([1,0],[3]) -> [1,0,3];
([0],[3,2,0]) -> [0,3,2,0];
([0,1,1],[1,2,2]) -> [0,1,1,1,2,2];
([3,1,0],[2]) -> [3,1,0,2];
([1,3],[]) -> [1,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0101360000001 true true

([],[]) -> [];
([0,2],[]) -> [0,2];
([3,2],[1]) -> [3,2,1];
([],[2]) -> [2];
([0,1,3],[1,2]) -> [0,1,3,1,2];
([2,0,1],[3,1,0]) -> [2,0,1,3,1,0];
([0,1,2],[1,2]) -> [0,1,2,1,2];
([],[1,2,1]) -> [1,2,1];
([],[1,1]) -> [1,1];
([2],[0,1]) -> [2,0,1];
([],[0,1,1]) -> [0,1,1];
([0,2,2],[1,2,0]) -> [0,2,2,1,2,0];
([],[3,2]) -> [3,2];
([3],[]) -> [3];
([3],[0,2]) -> [3,0,2];
([3,2,1],[2,3,3]) -> [3,2,1,2,3,3];
([3,1,3],[3]) -> [3,1,3,3];
([0,0],[]) -> [0,0];
([3,2,3],[1]) -> [3,2,3,1];
([1,2,1],[]) -> [1,2,1];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.010681 true true

([3,0],[3,1,2]) -> [3,0,3,1,2];
([],[1,0]) -> [1,0];
([3],[]) -> [3];
([],[]) -> [];
([1,0,1],[0,2,3]) -> [1,0,1,0,2,3];
([3,2],[0,1,3]) -> [3,2,0,1,3];
([2],[1,2]) -> [2,1,2];
([2],[0]) -> [2,0];
([3,0,2],[]) -> [3,0,2];
([3,1,0],[]) -> [3,1,0];
([],[0,2]) -> [0,2];
([3,3],[2,3,1]) -> [3,3,2,3,1];
([3,3],[1]) -> [3,3,1];
([2,0],[]) -> [2,0];
([3],[0,3,3]) -> [3,0,3,3];
([1,2],[0]) -> [1,2,0];
([1],[]) -> [1];
([0],[3]) -> [0,3];
([2,2,1],[]) -> [2,2,1];
([],[1,1,0]) -> [1,1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0105349999999 true true

([3],[]) -> [3];
([3,1],[1,1]) -> [3,1,1,1];
([3,2],[3,1,0]) -> [3,2,3,1,0];
([3,2,2],[3,0]) -> [3,2,2,3,0];
([2,2],[1]) -> [2,2,1];
([1],[]) -> [1];
([],[3,3,3]) -> [3,3,3];
([],[]) -> [];
([2],[1,3]) -> [2,1,3];
([2,3],[1]) -> [2,3,1];
([2],[]) -> [2];
([0],[]) -> [0];
([],[0]) -> [0];
([3,2],[2,1]) -> [3,2,2,1];
([2,2],[1,2,0]) -> [2,2,1,2,0];
([2,1],[0]) -> [2,1,0];
([],[1,0]) -> [1,0];
([2],[2,2,1]) -> [2,2,2,1];
([1,0],[0]) -> [1,0,0];
([2,2,3],[]) -> [2,2,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00972000000002 true true

([3],[2,2,3]) -> [3,2,2,3];
([0,1],[]) -> [0,1];
([3],[1,1]) -> [3,1,1];
([],[0,2]) -> [0,2];
([],[1]) -> [1];
([3,1],[3,2,2]) -> [3,1,3,2,2];
([0,3,1],[1]) -> [0,3,1,1];
([1,3],[0,3]) -> [1,3,0,3];
([1,1,0],[0,3,1]) -> [1,1,0,0,3,1];
([0,2],[]) -> [0,2];
([1,2,3],[2,0,2]) -> [1,2,3,2,0,2];
([],[2,2]) -> [2,2];
([3],[]) -> [3];
([2],[3,0,3]) -> [2,3,0,3];
([1,0],[]) -> [1,0];
([],[0,2,1]) -> [0,2,1];
([3,0],[1]) -> [3,0,1];
([3,1,3],[0,0,3]) -> [3,1,3,0,0,3];
([2,3,0],[3,3,0]) -> [2,3,0,3,3,0];
([2],[2,3]) -> [2,2,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0167260000001 true true

([3],[3,2,2]) -> [3,3,2,2];
([0],[3,1]) -> [0,3,1];
([],[1]) -> [1];
([3],[]) -> [3];
([0,3,2],[1]) -> [0,3,2,1];
([],[1,1,0]) -> [1,1,0];
([],[1,3]) -> [1,3];
([1,1],[3,1]) -> [1,1,3,1];
([2,3,3],[2,3,2]) -> [2,3,3,2,3,2];
([1,2],[3,2,3]) -> [1,2,3,2,3];
([2],[1,2,3]) -> [2,1,2,3];
([1,1],[1,2,2]) -> [1,1,1,2,2];
([3,3],[]) -> [3,3];
([2,0],[2,2]) -> [2,0,2,2];
([3,1],[]) -> [3,1];
([2],[1]) -> [2,1];
([],[2]) -> [2];
([2],[]) -> [2];
([2],[0]) -> [2,0];
([1,1],[1,0]) -> [1,1,1,0];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.016654 true true

([1],[2]) -> [1,2];
([1],[3]) -> [1,3];
([0,3,2],[1]) -> [0,3,2,1];
([0,2],[2]) -> [0,2,2];
([2,1,3],[3,1,1]) -> [2,1,3,3,1,1];
([3,0],[2,3]) -> [3,0,2,3];
([0,3,1],[]) -> [0,3,1];
([0,2,0],[1,2]) -> [0,2,0,1,2];
([3,2],[2,1]) -> [3,2,2,1];
([],[1,0]) -> [1,0];
([],[]) -> [];
([3,2],[3]) -> [3,2,3];
([],[2,1,3]) -> [2,1,3];
([],[1]) -> [1];
([3],[2,3,3]) -> [3,2,3,3];
([1,1],[]) -> [1,1];
([1],[1]) -> [1,1];
([0],[]) -> [0];
([2,2],[]) -> [2,2];
([1,2],[3,3]) -> [1,2,3,3];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0104920000001 true true

([0,0],[3]) -> [0,0,3];
([0,3],[2]) -> [0,3,2];
([2,3],[3]) -> [2,3,3];
([2],[1,2]) -> [2,1,2];
([2,0],[1,3]) -> [2,0,1,3];
([2],[]) -> [2];
([],[0,2,3]) -> [0,2,3];
([3,2],[]) -> [3,2];
([2,2,2],[3]) -> [2,2,2,3];
([],[3,1,1]) -> [3,1,1];
([0],[3,1]) -> [0,3,1];
([1,1],[0,2]) -> [1,1,0,2];
([],[0]) -> [0];
([0,2,3],[3,2,2]) -> [0,2,3,3,2,2];
([1,0],[]) -> [1,0];
([3],[]) -> [3];
([2,0,0],[]) -> [2,0,0];
([1,1],[3,0,1]) -> [1,1,3,0,1];
([2,3,0],[3,0]) -> [2,3,0,3,0];
([3,3,2],[]) -> [3,3,2];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.016173 true true

