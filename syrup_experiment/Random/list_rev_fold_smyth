[2,0,2] -> [2,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0552210000001 false false

[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.036689 false false

[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> [] in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0339409999999 false false

[0,3,2] -> [2,3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.043852 true false

[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.049381 false false

[2,3,1] -> [1,3,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0628919999999 true false

[0,0] -> [0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0361949999999 false false

[0,1] -> [1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.058961 true false

[1,0,3] -> [3,0,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.05171 true false

[2,0,1] -> [1,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.040884 true false

[3] -> [3];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0456180000001 false false

[2,1,1] -> [1,1,2];
[1,2] -> [2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.037135 true false

[0] -> [0];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0316849999999 false false

[3,3] -> [3,3];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0342209999999 false false

[] -> [];
[2,1,3] -> [3,1,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0336689999999 true false

[3,3] -> [3,3];
[1,3] -> [3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.04189 true false

[2,1] -> [1,2];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.048603 true false

[] -> [];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.032661 false false

[1,3] -> [3,1];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.034635 true false

[1] -> [1];
[0,3] -> [3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.057558 true false

[2,2] -> [2,2];
[1,3,0] -> [0,3,1];
[2,0,3] -> [3,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.055368 true false

[1] -> [1];
[3] -> [3];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0376819999999 false false

[0,0] -> [0,0];
[] -> [];
[2,2,3] -> [3,2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0627810000001 true false

[] -> [];
[0] -> [0];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0574570000001 false false

[3,3,0] -> [0,3,3];
[2,2] -> [2,2];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0577270000001 true false

[3,1,2] -> [2,1,3];
[] -> [];
[1,3,3] -> [3,3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0374179999999 true false

[1] -> [1];
[3] -> [3];
[1,1,3] -> [3,1,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.039141 true false

[3] -> [3];
[2] -> [2];
[0,0] -> [0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.046707 false false

[] -> [];
[2] -> [2];
[3,2,0] -> [0,2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.060698 true false

[2] -> [2];
[2,0,1] -> [1,0,2];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0477989999999 true false

[1,1,0] -> [0,1,1];
[1,2,3] -> [3,2,1];
[] -> [];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0640820000001 true false

[] -> [];
[0,3,1] -> [1,3,0];
[2,1] -> [1,2];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.041974 true false

[1,1] -> [1,1];
[1] -> [1];
[3] -> [3];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0360820000001 false false

[0,1,0] -> [0,1,0];
[1,2,3] -> [3,2,1];
[2] -> [2];
[2,0,1] -> [1,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0375289999999 true false

[] -> [];
[1] -> [1];
[1,2,1] -> [1,2,1];
[3,2] -> [2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0477310000001 true false

[3,2] -> [2,3];
[2,0] -> [0,2];
[] -> [];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0485880000001 true false

[3,1,3] -> [3,1,3];
[0,1,3] -> [3,1,0];
[2,3,3] -> [3,3,2];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0661950000001 true false

[2,1] -> [1,2];
[3,0] -> [0,3];
[] -> [];
[3,1,3] -> [3,1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0614009999999 true false

[] -> [];
[3] -> [3];
[2] -> [2];
[2,3,2] -> [2,3,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0625849999999 false false

[2,0] -> [0,2];
[1] -> [1];
[1,3] -> [3,1];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0600240000001 true false

[2,1,3] -> [3,1,2];
[] -> [];
[2] -> [2];
[1,2,0] -> [0,2,1];
[0,0,1] -> [1,0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.055276 true false

[] -> [];
[0] -> [0];
[2,0,2] -> [2,0,2];
[1,2] -> [2,1];
[2,1] -> [1,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0364219999999 true false

[1,2,2] -> [2,2,1];
[3,1,2] -> [2,1,3];
[1] -> [1];
[2,1,2] -> [2,1,2];
[2,3] -> [3,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.088712 true false

[] -> [];
[1,3,2] -> [2,3,1];
[2] -> [2];
[1,0,0] -> [0,0,1];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.051463 true false

[1,1] -> [1,1];
[2,1] -> [1,2];
[] -> [];
[2] -> [2];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.052412 true false

[1,2] -> [2,1];
[0,1,1] -> [1,1,0];
[1,2,2] -> [2,2,1];
[] -> [];
[0,3] -> [3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.064811 true false

[1,2,1] -> [1,2,1];
[] -> [];
[1,3,2] -> [2,3,1];
[2] -> [2];
[2,0,3] -> [3,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.066194 true false

[1] -> [1];
[0,3,2] -> [2,3,0];
[] -> [];
[0,1,2] -> [2,1,0];
[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0693659999999 true false

[0,3] -> [3,0];
[0,2,3] -> [3,2,0];
[2] -> [2];
[1,0] -> [0,1];
[0,2,1] -> [1,2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0659920000001 true false

[2,0,1] -> [1,0,2];
[2] -> [2];
[3] -> [3];
[] -> [];
[3,2,2] -> [2,2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.06565 true false

[3] -> [3];
[2,1,3] -> [3,1,2];
[1] -> [1];
[3,1,1] -> [1,1,3];
[] -> [];
[1,3,1] -> [1,3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.066572 true false

[2,3,3] -> [3,3,2];
[2] -> [2];
[3,0] -> [0,3];
[] -> [];
[1,2,2] -> [2,2,1];
[2,1,0] -> [0,1,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.065527 true false

[0,3,0] -> [0,3,0];
[] -> [];
[2,3,3] -> [3,3,2];
[0,1] -> [1,0];
[2] -> [2];
[0,0] -> [0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0392509999999 true false

[3,0,1] -> [1,0,3];
[0,2] -> [2,0];
[2,1] -> [1,2];
[3,3,0] -> [0,3,3];
[1,3] -> [3,1];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.063345 true false

[2,0,2] -> [2,0,2];
[0] -> [0];
[] -> [];
[1] -> [1];
[2] -> [2];
[2,1] -> [1,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.056953 true false

[3] -> [3];
[2] -> [2];
[1] -> [1];
[3,0,1] -> [1,0,3];
[1,2] -> [2,1];
[2,0,3] -> [3,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.081496 true false

[] -> [];
[3,3,2] -> [2,3,3];
[1,1] -> [1,1];
[1] -> [1];
[2,1] -> [1,2];
[0,3,3] -> [3,3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0601999999999 true false

[1,1,2] -> [2,1,1];
[3,3,2] -> [2,3,3];
[1,2] -> [2,1];
[2,3,1] -> [1,3,2];
[0] -> [0];
[3,2] -> [2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0542539999999 true false

[1,3] -> [3,1];
[2] -> [2];
[] -> [];
[3,3,0] -> [0,3,3];
[0] -> [0];
[3,1,2] -> [2,1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0485619999999 true false

[2] -> [2];
[] -> [];
[0] -> [0];
[2,0,3] -> [3,0,2];
[1,3] -> [3,1];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.038178 true false

[0,2] -> [2,0];
[1,1] -> [1,1];
[0,3] -> [3,0];
[2,2] -> [2,2];
[] -> [];
[3,3,2] -> [2,3,3];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0438300000001 true false

[1,0,3] -> [3,0,1];
[3] -> [3];
[2,2,1] -> [1,2,2];
[3,1,0] -> [0,1,3];
[1,1,3] -> [3,1,1];
[0,0] -> [0,0];
[0,2,2] -> [2,2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.078135 true false

[] -> [];
[3] -> [3];
[1,3] -> [3,1];
[0,2] -> [2,0];
[0,1,3] -> [3,1,0];
[3,2,2] -> [2,2,3];
[2,3] -> [3,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.059722 true false

[] -> [];
[0,3] -> [3,0];
[0] -> [0];
[0,2,3] -> [3,2,0];
[1] -> [1];
[2] -> [2];
[1,3] -> [3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.053316 true false

[1,1] -> [1,1];
[1,2,0] -> [0,2,1];
[1,2] -> [2,1];
[0,3,1] -> [1,3,0];
[] -> [];
[1,0,2] -> [2,0,1];
[2,3] -> [3,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.058188 true false

[3,3] -> [3,3];
[3,0,3] -> [3,0,3];
[2,0] -> [0,2];
[1,3,2] -> [2,3,1];
[2] -> [2];
[1,3,3] -> [3,3,1];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0572099999999 true false

[0] -> [0];
[3,1] -> [1,3];
[2,2,1] -> [1,2,2];
[1,1,1] -> [1,1,1];
[1] -> [1];
[1,2] -> [2,1];
[3,2,2] -> [2,2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.062516 true false

[3,2] -> [2,3];
[3,1] -> [1,3];
[2,1] -> [1,2];
[] -> [];
[1,0,1] -> [1,0,1];
[1,1] -> [1,1];
[1,2,0] -> [0,2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0608990000001 true false

[1,1,2] -> [2,1,1];
[] -> [];
[1] -> [1];
[3,3,1] -> [1,3,3];
[3,0,1] -> [1,0,3];
[2,3,2] -> [2,3,2];
[3,1] -> [1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.04277 true false

[3] -> [3];
[2,2] -> [2,2];
[3,3,0] -> [0,3,3];
[0,0,2] -> [2,0,0];
[2] -> [2];
[0,1,2] -> [2,1,0];
[2,3] -> [3,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.044103 true false

[2,0] -> [0,2];
[] -> [];
[3,1] -> [1,3];
[0,2,3] -> [3,2,0];
[1,1] -> [1,1];
[0,3] -> [3,0];
[1,0] -> [0,1];
[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.074901 true false

[] -> [];
[0,2] -> [2,0];
[0] -> [0];
[3,2] -> [2,3];
[1,0] -> [0,1];
[0,2,1] -> [1,2,0];
[0,2,0] -> [0,2,0];
[3,3,1] -> [1,3,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.043488 true false

[3,3] -> [3,3];
[0] -> [0];
[3,1,1] -> [1,1,3];
[2,1] -> [1,2];
[] -> [];
[2,3,2] -> [2,3,2];
[0,0,0] -> [0,0,0];
[2,0,0] -> [0,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.047675 true false

[] -> [];
[3,1] -> [1,3];
[2,3] -> [3,2];
[0,0] -> [0,0];
[1] -> [1];
[0,2] -> [2,0];
[1,0] -> [0,1];
[0,1,3] -> [3,1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0463749999999 true false

[2,3,0] -> [0,3,2];
[2] -> [2];
[] -> [];
[1,0] -> [0,1];
[2,3] -> [3,2];
[1] -> [1];
[3] -> [3];
[0,3] -> [3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0709240000001 true false

[1] -> [1];
[0,1] -> [1,0];
[] -> [];
[1,0,1] -> [1,0,1];
[2,0,3] -> [3,0,2];
[3,0,1] -> [1,0,3];
[0,2,0] -> [0,2,0];
[0,2] -> [2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.07428 true false

[0,0,1] -> [1,0,0];
[0,2,0] -> [0,2,0];
[1,0,2] -> [2,0,1];
[2,3] -> [3,2];
[3,2,3] -> [3,2,3];
[2] -> [2];
[] -> [];
[3,2] -> [2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.058231 true false

[3,1] -> [1,3];
[1,1,1] -> [1,1,1];
[1,2,3] -> [3,2,1];
[] -> [];
[0,1,1] -> [1,1,0];
[2] -> [2];
[2,0] -> [0,2];
[2,1] -> [1,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.052394 true false

[3] -> [3];
[] -> [];
[1,2,3] -> [3,2,1];
[0,2,1] -> [1,2,0];
[0] -> [0];
[1,1,2] -> [2,1,1];
[1,0,0] -> [0,0,1];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0432840000001 true false

[1,0,1] -> [1,0,1];
[3,3,2] -> [2,3,3];
[] -> [];
[1,1] -> [1,1];
[0,0,1] -> [1,0,0];
[1,0] -> [0,1];
[0,3,3] -> [3,3,0];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0636810000001 true false

[3] -> [3];
[] -> [];
[3,0] -> [0,3];
[3,3] -> [3,3];
[2] -> [2];
[0] -> [0];
[3,2,1] -> [1,2,3];
[2,1,3] -> [3,1,2];
[3,2,3] -> [3,2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0543809999999 true false

[] -> [];
[1,2] -> [2,1];
[2,3,0] -> [0,3,2];
[3,1,2] -> [2,1,3];
[2,2,2] -> [2,2,2];
[0,3,1] -> [1,3,0];
[1,0] -> [0,1];
[0,0] -> [0,0];
[2,3,1] -> [1,3,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0634239999999 true false

[3,3] -> [3,3];
[] -> [];
[2,0,3] -> [3,0,2];
[2] -> [2];
[1,2] -> [2,1];
[2,2,3] -> [3,2,2];
[0] -> [0];
[2,0] -> [0,2];
[3,2,1] -> [1,2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.067951 true false

[0,1] -> [1,0];
[3] -> [3];
[] -> [];
[3,2,1] -> [1,2,3];
[1] -> [1];
[3,1] -> [1,3];
[0,0] -> [0,0];
[0] -> [0];
[2,2,0] -> [0,2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0499 true false

[] -> [];
[0] -> [0];
[1] -> [1];
[3,0] -> [0,3];
[2,3,2] -> [2,3,2];
[0,1,2] -> [2,1,0];
[3,3,0] -> [0,3,3];
[0,0,3] -> [3,0,0];
[2,3] -> [3,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.04511 true false

[0,3,3] -> [3,3,0];
[1] -> [1];
[3] -> [3];
[0] -> [0];
[] -> [];
[3,0,1] -> [1,0,3];
[2,2,2] -> [2,2,2];
[1,3,1] -> [1,3,1];
[3,1,3] -> [3,1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0763649999999 true false

[1,3] -> [3,1];
[2,3,2] -> [2,3,2];
[1,0,2] -> [2,0,1];
[] -> [];
[2] -> [2];
[0,3,3] -> [3,3,0];
[1,1,3] -> [3,1,1];
[2,2,0] -> [0,2,2];
[1,2] -> [2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.081631 true false

[3,0] -> [0,3];
[2] -> [2];
[0] -> [0];
[] -> [];
[3] -> [3];
[1,2,3] -> [3,2,1];
[1,1,2] -> [2,1,1];
[2,1] -> [1,2];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0750780000001 true false

[2,3] -> [3,2];
[] -> [];
[1] -> [1];
[1,2,3] -> [3,2,1];
[0,1,1] -> [1,1,0];
[3] -> [3];
[0] -> [0];
[0,2] -> [2,0];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0583449999999 true false

[3,1] -> [1,3];
[] -> [];
[3] -> [3];
[0] -> [0];
[3,0,3] -> [3,0,3];
[1,3,2] -> [2,3,1];
[1,0,2] -> [2,0,1];
[1] -> [1];
[0,2] -> [2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0460519999999 true false

[3] -> [3];
[0,0] -> [0,0];
[] -> [];
[0] -> [0];
[0,3] -> [3,0];
[0,0,3] -> [3,0,0];
[3,3,1] -> [1,3,3];
[1,2,2] -> [2,2,1];
[3,0] -> [0,3];
[0,2,1] -> [1,2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.06448 true false

[3] -> [3];
[1,2] -> [2,1];
[1,3] -> [3,1];
[2,3] -> [3,2];
[] -> [];
[3,3,1] -> [1,3,3];
[1] -> [1];
[0,3] -> [3,0];
[2] -> [2];
[3,3] -> [3,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.061723 true false

[3] -> [3];
[1] -> [1];
[] -> [];
[2,1,1] -> [1,1,2];
[0] -> [0];
[1,1] -> [1,1];
[0,3,0] -> [0,3,0];
[1,3] -> [3,1];
[1,0,3] -> [3,0,1];
[1,3,0] -> [0,3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0545669999999 true false

[3,0,3] -> [3,0,3];
[1,2,0] -> [0,2,1];
[1] -> [1];
[3,1,0] -> [0,1,3];
[0,1,1] -> [1,1,0];
[] -> [];
[2,2] -> [2,2];
[0,3,0] -> [0,3,0];
[0,0,0] -> [0,0,0];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0682489999999 true false

[2,1,1] -> [1,1,2];
[0] -> [0];
[1,3] -> [3,1];
[0,3] -> [3,0];
[2] -> [2];
[] -> [];
[1] -> [1];
[3,3,2] -> [2,3,3];
[3,3,0] -> [0,3,3];
[0,3,0] -> [0,3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0464689999999 true false

[0] -> [0];
[] -> [];
[2,1] -> [1,2];
[0,1] -> [1,0];
[1,3] -> [3,1];
[0,0,1] -> [1,0,0];
[0,3,2] -> [2,3,0];
[3,2,2] -> [2,2,3];
[1,1] -> [1,1];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.045449 true false

[1,1] -> [1,1];
[2,1] -> [1,2];
[0,0] -> [0,0];
[] -> [];
[2,3] -> [3,2];
[0,0,3] -> [3,0,0];
[3,0] -> [0,3];
[1] -> [1];
[2,2] -> [2,2];
[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0664839999999 true false

[0,1] -> [1,0];
[] -> [];
[0] -> [0];
[0,2] -> [2,0];
[2,1,3] -> [3,1,2];
[3] -> [3];
[3,0,1] -> [1,0,3];
[2,2,3] -> [3,2,2];
[1,3,3] -> [3,3,1];
[0,2,0] -> [0,2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0441430000001 true false

[3,2] -> [2,3];
[1,1,2] -> [2,1,1];
[2] -> [2];
[1,0,2] -> [2,0,1];
[0,2] -> [2,0];
[] -> [];
[3] -> [3];
[2,3] -> [3,2];
[2,2,0] -> [0,2,2];
[3,2,1] -> [1,2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0751049999999 true false

[3,2] -> [2,3];
[3] -> [3];
[2,2] -> [2,2];
[1] -> [1];
[0,2,1] -> [1,2,0];
[] -> [];
[3,1] -> [1,3];
[3,1,2] -> [2,1,3];
[1,0] -> [0,1];
[0,3] -> [3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0704820000001 true false

[1] -> [1];
[2,1,2] -> [2,1,2];
[] -> [];
[3,1,3] -> [3,1,3];
[1,1,1] -> [1,1,1];
[1,1] -> [1,1];
[2] -> [2];
[0,1] -> [1,0];
[0,3] -> [3,0];
[2,0,3] -> [3,0,2];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0712289999999 true false

[0,1,0] -> [0,1,0];
[2] -> [2];
[] -> [];
[2,3] -> [3,2];
[2,0,0] -> [0,0,2];
[3] -> [3];
[1,3] -> [3,1];
[0,2,3] -> [3,2,0];
[2,2,0] -> [0,2,2];
[1,3,3] -> [3,3,1];
[1,1,2] -> [2,1,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0812519999999 true false

[] -> [];
[2] -> [2];
[1,0] -> [0,1];
[1] -> [1];
[3] -> [3];
[2,0] -> [0,2];
[2,0,2] -> [2,0,2];
[1,2] -> [2,1];
[2,1,0] -> [0,1,2];
[2,0,3] -> [3,0,2];
[2,2,1] -> [1,2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0453500000001 true false

[2,1] -> [1,2];
[2] -> [2];
[3,3,2] -> [2,3,3];
[3,1] -> [1,3];
[0,2,0] -> [0,2,0];
[] -> [];
[1,1] -> [1,1];
[3] -> [3];
[3,2] -> [2,3];
[2,0] -> [0,2];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.082036 true false

[] -> [];
[2] -> [2];
[1] -> [1];
[0,2] -> [2,0];
[2,2] -> [2,2];
[3] -> [3];
[2,0,2] -> [2,0,2];
[2,3,2] -> [2,3,2];
[2,0,3] -> [3,0,2];
[1,0,3] -> [3,0,1];
[0,3,0] -> [0,3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0814439999999 true false

[2,0] -> [0,2];
[0] -> [0];
[2,0,3] -> [3,0,2];
[] -> [];
[3] -> [3];
[0,0,3] -> [3,0,0];
[2,0,0] -> [0,0,2];
[3,1,2] -> [2,1,3];
[1] -> [1];
[2,0,1] -> [1,0,2];
[3,2,0] -> [0,2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0459559999999 true false

[] -> [];
[1,1] -> [1,1];
[0,3,3] -> [3,3,0];
[1,3] -> [3,1];
[2] -> [2];
[2,3,1] -> [1,3,2];
[2,1] -> [1,2];
[2,3,0] -> [0,3,2];
[0,3] -> [3,0];
[0,3,2] -> [2,3,0];
[1,2] -> [2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.080989 true false

[3,0,0] -> [0,0,3];
[1] -> [1];
[3] -> [3];
[] -> [];
[3,1,3] -> [3,1,3];
[0] -> [0];
[0,1,2] -> [2,1,0];
[3,0,2] -> [2,0,3];
[1,0] -> [0,1];
[0,2] -> [2,0];
[0,1] -> [1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.045785 true false

[1,1,0] -> [0,1,1];
[0] -> [0];
[2] -> [2];
[1] -> [1];
[] -> [];
[0,3] -> [3,0];
[2,0,0] -> [0,0,2];
[0,1,3] -> [3,1,0];
[3,1] -> [1,3];
[0,1] -> [1,0];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0645709999999 true false

[0,3,3] -> [3,3,0];
[3,3,0] -> [0,3,3];
[1] -> [1];
[0,2] -> [2,0];
[3,0] -> [0,3];
[0] -> [0];
[0,1] -> [1,0];
[] -> [];
[3,2] -> [2,3];
[2,0] -> [0,2];
[1,1] -> [1,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0758989999999 true false

[1] -> [1];
[0,2,3] -> [3,2,0];
[] -> [];
[0] -> [0];
[1,0,2] -> [2,0,1];
[2,2,2] -> [2,2,2];
[1,0] -> [0,1];
[3,0] -> [0,3];
[3,1,0] -> [0,1,3];
[2] -> [2];
[3,1] -> [1,3];
[0,2] -> [2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0555649999999 true false

[0] -> [0];
[3,2,3] -> [3,2,3];
[] -> [];
[2,1] -> [1,2];
[1,0,0] -> [0,0,1];
[3,2,2] -> [2,2,3];
[0,1] -> [1,0];
[1] -> [1];
[2] -> [2];
[3,0] -> [0,3];
[3,2] -> [2,3];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0670700000001 true false

[2,3] -> [3,2];
[2,0,1] -> [1,0,2];
[0,1] -> [1,0];
[1,1,0] -> [0,1,1];
[2,2] -> [2,2];
[0,3] -> [3,0];
[] -> [];
[3] -> [3];
[0,2,0] -> [0,2,0];
[0] -> [0];
[2] -> [2];
[2,0] -> [0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.064384 true false

[] -> [];
[1,1] -> [1,1];
[1] -> [1];
[3,1] -> [1,3];
[1,0] -> [0,1];
[2,1,2] -> [2,1,2];
[2,2] -> [2,2];
[3,0,1] -> [1,0,3];
[2,1,3] -> [3,1,2];
[2] -> [2];
[2,1,1] -> [1,1,2];
[0,3] -> [3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.080639 true false

[1] -> [1];
[0,3,0] -> [0,3,0];
[1,2] -> [2,1];
[3,0] -> [0,3];
[] -> [];
[3] -> [3];
[0,2] -> [2,0];
[2] -> [2];
[0,1] -> [1,0];
[0] -> [0];
[3,3] -> [3,3];
[3,2,1] -> [1,2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0798279999999 true false

[0] -> [0];
[1] -> [1];
[3,0] -> [0,3];
[2] -> [2];
[3,0,2] -> [2,0,3];
[3,1] -> [1,3];
[2,0,1] -> [1,0,2];
[] -> [];
[1,2] -> [2,1];
[3] -> [3];
[1,3,2] -> [2,3,1];
[2,0,3] -> [3,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0760829999999 true false

[1,0,3] -> [3,0,1];
[3] -> [3];
[1] -> [1];
[] -> [];
[2] -> [2];
[1,1] -> [1,1];
[0,0] -> [0,0];
[0,3,2] -> [2,3,0];
[0] -> [0];
[0,3] -> [3,0];
[1,3,2] -> [2,3,1];
[1,0] -> [0,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0503490000001 true false

[0,3,2] -> [2,3,0];
[] -> [];
[3,1] -> [1,3];
[1] -> [1];
[0,0] -> [0,0];
[3,3,1] -> [1,3,3];
[1,2,0] -> [0,2,1];
[1,2,3] -> [3,2,1];
[3,2,0] -> [0,2,3];
[2,3,2] -> [2,3,2];
[3,2] -> [2,3];
[2,2,1] -> [1,2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.063592 true false

[] -> [];
[0,0,2] -> [2,0,0];
[1] -> [1];
[2,0] -> [0,2];
[0,0,3] -> [3,0,0];
[2,3,3] -> [3,3,2];
[1,3] -> [3,1];
[1,0] -> [0,1];
[3] -> [3];
[0,1] -> [1,0];
[1,2,0] -> [0,2,1];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0852 true false

[3] -> [3];
[2,1,3] -> [3,1,2];
[0] -> [0];
[] -> [];
[1,2] -> [2,1];
[3,1,1] -> [1,1,3];
[3,0,1] -> [1,0,3];
[2,1] -> [1,2];
[3,0] -> [0,3];
[2] -> [2];
[0,2] -> [2,0];
[1,3] -> [3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.07989 true false

[1,0] -> [0,1];
[1,1,0] -> [0,1,1];
[0,0,0] -> [0,0,0];
[3,2] -> [2,3];
[] -> [];
[0,1,1] -> [1,1,0];
[1,3,0] -> [0,3,1];
[1,2] -> [2,1];
[1] -> [1];
[0] -> [0];
[1,3] -> [3,1];
[3,0] -> [0,3];
[0,3] -> [3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0681320000001 true false

[1,0] -> [0,1];
[] -> [];
[3,1] -> [1,3];
[3,3,0] -> [0,3,3];
[2,1] -> [1,2];
[3,2,1] -> [1,2,3];
[1,3,0] -> [0,3,1];
[0,3] -> [3,0];
[3,0] -> [0,3];
[2,2] -> [2,2];
[0] -> [0];
[3] -> [3];
[0,1,3] -> [3,1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.057781 true false

[3,3] -> [3,3];
[1] -> [1];
[2] -> [2];
[2,1,1] -> [1,1,2];
[3] -> [3];
[1,0,1] -> [1,0,1];
[] -> [];
[1,1] -> [1,1];
[0,3,0] -> [0,3,0];
[1,1,1] -> [1,1,1];
[2,2,0] -> [0,2,2];
[3,0,2] -> [2,0,3];
[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.085525 true false

[0] -> [0];
[] -> [];
[1,2,2] -> [2,2,1];
[2,3] -> [3,2];
[2,2] -> [2,2];
[0,2,2] -> [2,2,0];
[2,0] -> [0,2];
[3,2,1] -> [1,2,3];
[2] -> [2];
[1,0] -> [0,1];
[3] -> [3];
[1] -> [1];
[3,2] -> [2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0676980000001 true false

[] -> [];
[3] -> [3];
[1,1,2] -> [2,1,1];
[1,2] -> [2,1];
[2,2] -> [2,2];
[3,3,3] -> [3,3,3];
[3,3,0] -> [0,3,3];
[1,0,3] -> [3,0,1];
[2,0] -> [0,2];
[1,2,1] -> [1,2,1];
[3,1] -> [1,3];
[2,3,0] -> [0,3,2];
[3,1,3] -> [3,1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0678499999999 true false

[1,1] -> [1,1];
[3,3] -> [3,3];
[1,2] -> [2,1];
[3,2] -> [2,3];
[0,0] -> [0,0];
[2,2,2] -> [2,2,2];
[0,2] -> [2,0];
[0] -> [0];
[] -> [];
[3] -> [3];
[1] -> [1];
[2] -> [2];
[2,0,3] -> [3,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.060986 true false

[1] -> [1];
[3,2,3] -> [3,2,3];
[0,3] -> [3,0];
[1,2,3] -> [3,2,1];
[3,1] -> [1,3];
[0,1,1] -> [1,1,0];
[2] -> [2];
[1,3] -> [3,1];
[] -> [];
[2,1] -> [1,2];
[0,0,0] -> [0,0,0];
[3] -> [3];
[3,3,0] -> [0,3,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.052533 true false

[2] -> [2];
[0] -> [0];
[3,3,3] -> [3,3,3];
[3] -> [3];
[] -> [];
[0,2] -> [2,0];
[2,3] -> [3,2];
[3,1,2] -> [2,1,3];
[3,0,1] -> [1,0,3];
[3,0] -> [0,3];
[1,0,1] -> [1,0,1];
[2,1,1] -> [1,1,2];
[3,0,2] -> [2,0,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0532900000001 true false

[] -> [];
[1,2] -> [2,1];
[1] -> [1];
[1,0,2] -> [2,0,1];
[3] -> [3];
[2,1,0] -> [0,1,2];
[3,0,1] -> [1,0,3];
[2,1] -> [1,2];
[0] -> [0];
[2,3,2] -> [2,3,2];
[1,2,0] -> [0,2,1];
[2,1,3] -> [3,1,2];
[1,0] -> [0,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.048882 true false

[1,3,0] -> [0,3,1];
[] -> [];
[2] -> [2];
[2,2] -> [2,2];
[1,0] -> [0,1];
[1,0,0] -> [0,0,1];
[3,0,3] -> [3,0,3];
[0,0,3] -> [3,0,0];
[1,3] -> [3,1];
[1,1] -> [1,1];
[2,1] -> [1,2];
[0] -> [0];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0717400000001 true false

[] -> [];
[0] -> [0];
[3,0,0] -> [0,0,3];
[3,2,2] -> [2,2,3];
[2,3,1] -> [1,3,2];
[2,2,1] -> [1,2,2];
[1,0] -> [0,1];
[3,2,3] -> [3,2,3];
[2] -> [2];
[0,2] -> [2,0];
[2,3] -> [3,2];
[0,2,2] -> [2,2,0];
[2,1] -> [1,2];
[3,3] -> [3,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.074443 true false

[1,1,0] -> [0,1,1];
[] -> [];
[1,1,1] -> [1,1,1];
[1] -> [1];
[0] -> [0];
[0,0] -> [0,0];
[1,0,3] -> [3,0,1];
[2] -> [2];
[0,3,0] -> [0,3,0];
[3,3,1] -> [1,3,3];
[3,2] -> [2,3];
[0,0,0] -> [0,0,0];
[3] -> [3];
[0,3] -> [3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.089784 true false

[0,0] -> [0,0];
[1,1] -> [1,1];
[1,3,2] -> [2,3,1];
[1,3,1] -> [1,3,1];
[1,1,2] -> [2,1,1];
[] -> [];
[3,1] -> [1,3];
[1] -> [1];
[0,3,1] -> [1,3,0];
[2] -> [2];
[3,0,3] -> [3,0,3];
[3] -> [3];
[2,1] -> [1,2];
[1,2,2] -> [2,2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0523109999999 true false

[3,3] -> [3,3];
[3] -> [3];
[1,0,3] -> [3,0,1];
[] -> [];
[2] -> [2];
[2,3] -> [3,2];
[0,0,2] -> [2,0,0];
[0,0,1] -> [1,0,0];
[1,1] -> [1,1];
[3,3,0] -> [0,3,3];
[1,3] -> [3,1];
[2,2] -> [2,2];
[0,1,3] -> [3,1,0];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.07918 true false

[] -> [];
[2,0] -> [0,2];
[1] -> [1];
[2,3] -> [3,2];
[2,1] -> [1,2];
[3,0,3] -> [3,0,3];
[3,2,1] -> [1,2,3];
[3] -> [3];
[1,2] -> [2,1];
[3,1] -> [1,3];
[1,1,1] -> [1,1,1];
[0] -> [0];
[0,3,2] -> [2,3,0];
[0,0] -> [0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.062077 true false

[0,2,3] -> [3,2,0];
[0] -> [0];
[0,2] -> [2,0];
[1,2] -> [2,1];
[1,1] -> [1,1];
[] -> [];
[1,1,2] -> [2,1,1];
[3,1] -> [1,3];
[1,3] -> [3,1];
[2] -> [2];
[1,0,0] -> [0,0,1];
[3,3,1] -> [1,3,3];
[2,3] -> [3,2];
[0,2,2] -> [2,2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0887130000001 true false

[0,3,0] -> [0,3,0];
[] -> [];
[0] -> [0];
[2,3,1] -> [1,3,2];
[1,2] -> [2,1];
[2] -> [2];
[1] -> [1];
[3,3] -> [3,3];
[1,1,2] -> [2,1,1];
[1,3] -> [3,1];
[3,0,0] -> [0,0,3];
[3] -> [3];
[0,1] -> [1,0];
[3,1,2] -> [2,1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.060483 true false

[] -> [];
[2,3] -> [3,2];
[2,1] -> [1,2];
[1,1,0] -> [0,1,1];
[3,1] -> [1,3];
[0,2] -> [2,0];
[0,3,3] -> [3,3,0];
[0] -> [0];
[3,2,3] -> [3,2,3];
[1] -> [1];
[1,0] -> [0,1];
[2] -> [2];
[3] -> [3];
[3,3,2] -> [2,3,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.045134 true false

[0] -> [0];
[2] -> [2];
[3] -> [3];
[0,1] -> [1,0];
[1,1] -> [1,1];
[] -> [];
[1,2,3] -> [3,2,1];
[3,1,1] -> [1,1,3];
[2,2] -> [2,2];
[2,3] -> [3,2];
[2,0,1] -> [1,0,2];
[3,1,3] -> [3,1,3];
[3,1,0] -> [0,1,3];
[1,3] -> [3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0456039999999 true false

[] -> [];
[0,1,3] -> [3,1,0];
[3,1] -> [1,3];
[2] -> [2];
[2,0] -> [0,2];
[1,3,3] -> [3,3,1];
[0,2,2] -> [2,2,0];
[0] -> [0];
[0,3,1] -> [1,3,0];
[0,0] -> [0,0];
[0,0,0] -> [0,0,0];
[1,2] -> [2,1];
[1] -> [1];
[1,0,3] -> [3,0,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.089389 true false

[0,1] -> [1,0];
[] -> [];
[2] -> [2];
[3,0,2] -> [2,0,3];
[2,1] -> [1,2];
[1,0] -> [0,1];
[1] -> [1];
[2,3] -> [3,2];
[3] -> [3];
[0] -> [0];
[2,3,1] -> [1,3,2];
[3,1,1] -> [1,1,3];
[0,3,2] -> [2,3,0];
[2,1,1] -> [1,1,2];
[2,2] -> [2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0903149999999 true false

[] -> [];
[0,2,0] -> [0,2,0];
[3,2,2] -> [2,2,3];
[1] -> [1];
[0] -> [0];
[3,1] -> [1,3];
[1,2] -> [2,1];
[0,2,2] -> [2,2,0];
[3] -> [3];
[3,2,0] -> [0,2,3];
[1,0,2] -> [2,0,1];
[0,1] -> [1,0];
[2,0,3] -> [3,0,2];
[1,2,1] -> [1,2,1];
[0,0,0] -> [0,0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0641869999999 true false

[3,2] -> [2,3];
[2,3,1] -> [1,3,2];
[0,3,0] -> [0,3,0];
[] -> [];
[1,2,1] -> [1,2,1];
[2] -> [2];
[1,1] -> [1,1];
[0,1,0] -> [0,1,0];
[0,3,3] -> [3,3,0];
[3,0] -> [0,3];
[2,1,0] -> [0,1,2];
[3] -> [3];
[2,2,1] -> [1,2,2];
[0] -> [0];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.070395 true false

[] -> [];
[2] -> [2];
[1,3] -> [3,1];
[1] -> [1];
[0,1] -> [1,0];
[3,1] -> [1,3];
[3] -> [3];
[1,3,1] -> [1,3,1];
[2,0,3] -> [3,0,2];
[0] -> [0];
[2,1,2] -> [2,1,2];
[2,1,3] -> [3,1,2];
[0,3] -> [3,0];
[2,3,1] -> [1,3,2];
[0,2] -> [2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0757410000001 true false

[1,2,1] -> [1,2,1];
[2,3] -> [3,2];
[] -> [];
[3,2] -> [2,3];
[0,3] -> [3,0];
[2] -> [2];
[2,2,2] -> [2,2,2];
[3] -> [3];
[1,2] -> [2,1];
[0,2] -> [2,0];
[3,2,0] -> [0,2,3];
[1,0] -> [0,1];
[1] -> [1];
[0] -> [0];
[0,1] -> [1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.080962 true false

[0,3] -> [3,0];
[] -> [];
[2] -> [2];
[1,0,2] -> [2,0,1];
[2,0] -> [0,2];
[0,2] -> [2,0];
[3] -> [3];
[0] -> [0];
[1,0] -> [0,1];
[3,3] -> [3,3];
[2,1,2] -> [2,1,2];
[1,1] -> [1,1];
[3,3,0] -> [0,3,3];
[1] -> [1];
[0,0,1] -> [1,0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.053539 true false

[1,2] -> [2,1];
[0,3] -> [3,0];
[2,1] -> [1,2];
[2,3,2] -> [2,3,2];
[1,2,1] -> [1,2,1];
[0,1] -> [1,0];
[] -> [];
[3,0,1] -> [1,0,3];
[0,0,2] -> [2,0,0];
[0] -> [0];
[0,3,2] -> [2,3,0];
[2,0,3] -> [3,0,2];
[2,3,0] -> [0,3,2];
[2] -> [2];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0631579999999 true false

[3,0,1] -> [1,0,3];
[1,0,1] -> [1,0,1];
[3] -> [3];
[0] -> [0];
[2,0] -> [0,2];
[2,3] -> [3,2];
[3,3,2] -> [2,3,3];
[0,0,3] -> [3,0,0];
[2,2] -> [2,2];
[] -> [];
[1,3] -> [3,1];
[2,2,3] -> [3,2,2];
[2,1] -> [1,2];
[1,2,1] -> [1,2,1];
[3,2] -> [2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.05279 true false

[3,0] -> [0,3];
[] -> [];
[3] -> [3];
[1,0,1] -> [1,0,1];
[3,3,2] -> [2,3,3];
[3,2] -> [2,3];
[0,2,1] -> [1,2,0];
[0,1,1] -> [1,1,0];
[2,2] -> [2,2];
[2] -> [2];
[0] -> [0];
[1,0] -> [0,1];
[1] -> [1];
[1,3,0] -> [0,3,1];
[0,1] -> [1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.055337 true false

[0,0] -> [0,0];
[2,2,0] -> [0,2,2];
[0,3] -> [3,0];
[1,0] -> [0,1];
[2] -> [2];
[0,3,1] -> [1,3,0];
[3] -> [3];
[] -> [];
[2,1,1] -> [1,1,2];
[2,1] -> [1,2];
[1,0,1] -> [1,0,1];
[3,2] -> [2,3];
[1,1] -> [1,1];
[1,0,0] -> [0,0,1];
[0,1,3] -> [3,1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0533230000001 true false

