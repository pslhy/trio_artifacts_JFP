Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (Un_Node x . 1, Nil)

0.0084 false
Time(s): 0.03 
Mem(Kb): 16260

Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [0,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 2))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.0301 false
Time(s): 0.05 
Mem(Kb): 17508

Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 2))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.0363 false
Time(s): 0.05 
Mem(Kb): 17920

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0305 false
Time(s): 0.05 
Mem(Kb): 17784

Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ()) -> [1,1,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0350 false
Time(s): 0.05 
Mem(Kb): 17860

Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 2))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.0215 false
Time(s): 0.04 
Mem(Kb): 17236

Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append Cons (Un_Node x . 1, f (Un_Node x . 0))
                    (f (Un_Node x . 2))

0.0405 false
Time(s): 0.06 
Mem(Kb): 18908

Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [1,3,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0386 false
Time(s): 0.06 
Mem(Kb): 18516

Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [3,1,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (S (Un_Node x . 1),
                         Cons (1, Cons (Un_Node x . 1, Nil)))

0.1181 false
Time(s): 0.14 
Mem(Kb): 18488

Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [3,0,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 2))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.0257 false
Time(s): 0.04 
Mem(Kb): 17176

Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (Un_Node x . 1, Nil)

0.0066 false
Time(s): 0.03 
Mem(Kb): 16264

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0302 false
Time(s): 0.05 
Mem(Kb): 17784

Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [2,1];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 2))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.0296 false
Time(s): 0.05 
Mem(Kb): 17272

Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [0,3,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (0,
                         append Cons (S (Un_Node x . 1), f (Un_Node x . 0))
                           Cons (Un_Node x . 1, f (Un_Node x . 0)))

0.0565 false
Time(s): 0.07 
Mem(Kb): 17988

Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,0,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.0306 false
Time(s): 0.05 
Mem(Kb): 19096

Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [2,2,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (2, Cons (2, Cons (Un_Node x . 1, Nil)))

0.0368 false
Time(s): 0.05 
Mem(Kb): 17396

Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0251 false
Time(s): 0.04 
Mem(Kb): 17228

Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [3,1,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (S (Un_Node x . 1),
                         Cons (1, Cons (Un_Node x . 1, Nil)))

0.1055 false
Time(s): 0.12 
Mem(Kb): 18424

Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [0,1,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (0, Cons (1, Cons (Un_Node x . 1, Nil)))

0.1068 false
Time(s): 0.12 
Mem(Kb): 19060

Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [2,2,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0489 false
Time(s): 0.07 
Mem(Kb): 19112

Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Leaf (),2,Leaf ()) -> [2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0459 false
Time(s): 0.07 
Mem(Kb): 18224

Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [3,1];
Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 2))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.0498 false
Time(s): 0.07 
Mem(Kb): 19088

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 2 with
                     | Leaf _ -> Cons (0, Cons (Un_Node x . 1, Nil))
                     | Node _ -> append (f (Un_Node (Un_Node x . 2) . 2))
                                   Cons (Un_Node x . 1, f (Un_Node x . 0)))

0.2666 false
Time(s): 0.29 
Mem(Kb): 21084

Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [2,3,3];
Node (Leaf (),1,Leaf ()) -> [1];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0538 false
Time(s): 0.07 
Mem(Kb): 19644

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,3,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> Cons (Un_Node x . 1, Nil)
                     | Node _ -> append Cons (1, f (Un_Node x . 0))
                                   Cons (Un_Node x . 1, f (Un_Node x . 2)))

0.1006 false
Time(s): 0.12 
Mem(Kb): 19664

Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> [3,2,1];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0580 false
Time(s): 0.08 
Mem(Kb): 19360

Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 2))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.0918 false
Time(s): 0.12 
Mem(Kb): 20144

Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [0,1,3];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [0,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 2))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.0538 false
Time(s): 0.07 
Mem(Kb): 19436

Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.0483 false
Time(s): 0.07 
Mem(Kb): 19044

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [1,0,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0920 false
Time(s): 0.11 
Mem(Kb): 19684

Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [0,2,3];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [3,0,1];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> append (f (Un_Node x . 2))
                                   Cons (Un_Node x . 1, f (Un_Node x . 0))
                     | Node _ -> (match Un_Node (Un_Node x . 0) . 1 with
                                    | O _ -> Cons (Un_Node (Un_Node x . 0) .
                                                     1,
                                                    Cons (Un_Node x . 1, Nil))
                                    | S _ -> Cons (Un_Node (Un_Node x . 0) .
                                                     1,
                                                    Cons (0,
                                                           Cons (Un_Node x .
                                                                   1,
                                                                  Nil)))))

15.5151 false
Time(s): 15.54 
Mem(Kb): 25668

Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,3];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [1,1,0];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [1,1,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (1, Cons (1, Cons (Un_Node x . 1, Nil)))

0.2564 false
Time(s): 0.27 
Mem(Kb): 24208

Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [3,2];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [1,2];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 2))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.0724 false
Time(s): 0.09 
Mem(Kb): 20084

Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,2,1];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,1,2];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 2 with
                     | Leaf _ -> Cons (S (S (Un_Node x . 1)),
                                        append
                                          Cons (S (Un_Node x . 1),
                                                 f (Un_Node x . 2))
                                          Cons (Un_Node x . 1,
                                                 f (Un_Node x . 2)))
                     | Node _ -> (match Un_Node x . 0 with
                                    | Leaf _ -> Cons (Un_Node (Un_Node x . 2)
                                                        . 1,
                                                       Cons (Un_Node x . 1,
                                                              Nil))
                                    | Node _ -> Cons (Un_Node x . 1,
                                                       append Cons (1, Nil)
                                                         Cons (Un_Node x . 1,
                                                                Nil))))

31.2415 false
Time(s): 31.27 
Mem(Kb): 25704

Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,0,1];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [1,0,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    (append (f (Un_Node x . 2)) Cons (Un_Node x . 1, Nil))

1.9906 true
Time(s): 2.02 
Mem(Kb): 64132

Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [3,1];
Node (Leaf (),2,Leaf ()) -> [2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0658 false
Time(s): 0.09 
Mem(Kb): 18824

Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [2,2,3];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [3,3,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    (append (f (Un_Node x . 2)) Cons (Un_Node x . 1, Nil))

2.6417 true
Time(s): 2.75 
Mem(Kb): 64132

Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,0,1];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [0,3,2];
Node (Leaf (),1,Leaf ()) -> [1];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> (match Un_Node x . 2 with
                                    | Leaf _ -> Cons (Un_Node x . 1, Nil)
                                    | Node _ -> Cons (0,
                                                       Cons (Un_Node (
                                                               Un_Node x . 2)
                                                               . 1,
                                                              Cons (Un_Node x
                                                                    . 1, 
                                                                    Nil))))
                     | Node _ -> Cons (Un_Node x . 1,
                                        append Cons (0, f (Un_Node x . 2))
                                          (f (Un_Node (Un_Node x . 0) . 2))))

16.1516 false
Time(s): 16.17 
Mem(Kb): 23124

Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,1,3];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [2,1,3];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [1,0,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 2 with
                     | Leaf _ -> Cons (Un_Node x . 1,
                                        Cons (1, Cons (Un_Node x . 1, Nil)))
                     | Node _ -> Cons (S (Un_Node (Un_Node x . 2) . 1),
                                        Cons (Un_Node (Un_Node x . 2) . 1,
                                               Cons (Un_Node x . 1, Nil))))

6.4616 false
Time(s): 6.56 
Mem(Kb): 29132

Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [2,0,3];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [1,0,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> Cons (Un_Node x . 1, Nil)
                     | Node _ -> (match Un_Node x . 1 with
                                    | O _ -> append
                                               Cons (S (Un_Node x . 1),
                                                      f (Un_Node x . 2))
                                               Cons (Un_Node x . 1,
                                                      f (Un_Node x . 0))
                                    | S _ -> append
                                               Cons (Un_S (Un_Node x . 1),
                                                      f (Un_Node x . 0))
                                               Cons (Un_Node x . 1,
                                                      f (Un_Node x . 2))))

0.8762 false
Time(s): 0.90 
Mem(Kb): 20340

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,2,2];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,0,1];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [2,3,1];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> (match Un_Node x . 2 with
                                    | Leaf _ -> Cons (Un_Node x . 1, Nil)
                                    | Node _ -> Cons (S (Un_Node x . 1),
                                                       Cons (Un_Node (
                                                               Un_Node x . 2)
                                                               . 1,
                                                              Cons (1, Nil))))
                     | Node _ -> Cons (1,
                                        Cons (Un_Node (Un_Node x . 0) . 1,
                                               Cons (Un_Node x . 1, Nil))))

5.8968 false
Time(s): 5.92 
Mem(Kb): 25664

Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ()) -> [2,1,0];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [2,1,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    (append (f (Un_Node x . 2)) Cons (Un_Node x . 1, Nil))

11.2760 true
Time(s): 11.30 
Mem(Kb): 47528

Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [3,2,0];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [1,2,0];
Node (Leaf (),2,Leaf ()) -> [2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [0,0,3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [3,3,2];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> Cons (Un_Node x . 1, f (Un_Node x . 2))
                     | Node _ -> (match Un_Node x . 2 with
                                    | Leaf _ -> Cons (Un_Node (Un_Node x . 0)
                                                        . 1,
                                                       Cons (Un_Node x . 1,
                                                              Nil))
                                    | Node _ -> Cons (Un_Node (Un_Node x . 2)
                                                        . 1,
                                                       Cons (Un_Node (
                                                               Un_Node x . 2)
                                                               . 1,
                                                              Cons (Un_Node x
                                                                    . 1, 
                                                                    Nil)))))

2.2578 false
Time(s): 2.28 
Mem(Kb): 25692

Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [2,1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [0,1];
Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> (match Un_Node x . 2 with
                                    | Leaf _ -> Cons (Un_Node x . 1, Nil)
                                    | Node _ -> append (f (Un_Node x . 2))
                                                  Cons (Un_Node x . 1,
                                                         f (Un_Node x . 0)))
                     | Node _ -> append (f (Un_Node x . 0))
                                   Cons (Un_Node x . 1, f (Un_Node x . 2)))

0.3595 false
Time(s): 0.38 
Mem(Kb): 21208

Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [2,2,1];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [1,0,3];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Leaf () -> [];

=================================
None
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [1,0];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [1,0,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 2 with
                     | Leaf _ -> Cons (Un_Node x . 1, Nil)
                     | Node _ -> (match Un_Node (Un_Node x . 2) . 1 with
                                    | O _ -> append
                                               Cons (S (Un_Node x . 1),
                                                      f (Un_Node x . 2))
                                               (f (Un_Node x . 2))
                                    | S _ -> append (f (Un_Node x . 2))
                                               Cons (Un_Node x . 1,
                                                      f (Un_Node x . 0))))

4.2333 false
Time(s): 4.26 
Mem(Kb): 22040

Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,3,3];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,0,2];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [1,1,3];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,2,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    (append (f (Un_Node x . 2)) Cons (Un_Node x . 1, Nil))

5.9408 true
Time(s): 5.97 
Mem(Kb): 89924

Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [2,3,0];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [1,1,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [0,0,3];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [2,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    (append (f (Un_Node x . 2)) Cons (Un_Node x . 1, Nil))

77.2023 true
Time(s): 77.23 
Mem(Kb): 64164

Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [2,3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [2,1,3];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [3,2];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [2,0,3];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,3,1];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()) -> [3,2,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (append (f (Un_Node x . 0)) (f (Un_Node x . 2)))
                    Cons (Un_Node x . 1, Nil)

0.2996 true
Time(s): 0.32 
Mem(Kb): 28236

Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [3,2,3];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()) -> [0,1,2];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,0,3];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    (append (f (Un_Node x . 2)) Cons (Un_Node x . 1, Nil))

3.3260 true
Time(s): 3.44 
Mem(Kb): 80260

Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [1,2,3];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [2,1,1];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [1,0,0];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [0,3,2];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [3,3,0];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [2,0];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,1];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,1];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 2))
                    Cons (Un_Node x . 1, f (Un_Node x . 0))

0.2822 false
Time(s): 0.31 
Mem(Kb): 26052

Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [3,1,2];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,2];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,0];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ()) -> [0,0,2];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,1];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.3971 false
Time(s): 0.43 
Mem(Kb): 28852

Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [3,2,2];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> Cons (Un_Node x . 1, Nil)
                     | Node _ -> append (f (Un_Node (Un_Node x . 0) . 2))
                                   Cons (Un_Node x . 1, f (Un_Node x . 0)))

0.1960 false
Time(s): 0.22 
Mem(Kb): 22072

Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [3,2];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),1,Leaf ()) -> [3,3,1];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [1,2];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [0,1,2];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [1,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 2 with
                     | Leaf _ -> Cons (S (S (Un_Node x . 1)),
                                        Cons (S (S (Un_Node x . 1)),
                                               Cons (Un_Node x . 1, Nil)))
                     | Node _ -> (match Un_Node (Un_Node x . 2) . 0 with
                                    | Leaf _ -> Cons (Un_Node (Un_Node x . 2)
                                                        . 1,
                                                       Cons (Un_Node x . 1,
                                                              Nil))
                                    | Node _ -> Cons (0,
                                                       append
                                                         Cons (1,
                                                                f
                                                                  (Un_Node x
                                                                    . 0))
                                                         Cons (Un_Node x . 1,
                                                                f
                                                                  (Un_Node x
                                                                    . 0)))))

0.8187 false
Time(s): 0.84 
Mem(Kb): 24252

Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,2];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [2,2,0];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [3,1,0];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 2 with
                     | Leaf _ -> Cons (S (S (Un_Node x . 1)),
                                        Cons (S (S (Un_Node x . 1)),
                                               Cons (Un_Node x . 1, Nil)))
                     | Node _ -> (match Un_Node (Un_Node x . 2) . 0 with
                                    | Leaf _ -> Cons (Un_Node x . 1,
                                                       Cons (Un_Node x . 1,
                                                              Nil))
                                    | Node _ -> Cons (Un_Node (Un_Node (
                                                                 Un_Node x .
                                                                   2)
                                                                 . 0)
                                                        . 1,
                                                       Cons (Un_Node (
                                                               Un_Node x . 2)
                                                               . 1,
                                                              Cons (Un_Node x
                                                                    . 1, 
                                                                    Nil)))))

34.4256 false
Time(s): 34.45 
Mem(Kb): 24268

Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [3,3,2];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,0];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 2 with
                     | Leaf _ -> (match Un_Node x . 0 with
                                    | Leaf _ -> Cons (Un_Node x . 1, Nil)
                                    | Node _ -> append (f (Un_Node x . 0))
                                                  Cons (Un_Node x . 1,
                                                         f (Un_Node x . 2)))
                     | Node _ -> (match Un_Node x . 1 with
                                    | O _ -> Cons (Un_Node x . 1,
                                                    Cons (Un_Node (Un_Node x
                                                                    . 2)
                                                            . 1,
                                                           Cons (Un_Node x .
                                                                   1,
                                                                  Nil)))
                                    | S _ -> Cons (Un_Node (Un_Node x . 2) .
                                                     1,
                                                    append
                                                      (f (Un_Node x . 0))
                                                      Cons (Un_Node x . 1,
                                                             Nil))))

91.4519 false
Time(s): 91.47 
Mem(Kb): 27364

Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [3,2,0];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,2,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,0,1];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [0,0,3];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [3,3,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> (match Un_Node x . 2 with
                                    | Leaf _ -> Cons (Un_Node x . 1, Nil)
                                    | Node _ -> Cons (Un_Node x . 1,
                                                       Cons (Un_Node x . 1,
                                                              Cons (Un_Node x
                                                                    . 1, 
                                                                    Nil))))
                     | Node _ -> (match Un_Node (Un_Node x . 0) . 2 with
                                    | Leaf _ -> Cons (Un_Node (Un_Node x . 0)
                                                        . 1,
                                                       append Cons (2, Nil)
                                                         Cons (Un_Node x . 1,
                                                                Nil))
                                    | Node _ -> Cons (Un_Node (Un_Node (
                                                                 Un_Node x .
                                                                   0)
                                                                 . 2)
                                                        . 1,
                                                       Cons (Un_Node (
                                                               Un_Node x . 0)
                                                               . 1,
                                                              Cons (Un_Node x
                                                                    . 1, 
                                                                    Nil)))))

118.2075 false
Time(s): 118.23 
Mem(Kb): 31256

Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [1,0];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()) -> [3,2,0];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> [0,2,1];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> (match Un_Node x . 2 with
                                    | Leaf _ -> Cons (Un_Node x . 1, Nil)
                                    | Node _ -> append (f (Un_Node x . 2))
                                                  Cons (Un_Node x . 1,
                                                         f (Un_Node x . 0)))
                     | Node _ -> append (f (Un_Node x . 0))
                                   Cons (Un_Node x . 1, f (Un_Node x . 2)))

0.6503 false
Time(s): 0.67 
Mem(Kb): 23120

Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,3];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [2,1,3];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,0,0];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,3];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    (append (f (Un_Node x . 2)) Cons (Un_Node x . 1, Nil))

101.1844 true
Time(s): 101.27 
Mem(Kb): 89872

Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [0,2,2];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [1,3,3];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ()) -> [0,0,1];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,0,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [1,3,3];
Leaf () -> [];

=================================
None
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [3,2,1];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,3];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [0,2,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [1,3,0];
Leaf () -> [];

=================================
None
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()) -> [0,2,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,2,0];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [2,1,3];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [0,1,3];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> (match Un_Node x . 2 with
                                    | Leaf _ -> Cons (Un_Node x . 1, Nil)
                                    | Node _ -> append (f (Un_Node x . 2))
                                                  Cons (Un_Node x . 1,
                                                         f (Un_Node x . 0)))
                     | Node _ -> (match Un_Node (Un_Node x . 0) . 1 with
                                    | O _ -> Cons (Un_Node (Un_Node x . 0) .
                                                     1,
                                                    append
                                                      (f (Un_Node x . 2))
                                                      Cons (Un_Node x . 1,
                                                             Nil))
                                    | S _ -> append (f (Un_Node x . 0))
                                               Cons (Un_Node x . 1,
                                                      f (Un_Node x . 2))))

47.2497 false
Time(s): 47.28 
Mem(Kb): 29180

Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [0,0,3];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [3,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [1,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 1 with
                     | O _ -> append (f (Un_Node x . 2))
                                Cons (Un_Node x . 1, f (Un_Node x . 0))
                     | S _ -> append (f (Un_Node x . 0))
                                Cons (Un_Node x . 1, f (Un_Node x . 2)))

0.4066 false
Time(s): 0.43 
Mem(Kb): 25604

Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> [1,2,0];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [3,0,1];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,0,1];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ()) -> [1,0,1];
Leaf () -> [];

=================================
None
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,1];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [2,0,2];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [1,1,0];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [0,1,2];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [0,2,3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,1,1];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [2,0];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [2,3,3];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,2,0];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [3,1];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [2,2,0];
Leaf () -> [];

=================================
None
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [1,0,1];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [2,2,1];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,0,2];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,0];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,3];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [1,2];
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [1,1,1];
Leaf () -> [];

=================================
None
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [0,0,2];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [3,3,3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [3,0,2];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [0,0,3];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [1,2,3];
Leaf () -> [];

=================================
None
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,2,3];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [3,2];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [3,1];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (append (f (Un_Node x . 0)) (f (Un_Node x . 2)))
                    Cons (Un_Node x . 1, Nil)

0.3087 true
Time(s): 0.33 
Mem(Kb): 27192

Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [1,0,3];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [2,3,3];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ()) -> [3,1,1];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [3,1,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Leaf () -> [];

=================================
None
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> [0,2,3];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [1,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [3,0,0];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [2,0];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [0,0,1];
Leaf () -> [];

=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 2 with
                     | Leaf _ -> Cons (0,
                                        Cons (2, Cons (Un_Node x . 1, Nil)))
                     | Node _ -> (match Un_Node x . 0 with
                                    | Leaf _ -> (match Un_Node (Un_Node x . 2)
                                                         . 2 with
                                                   | Leaf _ -> Cons (Un_Node (
                                                                    Un_Node x
                                                                    . 2) . 1,
                                                                    Cons 
                                                                    (Un_Node x
                                                                    . 1, 
                                                                    Nil))
                                                   | Node _ -> Cons (S (
                                                                    S (
                                                                    S (
                                                                    Un_Node x
                                                                    . 1))),
                                                                    Cons 
                                                                    (Un_Node x
                                                                    . 1,
                                                                    Cons 
                                                                    (0, 
                                                                    Nil))))
                                    | Node _ -> Cons (Un_Node (Un_Node x . 0)
                                                        . 1,
                                                       Cons (Un_Node (
                                                               Un_Node x . 2)
                                                               . 1,
                                                              Cons (Un_Node x
                                                                    . 1, 
                                                                    Nil)))))

2.7219 false
Time(s): 2.74 
Mem(Kb): 29204

Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ()) -> [1,0,3];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [1,0,3];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [2,3,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [1,0];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [2,1];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [3,0,1];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [0,1];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [3,2,0];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [2,2,3];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [1,2,0];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [0,3,0];
Leaf () -> [];

=================================
None
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,0,1];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,3,0];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [3,1,2];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [1,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [3,0];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> [0,2,3];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [3,3,0];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [1,0,0];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,1];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,0,0];
Leaf () -> [];

=================================
None
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [2,1,3];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,2,1];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,1,2];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [2,0];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [2,2,0];
Leaf () -> [];

=================================
None
