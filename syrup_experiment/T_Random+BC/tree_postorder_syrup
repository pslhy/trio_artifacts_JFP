Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    (append
      ( ( Nil ),
        ( Cons v1 ( Nil )
          ) ))
  
0.0014 false
Time(s): 0.05 
Mem(Kb): 28248

Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [0,2];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons ( Zero )
      (append
        ( ( Nil ),
          ( Cons v1
            ( Nil ) ) ))
      )
  
0.0287 false
Time(s): 0.05 
Mem(Kb): 32892

Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons ( Zero )
      (append
        ( ( Nil ),
          ( Cons v1
            ( Nil ) ) ))
      )
  
0.0284 false
Time(s): 0.05 
Mem(Kb): 32560

Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ()) -> [1,1,2];
Leaf () -> [];

=================================
None
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,0];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons v1
      ( Cons ( Zero )
        ( Cons v1 ( Nil )
          ) ) )
  
0.1872 false
Time(s): 0.21 
Mem(Kb): 33388

Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [1,3,3];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons
      ( Succ ( Zero ) )
      ( Cons v1
        ( Cons v1 ( Nil )
          ) ) )
  
0.1966 false
Time(s): 0.22 
Mem(Kb): 33332

Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [3,1,2];
Leaf () -> [];

=================================
None
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [3,0,0];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons
      ( Succ
        ( Succ
          ( Succ v1 ) ) )
      ( Cons v1
        ( Cons v1 ( Nil )
          ) ) )
  
0.2037 false
Time(s): 0.23 
Mem(Kb): 33548

Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    (append
      ( ( Nil ),
        ( Cons v1 ( Nil )
          ) ))
  
0.0016 false
Time(s): 0.03 
Mem(Kb): 28204

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons ( Zero )
      (append
        ( ( Nil ),
          ( Cons v1
            ( Nil ) ) ))
      )
  
0.0267 false
Time(s): 0.05 
Mem(Kb): 32672

Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [2,1];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons ( Succ v1 )
      (append
        ( ( Nil ),
          ( Cons v1
            ( Nil ) ) ))
      )
  
0.0288 false
Time(s): 0.06 
Mem(Kb): 32636

Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [0,3,2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,0,0];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons v1
      (append
        ( (f0 l1),
          (f0 l1) )) )
  
0.1373 false
Time(s): 0.16 
Mem(Kb): 33036

Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [2,2,3];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons
      ( Succ
        ( Succ ( Zero ) )
        )
      ( Cons
        ( Succ
          ( Succ ( Zero )
            ) )
        ( Cons v1 ( Nil )
          ) ) )
  
67.7064 false
Time(s): 67.74 
Mem(Kb): 192552

Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons ( Succ v1 )
      (append
        ( ( Nil ),
          ( Cons v1
            ( Nil ) ) ))
      )
  
0.0256 false
Time(s): 0.05 
Mem(Kb): 32200

Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [3,1,2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [0,1,3];
Leaf () -> [];

=================================
None
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [2,2,2];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons v1 (f0 r1) )
  
0.1444 false
Time(s): 0.17 
Mem(Kb): 33632

Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Leaf (),2,Leaf ()) -> [2];
Leaf () -> [];

=================================
None
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [3,1];
Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    (append
      ( (f0 r1),
        ( Cons v1 ( Nil )
          ) ))
  
0.0035 false
Time(s): 0.03 
Mem(Kb): 29100

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,3];
Leaf () -> [];

=================================
None
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [2,3,3];
Node (Leaf (),1,Leaf ()) -> [1];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,3,2];
Leaf () -> [];

=================================
None
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> [3,2,1];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [0,1,3];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [0,2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Leaf () -> [];

=================================
fix f0.fun x0.
  match (x0) with
  | Leaf -> ( Nil )
  | Node(v1,l1,r1) ->
    ( Cons v1
      (append
        ( (f0 l1),
          (f0 l1) )) )
  
0.0343 false
Time(s): 0.06 
Mem(Kb): 32336

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [1,0,0];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [0,2,3];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [3,0,1];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,3];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [1,1,0];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [1,1,0];
Leaf () -> [];

=================================
None
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [3,2];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [1,2];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,0];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,2,1];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,1,2];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,0,1];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [1,0,3];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [3,1];
Node (Leaf (),2,Leaf ()) -> [2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [2,2,3];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [3,3,2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,0,1];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [0,3,2];
Node (Leaf (),1,Leaf ()) -> [1];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,1,3];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [2,1,3];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [1,0,2];
Leaf () -> [];

=================================
None
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [2,0,3];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [1,0,0];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,2,2];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,0,1];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [2,3,1];
Leaf () -> [];

=================================
None
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ()) -> [2,1,0];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [2,1,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [3,2,0];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [1,2,0];
Node (Leaf (),2,Leaf ()) -> [2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [0,0,3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [3,3,2];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Leaf () -> [];

=================================
None
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [2,1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [0,1];
Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [2,2,1];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [1,0,3];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Leaf () -> [];

=================================
None
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [1,0];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [1,0,0];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,3,3];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,0,2];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [1,1,3];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,2,2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [2,3,0];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [1,1,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [0,0,3];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [2,0];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [2,3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [2,1,3];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [3,2];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [2,0,3];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,3,1];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()) -> [3,2,0];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [3,2,3];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()) -> [0,1,2];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,0,3];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [1,2,3];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [2,1,1];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [1,0,0];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [0,3,2];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [3,3,0];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [2,0];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,1];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,1];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,2];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [3,1,2];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,2];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,0];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ()) -> [0,0,2];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,1];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [3,2,2];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,0];
Leaf () -> [];

=================================
None
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [3,2];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),1,Leaf ()) -> [3,3,1];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [1,2];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [0,1,2];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [1,3];
Leaf () -> [];

=================================
None
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,2];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [2,2,0];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [3,1,0];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [3,3,2];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,0];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [3,2,0];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,2,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,0,1];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [0,0,3];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [3,3,3];
Leaf () -> [];

=================================
None
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [1,0];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()) -> [3,2,0];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> [0,2,1];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,3];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [2,1,3];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,0,0];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,3];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];
Leaf () -> [];

=================================
None
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [0,2,2];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [1,3,3];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ()) -> [0,0,1];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,0,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [1,3,3];
Leaf () -> [];

=================================
None
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [3,2,1];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,3];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [0,2,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [1,3,0];
Leaf () -> [];

=================================
None
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()) -> [0,2,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,2,0];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [2,1,3];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [0,1,3];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [0,0,3];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [3,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [1,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> [1,2,0];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [3,0,1];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,0,1];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ()) -> [1,0,1];
Leaf () -> [];

=================================
None
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,1];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [2,0,2];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [1,1,0];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [0,1,2];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [0,2,3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,1,1];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [2,0];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [2,3,3];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,2,0];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [3,1];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [2,2,0];
Leaf () -> [];

=================================
None
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [1,0,1];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [2,2,1];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,0,2];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,0];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,3];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [1,2];
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [1,1,1];
Leaf () -> [];

=================================
None
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [0,0,2];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [3,3,3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [3,0,2];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [0,0,3];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [1,2,3];
Leaf () -> [];

=================================
None
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,2,3];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [3,2];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [3,1];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [1,0,3];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [2,3,3];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ()) -> [3,1,1];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [3,1,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Leaf () -> [];

=================================
None
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> [0,2,3];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [1,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [3,0,0];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [2,0];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [0,0,1];
Leaf () -> [];

=================================
None
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ()) -> [1,0,3];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [1,0,3];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [2,3,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [1,0];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [2,1];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [3,0,1];
Leaf () -> [];

=================================
None
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [0,3];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [0,1];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [3,2,0];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [2,2,3];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [1,2,0];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [0,3,0];
Leaf () -> [];

=================================
None
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,0,1];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,3,0];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [3,1,2];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [1,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [3,0];
Leaf () -> [];

=================================
None
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> [0,2,3];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [3,3,0];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [1,0,0];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,1];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,0,0];
Leaf () -> [];

=================================
None
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [2,1,3];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,2,1];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,1,2];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [2,0];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [2,2,0];
Leaf () -> [];

=================================
None
