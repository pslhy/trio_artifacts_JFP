(isEven,[1,3]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  ( Nil )
0.0011 false

(isEven,[2,3,3]) -> [2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 ( Nil ) )
  
0.0022 false

(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  ( Nil )
0.0003 false

(isEven,[0,2]) -> [0,2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1). x1
0.0017 false

(isEven,[3,1]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  ( Nil )
0.0011 false

(isNonzero,[0,0,0]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  ( Nil )
0.0014 false

(isNonzero,[1]) -> [1];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1). x1
0.0012 false

(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1). x1
0.0011 false

(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  ( Nil )
0.0003 false

(isNonzero,[0,1]) -> [1];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 -> tl1
  
0.0017 false

(isEven,[2,0]) -> [2,0];
(isNonzero,[1,2,1]) -> [1,2,1];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1). x1
0.0035 false

(isNonzero,[2,2]) -> [2,2];
(isNonzero,[0]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else tl1
  
0.0385 false

(isEven,[1,2]) -> [2];
(isEven,[1,1]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1) then x1
      else
        (f0 ( x0, tl1 ))
  
0.0403 false

(isNonzero,[1,1,2]) -> [1,1,2];
(isNonzero,[0,3]) -> [3];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.1557 true

(isEven,[0,0,0]) -> [0,0,0];
(isNonzero,[1,2,0]) -> [1,2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.2163 true

(isEven,[2]) -> [2];
(isNonzero,[2]) -> [2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1). x1
0.0019 false

(isEven,[2]) -> [2];
(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1) then x1
      else tl1
  
0.0138 false

(isNonzero,[1]) -> [1];
(isEven,[3,1]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.0203 true

(isNonzero,[3,3]) -> [3,3];
(isNonzero,[3,0,2]) -> [3,2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.1966 true

(isNonzero,[3,2]) -> [3,2];
(isEven,[0,3]) -> [0];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        ( Cons hd1
          ( Nil ) )
    else x1
0.0535 false

(isEven,[1,3]) -> [];
(isNonzero,[1]) -> [1];
(isNonzero,[0,1,0]) -> [1];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.1761 true

(isEven,[0,3,0]) -> [0,0];
(isEven,[3,1]) -> [];
(isNonzero,[1,3,1]) -> [1,3,1];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else x1
0.2746 false

(isEven,[2]) -> [2];
(isNonzero,[2,3]) -> [2,3];
(isEven,[3,1,2]) -> [2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then x1
          else
            (f0
              ( x0, tl1 ))
    else x1
0.0918 false

(isNonzero,[2,0,0]) -> [2];
(isNonzero,[1,1,0]) -> [1,1];
(isEven,[1,2,3]) -> [2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.7797 true

(isNonzero,[0]) -> [];
(isNonzero,[0,2]) -> [2];
(isEven,[2,1,1]) -> [2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.2419 true

(isEven,[0,0]) -> [0,0];
(isNonzero,[3,3]) -> [3,3];
(isEven,[3,2,0]) -> [2,0];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then x1
          else
            (f0
              ( x0, tl1 ))
    else x1
0.2801 false

(isEven,[3,3,1]) -> [];
(isEven,[0,1]) -> [0];
(isNonzero,[1]) -> [1];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else ( Nil )
    else x1
0.0420 false

(isNonzero,[2,1]) -> [2,1];
(isEven,[1,2]) -> [2];
(isNonzero,[2]) -> [2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 -> tl1
    else x1
0.0859 false

(isEven,[3,0,1]) -> [0];
(isNonzero,[3,0,3]) -> [3,3];
(isNonzero,[2,0]) -> [2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.6934 true

(isNonzero,[2]) -> [2];
(isEven,[1]) -> [];
(isNonzero,[0,1,3]) -> [1,3];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.1384 true

(isEven,[2,1]) -> [2];
(isEven,[3]) -> [];
(isEven,[0]) -> [0];
(isNonzero,[2,1]) -> [2,1];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              ( Nil ) )
          else tl1
    else x1
0.2299 false

(isNonzero,[0,3,1]) -> [3,1];
(isNonzero,[2,1,3]) -> [2,1,3];
(isNonzero,[2]) -> [2];
(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
1.6553 true

(isEven,[0,0]) -> [0,0];
(isEven,[3]) -> [];
(isNonzero,[3,2]) -> [3,2];
(isEven,[1,3]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then x1
          else ( Nil )
    else x1
0.2638 false

(isNonzero,[1,0,2]) -> [1,2];
(isNonzero,[1,0]) -> [1];
(isEven,[2,0]) -> [2,0];
(isNonzero,[0,3,3]) -> [3,3];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
10.9691 true

(isNonzero,[3,1]) -> [3,1];
(isNonzero,[1]) -> [1];
(isNonzero,[0]) -> [];
(isNonzero,[0,3]) -> [3];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else tl1
  
0.3390 false

(isEven,[3,1]) -> [];
(isNonzero,[3]) -> [3];
(isNonzero,[1,0]) -> [1];
(isNonzero,[1,2]) -> [1,2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.5732 true

(isEven,[3,2,3]) -> [2];
(isNonzero,[1]) -> [1];
(isNonzero,[2]) -> [2];
(isNonzero,[2,3,0]) -> [2,3];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
1.2490 true

(isEven,[1,2]) -> [2];
(isEven,[0]) -> [0];
(isNonzero,[3]) -> [3];
(isEven,[3,3]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then x1
          else
            (f0
              ( x0, tl1 ))
    else x1
0.1160 false

(isNonzero,[3,1,3]) -> [3,1,3];
(isNonzero,[0]) -> [];
(isNonzero,[1]) -> [1];
(isEven,[0,1]) -> [0];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else tl1
  
0.5261 false

(isEven,[0,1]) -> [0];
(isNonzero,[2,1,0]) -> [2,1];
(isNonzero,[0]) -> [];
(isNonzero,[2,0,2]) -> [2,2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
1.1621 true

(isNonzero,[2,0,0]) -> [2];
(isNonzero,[3,2]) -> [3,2];
(isEven,[2,2,1]) -> [2,2];
(isEven,[2,1]) -> [2];
(isEven,[2,3]) -> [2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
31.3974 true

(isNonzero,[1]) -> [1];
(isNonzero,[1,2]) -> [1,2];
(isNonzero,[1,0]) -> [1];
(isEven,[2]) -> [2];
(isEven,[3,0,3]) -> [0];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
6.9169 true

(isNonzero,[3,3]) -> [3,3];
(isNonzero,[0,1]) -> [1];
(isEven,[1]) -> [];
(isEven,[2,2,2]) -> [2,2,2];
(isNonzero,[2,0]) -> [2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else tl1
  
9.4879 false

(isNonzero,[2]) -> [2];
(isNonzero,[0,2]) -> [2];
(isNonzero,[1,2,0]) -> [1,2];
(isNonzero,[3,2]) -> [3,2];
(isEven,[0,0,2]) -> [0,0,2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else tl1
  
16.6529 false

(isEven,[1,3,2]) -> [2];
(isEven,[3,1,2]) -> [2];
(isEven,[0,3,3]) -> [0];
(isNonzero,[2,2]) -> [2,2];
(isEven,[1,0]) -> [0];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              ( Nil ) )
          else
            (f0
              ( x0, tl1 ))
    else x1
23.3609 false

(isEven,[2,2]) -> [2,2];
(isEven,[3]) -> [];
(isEven,[1,2,3]) -> [2];
(isNonzero,[1,0]) -> [1];
(isNonzero,[3]) -> [3];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
3.0402 true

(isNonzero,[1,0,0]) -> [1];
(isEven,[0,0,0]) -> [0,0,0];
(isEven,[2,3,3]) -> [2];
(isEven,[2,3]) -> [2];
(isNonzero,[0,1]) -> [1];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
60.1326 true

(isNonzero,[0,0]) -> [];
(isNonzero,[2,3,0]) -> [2,3];
(isNonzero,[1,1]) -> [1,1];
(isNonzero,[3]) -> [3];
(isEven,[3]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
1.9121 true

(isNonzero,[1,1]) -> [1,1];
(isNonzero,[1,3,3]) -> [1,3,3];
(isNonzero,[2]) -> [2];
(isEven,[0,2]) -> [0,2];
(isNonzero,[0,3]) -> [3];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else tl1
  
13.6495 false

(isNonzero,[0,1,1]) -> [1,1];
(isNonzero,[3]) -> [3];
(isEven,[1]) -> [];
(isNonzero,[1,2,3]) -> [1,2,3];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else tl1
  
4.3215 false

(isEven,[1]) -> [];
(isNonzero,[3,0]) -> [3];
(isEven,[3]) -> [];
(isEven,[0,3,2]) -> [0,2];
(isEven,[0,3]) -> [0];
(isNonzero,[3]) -> [3];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
11.1009 true

(isNonzero,[2,2,1]) -> [2,2,1];
(isNonzero,[1,1,1]) -> [1,1,1];
(isNonzero,[3,3,0]) -> [3,3];
(isEven,[3,3,1]) -> [];
(isNonzero,[3,2,2]) -> [3,2,2];
(isEven,[0,3]) -> [0];
(isEven, []) -> [];

=================================
None
(isEven,[1,0]) -> [0];
(isEven,[0,3]) -> [0];
(isNonzero,[3,1]) -> [3,1];
(isEven,[3]) -> [];
(isEven,[1,3,1]) -> [];
(isNonzero,[1,2]) -> [1,2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              ( Nil ) )
          else
            (f0
              ( x0, tl1 ))
    else x1
6.3112 false

(isEven,[2]) -> [2];
(isEven,[1,3]) -> [];
(isNonzero,[3,2,1]) -> [3,2,1];
(isNonzero,[2,1]) -> [2,1];
(isNonzero,[2]) -> [2];
(isEven,[3]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then x1
          else ( Nil )
    else x1
6.5732 false

(isEven,[0,0]) -> [0,0];
(isNonzero,[0]) -> [];
(isEven,[2]) -> [2];
(isEven,[0]) -> [0];
(isNonzero,[2]) -> [2];
(isNonzero,[1,1]) -> [1,1];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else tl1
  
6.9985 false

(isNonzero,[3,1,2]) -> [3,1,2];
(isEven,[3]) -> [];
(isEven,[2,3]) -> [2];
(isEven,[0,0,2]) -> [0,0,2];
(isEven,[2,2]) -> [2,2];
(isNonzero,[3,0]) -> [3];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else tl1
  
42.9803 false

(isNonzero,[2,3]) -> [2,3];
(isNonzero,[1]) -> [1];
(isNonzero,[3,3,0]) -> [3,3];
(isNonzero,[2]) -> [2];
(isEven,[1,1,3]) -> [];
(isEven,[3]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else ( Nil )
  
11.8747 false

(isEven,[3,2]) -> [2];
(isEven,[1,1,1]) -> [];
(isNonzero,[1]) -> [1];
(isNonzero,[3]) -> [3];
(isEven,[2]) -> [2];
(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then x1
          else
            (f0
              ( x0, tl1 ))
    else x1
1.3818 false

(isEven,[0,2,3]) -> [0,2];
(isEven,[1,1,1]) -> [];
(isEven,[0]) -> [0];
(isEven,[3,3,0]) -> [0];
(isNonzero,[0,2]) -> [2];
(isEven,[2,1]) -> [2];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
67.3839 true

(isEven,[0]) -> [0];
(isNonzero,[0,2]) -> [2];
(isEven,[2]) -> [2];
(isNonzero,[3,1]) -> [3,1];
(isEven,[0,1]) -> [0];
(isNonzero,[2,3,0]) -> [2,3];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
42.3916 true

(isEven,[2,3,3]) -> [2];
(isNonzero,[3,0,3]) -> [3,3];
(isNonzero,[1]) -> [1];
(isEven,[1,1]) -> [];
(isNonzero,[3]) -> [3];
(isEven,[2,3,1]) -> [2];
(isEven,[0,1,0]) -> [0,0];
(isEven, []) -> [];

=================================
None
(isEven,[1,3]) -> [];
(isNonzero,[0,1]) -> [1];
(isNonzero,[2]) -> [2];
(isEven,[2,3,0]) -> [2,0];
(isEven,[1,1,0]) -> [0];
(isNonzero,[0,1,1]) -> [1,1];
(isEven,[2,1,1]) -> [2];
(isEven, []) -> [];

=================================
None
(isNonzero,[2,3]) -> [2,3];
(isNonzero,[2,0]) -> [2];
(isEven,[3]) -> [];
(isEven,[2,1]) -> [2];
(isEven,[3,1,0]) -> [0];
(isNonzero,[0,3]) -> [3];
(isNonzero,[3]) -> [3];
(isEven, []) -> [];

=================================
None
(isEven,[3,2,1]) -> [2];
(isEven,[0,1,0]) -> [0,0];
(isNonzero,[1]) -> [1];
(isNonzero,[3]) -> [3];
(isNonzero,[3,0]) -> [3];
(isEven,[3,3]) -> [];
(isEven,[1,0,3]) -> [0];
(isEven, []) -> [];

=================================
None
(isEven,[3,0,2]) -> [0,2];
(isNonzero,[0]) -> [];
(isNonzero,[0,2,3]) -> [2,3];
(isEven,[1,0]) -> [0];
(isNonzero,[0,3,3]) -> [3,3];
(isEven,[1]) -> [];
(isNonzero,[1,3,1]) -> [1,3,1];
(isEven, []) -> [];

=================================
None
(isNonzero,[3]) -> [3];
(isEven,[0,3,3]) -> [0];
(isNonzero,[1,1,0]) -> [1,1];
(isNonzero,[1,2]) -> [1,2];
(isEven,[0,0]) -> [0,0];
(isEven,[3,0]) -> [0];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
None
(isNonzero,[2,0,3]) -> [2,3];
(isEven,[2,2]) -> [2,2];
(isEven,[0]) -> [0];
(isNonzero,[2]) -> [2];
(isEven,[2,2,3]) -> [2,2];
(isEven,[2,0,3]) -> [2,0];
(isEven,[1,1,0]) -> [0];
(isEven, []) -> [];

=================================
None
(isNonzero,[2,0,0]) -> [2];
(isNonzero,[0,0]) -> [];
(isNonzero,[3,0,1]) -> [3,1];
(isEven,[1]) -> [];
(isNonzero,[0]) -> [];
(isNonzero,[2,2,2]) -> [2,2,2];
(isNonzero,[1,2,3]) -> [1,2,3];
(isEven, []) -> [];

=================================
None
(isNonzero,[1,0]) -> [1];
(isNonzero,[1,1]) -> [1,1];
(isEven,[3,0]) -> [0];
(isEven,[1]) -> [];
(isNonzero,[1,2,3]) -> [1,2,3];
(isEven,[3,1]) -> [];
(isNonzero,[0,0,0]) -> [];
(isEven, []) -> [];

=================================
None
(isEven,[3,3]) -> [];
(isNonzero,[0]) -> [];
(isEven,[0]) -> [0];
(isEven,[1,3]) -> [];
(isEven,[1,1,2]) -> [2];
(isNonzero,[3]) -> [3];
(isEven,[3]) -> [];
(isEven, []) -> [];

=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
29.2448 true

(isNonzero,[0]) -> [];
(isEven,[0]) -> [0];
(isEven,[0,1,2]) -> [0,2];
(isEven,[2]) -> [2];
(isEven,[1,1]) -> [];
(isEven,[3,0]) -> [0];
(isNonzero,[3,1,3]) -> [3,1,3];
(isNonzero,[2,0,2]) -> [2,2];
(isEven, []) -> [];

=================================
None
(isNonzero,[1,1]) -> [1,1];
(isEven,[2,2,3]) -> [2,2];
(isEven,[3]) -> [];
(isNonzero,[0,1,3]) -> [1,3];
(isNonzero,[3,3]) -> [3,3];
(isEven,[1]) -> [];
(isNonzero,[0]) -> [];
(isEven,[1,2]) -> [2];
(isEven, []) -> [];

=================================
None
(isEven,[3,2]) -> [2];
(isNonzero,[2,0]) -> [2];
(isNonzero,[1,1,3]) -> [1,1,3];
(isNonzero,[0,0,1]) -> [1];
(isEven,[2,2,1]) -> [2,2];
(isEven,[0,0]) -> [0,0];
(isNonzero,[2]) -> [2];
(isEven,[2,2]) -> [2,2];
(isEven, []) -> [];

=================================
None
(isEven,[0,2,0]) -> [0,2,0];
(isNonzero,[1,3]) -> [1,3];
(isNonzero,[3,3]) -> [3,3];
(isEven,[1,1,2]) -> [2];
(isNonzero,[3]) -> [3];
(isEven,[2,3]) -> [2];
(isEven,[3]) -> [];
(isEven,[1,0,2]) -> [0,2];
(isEven, []) -> [];

=================================
None
(isNonzero,[3]) -> [3];
(isEven,[1,1]) -> [];
(isEven,[2,1,3]) -> [2];
(isEven,[0,2]) -> [0,2];
(isNonzero,[2,2,0]) -> [2,2];
(isEven,[0,2,3]) -> [0,2];
(isNonzero,[1]) -> [1];
(isNonzero,[3,3]) -> [3,3];
(isEven, []) -> [];

=================================
None
(isNonzero,[0,0,2]) -> [2];
(isNonzero,[3,2]) -> [3,2];
(isEven,[0,3]) -> [0];
(isEven,[1,0]) -> [0];
(isEven,[1,1,1]) -> [];
(isEven,[3]) -> [];
(isNonzero,[1,2,1]) -> [1,2,1];
(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
None
(isNonzero,[1]) -> [1];
(isEven,[3,1]) -> [];
(isEven,[1,1,1]) -> [];
(isNonzero,[3,0,1]) -> [3,1];
(isEven,[3]) -> [];
(isEven,[0,3,3]) -> [0];
(isEven,[2]) -> [2];
(isEven,[0,1,1]) -> [0];
(isEven, []) -> [];

=================================
None
(isEven,[0,1]) -> [0];
(isEven,[3,0,0]) -> [0,0];
(isNonzero,[3,1]) -> [3,1];
(isEven,[3]) -> [];
(isNonzero,[2,3]) -> [2,3];
(isNonzero,[3,2]) -> [3,2];
(isEven,[1,0,2]) -> [0,2];
(isNonzero,[1,2]) -> [1,2];
(isEven, []) -> [];

=================================
None
(isNonzero,[1,3]) -> [1,3];
(isEven,[3,1]) -> [];
(isNonzero,[1,2]) -> [1,2];
(isEven,[2]) -> [2];
(isNonzero,[2]) -> [2];
(isNonzero,[1]) -> [1];
(isEven,[2,3]) -> [2];
(isEven,[3,1,1]) -> [];
(isEven, []) -> [];

=================================
None
(isNonzero,[0]) -> [];
(isNonzero,[3]) -> [3];
(isNonzero,[3,0,3]) -> [3,3];
(isEven,[3,2]) -> [2];
(isNonzero,[3,0,2]) -> [3,2];
(isNonzero,[1,3,1]) -> [1,3,1];
(isNonzero,[1,2]) -> [1,2];
(isEven,[3,0,0]) -> [0,0];
(isEven, []) -> [];

=================================
None
(isEven,[2,2]) -> [2,2];
(isNonzero,[3,0]) -> [3];
(isEven,[1,1,0]) -> [0];
(isNonzero,[3]) -> [3];
(isNonzero,[3,0,1]) -> [3,1];
(isNonzero,[3,1,0]) -> [3,1];
(isNonzero,[2,1]) -> [2,1];
(isEven,[1]) -> [];
(isEven,[1,2,3]) -> [2];
(isEven, []) -> [];

=================================
None
(isNonzero,[1,3]) -> [1,3];
(isEven,[0]) -> [0];
(isEven,[1]) -> [];
(isNonzero,[2,0,3]) -> [2,3];
(isEven,[1,0]) -> [0];
(isNonzero,[2]) -> [2];
(isNonzero,[2,2]) -> [2,2];
(isNonzero,[3,1]) -> [3,1];
(isEven,[3,0]) -> [0];
(isEven, []) -> [];

=================================
None
(isNonzero,[1,3,0]) -> [1,3];
(isEven,[2]) -> [2];
(isEven,[3]) -> [];
(isEven,[1,1]) -> [];
(isEven,[0,1]) -> [0];
(isNonzero,[3,2,2]) -> [3,2,2];
(isEven,[0]) -> [0];
(isNonzero,[1,3]) -> [1,3];
(isEven,[0,0,0]) -> [0,0,0];
(isEven, []) -> [];

=================================
None
(isNonzero,[2,1]) -> [2,1];
(isNonzero,[0,0,1]) -> [1];
(isEven,[2]) -> [2];
(isNonzero,[1]) -> [1];
(isNonzero,[1,0,2]) -> [1,2];
(isNonzero,[0,2]) -> [2];
(isEven,[3]) -> [];
(isNonzero,[3,3,1]) -> [3,3,1];
(isEven,[0,2,3]) -> [0,2];
(isEven, []) -> [];

=================================
None
(isNonzero,[3,1]) -> [3,1];
(isEven,[3,3,0]) -> [0];
(isNonzero,[2,1,3]) -> [2,1,3];
(isEven,[2,3,0]) -> [2,0];
(isNonzero,[3]) -> [3];
(isEven,[1,3,1]) -> [];
(isEven,[1,2,0]) -> [2,0];
(isNonzero,[0,0]) -> [];
(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
None
(isEven,[0,0]) -> [0,0];
(isEven,[0,3,1]) -> [0];
(isNonzero,[2,2]) -> [2,2];
(isEven,[0,2]) -> [0,2];
(isNonzero,[1,0,3]) -> [1,3];
(isEven,[2,2]) -> [2,2];
(isEven,[1,3,2]) -> [2];
(isEven,[2,1]) -> [2];
(isEven,[1,2,2]) -> [2,2];
(isEven, []) -> [];

=================================
None
(isEven,[3]) -> [];
(isEven,[3,2]) -> [2];
(isNonzero,[2]) -> [2];
(isEven,[2,1]) -> [2];
(isEven,[0]) -> [0];
(isEven,[0,0]) -> [0,0];
(isEven,[2,3,2]) -> [2,2];
(isEven,[0,0,3]) -> [0,0];
(isNonzero,[2,3]) -> [2,3];
(isEven, []) -> [];

=================================
None
(isNonzero,[3]) -> [3];
(isEven,[2,0,3]) -> [2,0];
(isNonzero,[0,3]) -> [3];
(isNonzero,[0,2,1]) -> [2,1];
(isEven,[3,0]) -> [0];
(isEven,[1,3,1]) -> [];
(isNonzero,[1,3]) -> [1,3];
(isEven,[3]) -> [];
(isNonzero,[2]) -> [2];
(isEven, []) -> [];

=================================
None
(isEven,[2]) -> [2];
(isNonzero,[1]) -> [1];
(isEven,[1,1]) -> [];
(isNonzero,[2,2]) -> [2,2];
(isNonzero,[1,3,0]) -> [1,3];
(isNonzero,[0,0]) -> [];
(isEven,[0,0]) -> [0,0];
(isEven,[0,1,3]) -> [0];
(isNonzero,[3,2,0]) -> [3,2];
(isEven, []) -> [];

=================================
None
(isEven,[2,0]) -> [2,0];
(isEven,[3,3]) -> [];
(isNonzero,[1]) -> [1];
(isEven,[1]) -> [];
(isNonzero,[1,2]) -> [1,2];
(isNonzero,[1,1]) -> [1,1];
(isNonzero,[0]) -> [];
(isEven,[3]) -> [];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
None
(isEven,[3,2,2]) -> [2,2];
(isNonzero,[1,1]) -> [1,1];
(isEven,[3,2,3]) -> [2];
(isEven,[2,1,2]) -> [2,2];
(isEven,[2]) -> [2];
(isNonzero,[2]) -> [2];
(isNonzero,[1]) -> [1];
(isNonzero,[0,0,1]) -> [1];
(isEven,[1]) -> [];
(isEven,[0,0,1]) -> [0,0];
(isEven, []) -> [];

=================================
None
(isNonzero,[0,2,1]) -> [2,1];
(isNonzero,[3,1]) -> [3,1];
(isEven,[0]) -> [0];
(isEven,[1,3,0]) -> [0];
(isNonzero,[3]) -> [3];
(isNonzero,[0,1,3]) -> [1,3];
(isEven,[2,0]) -> [2,0];
(isEven,[2,1,0]) -> [2,0];
(isNonzero,[3,2]) -> [3,2];
(isNonzero,[3,3,0]) -> [3,3];
(isEven, []) -> [];

=================================
None
(isNonzero,[1,3]) -> [1,3];
(isNonzero,[0]) -> [];
(isEven,[0,1]) -> [0];
(isNonzero,[1,2]) -> [1,2];
(isEven,[0]) -> [0];
(isNonzero,[3,2,3]) -> [3,2,3];
(isNonzero,[1]) -> [1];
(isEven,[2,3]) -> [2];
(isEven,[3]) -> [];
(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
None
(isEven,[2,1]) -> [2];
(isNonzero,[0,1,0]) -> [1];
(isNonzero,[3]) -> [3];
(isEven,[2,1,2]) -> [2,2];
(isNonzero,[1,3,3]) -> [1,3,3];
(isNonzero,[1]) -> [1];
(isEven,[0,0]) -> [0,0];
(isNonzero,[0,1,3]) -> [1,3];
(isEven,[3,0,1]) -> [0];
(isNonzero,[0,0]) -> [];
(isEven, []) -> [];

=================================
None
(isNonzero,[0]) -> [];
(isEven,[1,1,1]) -> [];
(isEven,[0]) -> [0];
(isEven,[2,3,3]) -> [2];
(isNonzero,[2,1,1]) -> [2,1,1];
(isEven,[2]) -> [2];
(isEven,[2,3]) -> [2];
(isNonzero,[3,2,3]) -> [3,2,3];
(isEven,[0,2]) -> [0,2];
(isEven,[3,2]) -> [2];
(isEven, []) -> [];

=================================
None
(isEven,[0]) -> [0];
(isEven,[1,0,2]) -> [0,2];
(isNonzero,[1,2,2]) -> [1,2,2];
(isNonzero,[0]) -> [];
(isNonzero,[3]) -> [3];
(isEven,[0,0,3]) -> [0,0];
(isNonzero,[2,1,0]) -> [2,1];
(isEven,[1]) -> [];
(isNonzero,[2,3]) -> [2,3];
(isEven,[2,2,3]) -> [2,2];
(isEven, []) -> [];

=================================
None
(isEven,[1,0,3]) -> [0];
(isNonzero,[2,3]) -> [2,3];
(isEven,[3,3]) -> [];
(isNonzero,[1]) -> [1];
(isEven,[0,2]) -> [0,2];
(isEven,[2,2,2]) -> [2,2,2];
(isEven,[2,0,1]) -> [2,0];
(isNonzero,[2]) -> [2];
(isNonzero,[1,0,3]) -> [1,3];
(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
None
(isEven,[0,2]) -> [0,2];
(isEven,[1,2,0]) -> [2,0];
(isNonzero,[0,1,3]) -> [1,3];
(isEven,[2]) -> [2];
(isEven,[1]) -> [];
(isEven,[3]) -> [];
(isEven,[1,0,0]) -> [0,0];
(isNonzero,[0,2]) -> [2];
(isNonzero,[1,0]) -> [1];
(isEven,[0,1]) -> [0];
(isEven, []) -> [];

=================================
None
(isEven,[3,0]) -> [0];
(isEven,[3,1]) -> [];
(isEven,[2,1]) -> [2];
(isEven,[2]) -> [2];
(isEven,[1,1]) -> [];
(isNonzero,[2,2,1]) -> [2,2,1];
(isEven,[0,3]) -> [0];
(isEven,[1,0,1]) -> [0];
(isNonzero,[0]) -> [];
(isNonzero,[0,0]) -> [];
(isEven, []) -> [];

=================================
None
(isEven,[1,1]) -> [];
(isNonzero,[3,0,2]) -> [3,2];
(isEven,[0,2,1]) -> [0,2];
(isNonzero,[3,3,2]) -> [3,3,2];
(isNonzero,[2,0,3]) -> [2,3];
(isEven,[0,1]) -> [0];
(isEven,[2,2]) -> [2,2];
(isNonzero,[2]) -> [2];
(isNonzero,[1,2]) -> [1,2];
(isNonzero,[3,3]) -> [3,3];
(isEven, []) -> [];

=================================
None
