([0],2) -> [0,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, Cons (x . 1, Nil))

0.0081 false

([0,2,3],2) -> [0,2,3,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0105 true

([1,0,3],1) -> [1,0,3,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0121 true

([3],3) -> [3,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) = fun (x:list * nat) -> Cons (x . 1, x . 0)

0.0029 false

([0,0,0],1) -> [0,0,0,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (0, f (Un_Cons (x . 0) . 1, x . 1))

0.0099 false

([3],3) -> [3,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) = fun (x:list * nat) -> Cons (x . 1, x . 0)

0.0025 false

([0,1,3],1) -> [0,1,3,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 1 with
      | O _ -> Cons (x . 1, x . 0)
      | S _ -> Cons (Un_S (x . 1),
                      Cons (x . 1, Cons (S (S (x . 1)), Cons (x . 1, Nil))))

0.0504 false

([2,0,3],2) -> [2,0,3,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0133 true

([3],3) -> [3,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) = fun (x:list * nat) -> Cons (x . 1, x . 0)

0.0027 false

([2,3],1) -> [2,3,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0108 true

([2,2],0) -> [2,2,0];
([0,3],2) -> [0,3,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0172 true

([0,2,1],2) -> [0,2,1,2];
([0],0) -> [0,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0171 true

([0],0) -> [0,0];
([0,0,1],0) -> [0,0,1,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0094 true

([1],0) -> [1,0];
([0],1) -> [0,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, Cons (x . 1, Nil))

0.0113 false

([2,1,0],1) -> [2,1,0,1];
([0,2,0],0) -> [0,2,0,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0164 true

([2],0) -> [2,0];
([1,3,0],0) -> [1,3,0,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0108 true

([3],1) -> [3,1];
([3,0],0) -> [3,0,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0188 true

([0,1],0) -> [0,1,0];
([3,0,2],0) -> [3,0,2,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0097 true

([3,0,1],3) -> [3,0,1,3];
([0,2],2) -> [0,2,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0247 true

([3],3) -> [3,3];
([1],2) -> [1,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, Cons (x . 1, Nil))

0.0194 false

([0,1],2) -> [0,1,2];
([3],2) -> [3,2];
([3,3],2) -> [3,3,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0235 true

([1],3) -> [1,3];
([1,1,0],2) -> [1,1,0,2];
([0],1) -> [0,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0237 true

([2,1,0],2) -> [2,1,0,2];
([2,2],1) -> [2,2,1];
([1,0],2) -> [1,0,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0277 true

([2,1,2],0) -> [2,1,2,0];
([3,0],1) -> [3,0,1];
([3,3],3) -> [3,3,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0276 true

([2,3],1) -> [2,3,1];
([1],2) -> [1,2];
([1,2],0) -> [1,2,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0223 true

([1,3,2],0) -> [1,3,2,0];
([1,3,0],0) -> [1,3,0,0];
([1],1) -> [1,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0216 true

([0],3) -> [0,3];
([2],2) -> [2,2];
([3],0) -> [3,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, Cons (x . 1, Nil))

0.0253 false

([0,2],1) -> [0,2,1];
([0],0) -> [0,0];
([2,3,2],1) -> [2,3,2,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0234 true

([0,3,2],1) -> [0,3,2,1];
([0,1],0) -> [0,1,0];
([1,1],3) -> [1,1,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0273 true

([3],2) -> [3,2];
([3,1,0],0) -> [3,1,0,0];
([3],1) -> [3,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0255 true

([2,2],3) -> [2,2,3];
([1],1) -> [1,1];
([3],3) -> [3,3];
([0,0,2],1) -> [0,0,2,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0456 true

([3,3],2) -> [3,3,2];
([2],2) -> [2,2];
([1,1,2],0) -> [1,1,2,0];
([3,3,0],1) -> [3,3,0,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0332 true

([3],2) -> [3,2];
([2],0) -> [2,0];
([3,2],3) -> [3,2,3];
([0,0,1],2) -> [0,0,1,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0319 true

([0,0,1],3) -> [0,0,1,3];
([1],1) -> [1,1];
([1],3) -> [1,3];
([3,1],0) -> [3,1,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0304 true

([0,3],1) -> [0,3,1];
([3],3) -> [3,3];
([0],3) -> [0,3];
([1,1],2) -> [1,1,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0337 true

([2,1],3) -> [2,1,3];
([3],3) -> [3,3];
([2],2) -> [2,2];
([3],0) -> [3,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0338 true

([0,3,1],0) -> [0,3,1,0];
([1,1],3) -> [1,1,3];
([0,2,2],0) -> [0,2,2,0];
([0],2) -> [0,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0285 true

([2,0,3],1) -> [2,0,3,1];
([2,0,1],0) -> [2,0,1,0];
([3],1) -> [3,1];
([0],1) -> [0,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0293 true

([0,3,1],1) -> [0,3,1,1];
([3,0,2],2) -> [3,0,2,2];
([1,0],0) -> [1,0,0];
([1,3],0) -> [1,3,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0317 true

([2,3],3) -> [2,3,3];
([2],3) -> [2,3];
([0],0) -> [0,0];
([3,2],2) -> [3,2,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0319 true

([3,0,0],1) -> [3,0,0,1];
([1],1) -> [1,1];
([0],2) -> [0,2];
([1],0) -> [1,0];
([3],0) -> [3,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0309 true

([2,0,3],3) -> [2,0,3,3];
([1,0],0) -> [1,0,0];
([2],0) -> [2,0];
([1,3],1) -> [1,3,1];
([2],2) -> [2,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0380 true

([0,2],0) -> [0,2,0];
([3,1,0],3) -> [3,1,0,3];
([1,0,1],2) -> [1,0,1,2];
([0],3) -> [0,3];
([1],2) -> [1,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0358 true

([0,3],2) -> [0,3,2];
([2,1],0) -> [2,1,0];
([0,2],0) -> [0,2,0];
([0,3],0) -> [0,3,0];
([2],3) -> [2,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0323 true

([1],1) -> [1,1];
([1,2],0) -> [1,2,0];
([0,1,1],2) -> [0,1,1,2];
([0],2) -> [0,2];
([2,1],1) -> [2,1,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0333 true

([0,0],3) -> [0,0,3];
([1],3) -> [1,3];
([2,1,3],3) -> [2,1,3,3];
([1],2) -> [1,2];
([3,0,0],2) -> [3,0,0,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0470 true

([0,3],2) -> [0,3,2];
([0,3,3],0) -> [0,3,3,0];
([2,2,3],3) -> [2,2,3,3];
([1,1,3],2) -> [1,1,3,2];
([1,3],3) -> [1,3,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0417 true

([2,0,0],2) -> [2,0,0,2];
([3,3,1],3) -> [3,3,1,3];
([0],1) -> [0,1];
([3,2,1],0) -> [3,2,1,0];
([3],0) -> [3,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0431 true

([2],2) -> [2,2];
([2],3) -> [2,3];
([1,1,3],3) -> [1,1,3,3];
([1,0,1],0) -> [1,0,1,0];
([2,3,3],2) -> [2,3,3,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0442 true

([3],2) -> [3,2];
([1],1) -> [1,1];
([2,1],3) -> [2,1,3];
([0,0,1],0) -> [0,0,1,0];
([1,2],0) -> [1,2,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0360 true

([0,3],2) -> [0,3,2];
([2],3) -> [2,3];
([2,3,1],3) -> [2,3,1,3];
([0],2) -> [0,2];
([3,1,0],1) -> [3,1,0,1];
([3],1) -> [3,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0490 true

([2,2,0],1) -> [2,2,0,1];
([1,3,0],0) -> [1,3,0,0];
([2,1],2) -> [2,1,2];
([1,1,3],0) -> [1,1,3,0];
([2],0) -> [2,0];
([0],1) -> [0,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0466 true

([1,0,2],2) -> [1,0,2,2];
([2,0],3) -> [2,0,3];
([1],2) -> [1,2];
([2],2) -> [2,2];
([2,1,0],0) -> [2,1,0,0];
([0],1) -> [0,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0494 true

([2,1,2],3) -> [2,1,2,3];
([0],0) -> [0,0];
([2,3,1],0) -> [2,3,1,0];
([1,0],3) -> [1,0,3];
([2,0,3],0) -> [2,0,3,0];
([1,1],1) -> [1,1,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0500 true

([2,1],0) -> [2,1,0];
([0],0) -> [0,0];
([1,3],1) -> [1,3,1];
([2],1) -> [2,1];
([2],2) -> [2,2];
([2],3) -> [2,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0436 true

([3,2],3) -> [3,2,3];
([0,1],3) -> [0,1,3];
([0,0,2],1) -> [0,0,2,1];
([1,0],0) -> [1,0,0];
([2],1) -> [2,1];
([3,3],1) -> [3,3,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0455 true

([0,1,3],1) -> [0,1,3,1];
([3,2,0],0) -> [3,2,0,0];
([1],0) -> [1,0];
([0,2],1) -> [0,2,1];
([2,3],1) -> [2,3,1];
([1,0],1) -> [1,0,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0380 true

([3,2],3) -> [3,2,3];
([2],2) -> [2,2];
([3,1],2) -> [3,1,2];
([1],1) -> [1,1];
([2],3) -> [2,3];
([1],0) -> [1,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0486 true

([2,1,2],0) -> [2,1,2,0];
([2,2],3) -> [2,2,3];
([1,0,0],2) -> [1,0,0,2];
([0],2) -> [0,2];
([0],0) -> [0,0];
([3],3) -> [3,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0501 true

([1],0) -> [1,0];
([1],3) -> [1,3];
([3],2) -> [3,2];
([1,0],2) -> [1,0,2];
([1,1],2) -> [1,1,2];
([3,0,2],0) -> [3,0,2,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0422 true

([1,1],3) -> [1,1,3];
([2],1) -> [2,1];
([3,3,2],0) -> [3,3,2,0];
([0],0) -> [0,0];
([0,1,3],0) -> [0,1,3,0];
([1,3,3],0) -> [1,3,3,0];
([3,3,0],3) -> [3,3,0,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0577 true

([1],1) -> [1,1];
([2],1) -> [2,1];
([3,3,0],2) -> [3,3,0,2];
([1],0) -> [1,0];
([0,1],3) -> [0,1,3];
([1,3,2],3) -> [1,3,2,3];
([3,3],3) -> [3,3,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0624 true

([2],2) -> [2,2];
([3],3) -> [3,3];
([2],1) -> [2,1];
([1],1) -> [1,1];
([2,3],0) -> [2,3,0];
([3,0,3],3) -> [3,0,3,3];
([0,0],3) -> [0,0,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0572 true

([0,3],2) -> [0,3,2];
([3],3) -> [3,3];
([1],2) -> [1,2];
([3,3,1],0) -> [3,3,1,0];
([3,3,3],2) -> [3,3,3,2];
([2,3,0],1) -> [2,3,0,1];
([3],0) -> [3,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0616 true

([3,3],3) -> [3,3,3];
([1,2],0) -> [1,2,0];
([0,1],1) -> [0,1,1];
([3,1],2) -> [3,1,2];
([0],0) -> [0,0];
([3,1,2],0) -> [3,1,2,0];
([0,0,3],1) -> [0,0,3,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0641 true

([1,1],0) -> [1,1,0];
([3,1],2) -> [3,1,2];
([3],3) -> [3,3];
([0],0) -> [0,0];
([2],2) -> [2,2];
([2,0,1],0) -> [2,0,1,0];
([1,0,1],3) -> [1,0,1,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0671 true

([3,1,1],3) -> [3,1,1,3];
([0],2) -> [0,2];
([1],2) -> [1,2];
([2],2) -> [2,2];
([3,3,0],3) -> [3,3,0,3];
([1,0,0],3) -> [1,0,0,3];
([3,1],0) -> [3,1,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0602 true

([3,1],1) -> [3,1,1];
([2,2],2) -> [2,2,2];
([3,2,0],0) -> [3,2,0,0];
([0,0,3],1) -> [0,0,3,1];
([2],2) -> [2,2];
([2,3],2) -> [2,3,2];
([3,3],1) -> [3,3,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0686 true

([2,0,2],2) -> [2,0,2,2];
([0,2,1],2) -> [0,2,1,2];
([2],1) -> [2,1];
([1],1) -> [1,1];
([0,0],1) -> [0,0,1];
([0,1],1) -> [0,1,1];
([2,0,1],0) -> [2,0,1,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0525 true

([0,1],0) -> [0,1,0];
([0,1,0],0) -> [0,1,0,0];
([1],0) -> [1,0];
([1,3],0) -> [1,3,0];
([1,2],0) -> [1,2,0];
([2,1],3) -> [2,1,3];
([3,0,3],0) -> [3,0,3,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0552 true

([0,2,0],1) -> [0,2,0,1];
([2,3],0) -> [2,3,0];
([3,2],2) -> [3,2,2];
([3],1) -> [3,1];
([2,3],1) -> [2,3,1];
([0,0],1) -> [0,0,1];
([0,1,0],3) -> [0,1,0,3];
([0,2,0],0) -> [0,2,0,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0713 true

([1,3],3) -> [1,3,3];
([2,1,0],0) -> [2,1,0,0];
([1],2) -> [1,2];
([2],1) -> [2,1];
([1],3) -> [1,3];
([2],3) -> [2,3];
([3,1],2) -> [3,1,2];
([2,2],2) -> [2,2,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0644 true

([0,0],2) -> [0,0,2];
([2],2) -> [2,2];
([1],3) -> [1,3];
([0,1],0) -> [0,1,0];
([3],2) -> [3,2];
([3,3],1) -> [3,3,1];
([2,2],1) -> [2,2,1];
([1],0) -> [1,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0573 true

([2],0) -> [2,0];
([1,3],0) -> [1,3,0];
([3],0) -> [3,0];
([3,3,2],1) -> [3,3,2,1];
([1,2,2],3) -> [1,2,2,3];
([1],3) -> [1,3];
([2,2,2],2) -> [2,2,2,2];
([2,3,3],3) -> [2,3,3,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0736 true

([2],0) -> [2,0];
([0,3,1],1) -> [0,3,1,1];
([3],2) -> [3,2];
([3,0,3],3) -> [3,0,3,3];
([0,3],1) -> [0,3,1];
([0],3) -> [0,3];
([3,0,0],1) -> [3,0,0,1];
([2,3,2],0) -> [2,3,2,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0672 true

([3,1,3],2) -> [3,1,3,2];
([1,0],2) -> [1,0,2];
([2,3,3],3) -> [2,3,3,3];
([1],0) -> [1,0];
([1,0,1],3) -> [1,0,1,3];
([1,3,3],3) -> [1,3,3,3];
([0],3) -> [0,3];
([2,0],1) -> [2,0,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0723 true

([0,0,3],1) -> [0,0,3,1];
([1,3,1],0) -> [1,3,1,0];
([3,1,0],2) -> [3,1,0,2];
([1],3) -> [1,3];
([1,0,1],2) -> [1,0,1,2];
([0,1,3],2) -> [0,1,3,2];
([1],0) -> [1,0];
([2,1,0],2) -> [2,1,0,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0722 true

([1,1,3],0) -> [1,1,3,0];
([0,1,3],2) -> [0,1,3,2];
([3,0,1],1) -> [3,0,1,1];
([3,3,0],1) -> [3,3,0,1];
([0,0],2) -> [0,0,2];
([3],0) -> [3,0];
([2,3,0],2) -> [2,3,0,2];
([2,0],3) -> [2,0,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0729 true

([3,2,1],1) -> [3,2,1,1];
([2,2],1) -> [2,2,1];
([3,2,1],3) -> [3,2,1,3];
([1,3,3],3) -> [1,3,3,3];
([0],1) -> [0,1];
([3],0) -> [3,0];
([0,0,2],1) -> [0,0,2,1];
([3],1) -> [3,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0717 true

([3],0) -> [3,0];
([1,1],3) -> [1,1,3];
([2,3,2],3) -> [2,3,2,3];
([0],0) -> [0,0];
([0,0],2) -> [0,0,2];
([3,3],3) -> [3,3,3];
([3,2],3) -> [3,2,3];
([0,1,1],0) -> [0,1,1,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0682 true

([0],0) -> [0,0];
([1],1) -> [1,1];
([2,3],3) -> [2,3,3];
([3],0) -> [3,0];
([2,3],2) -> [2,3,2];
([3],3) -> [3,3];
([2,1,0],1) -> [2,1,0,1];
([0],3) -> [0,3];
([3,1,1],0) -> [3,1,1,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0716 true

([0,0,1],3) -> [0,0,1,3];
([1],3) -> [1,3];
([2,0],3) -> [2,0,3];
([1,2,3],3) -> [1,2,3,3];
([1],2) -> [1,2];
([0],2) -> [0,2];
([2],1) -> [2,1];
([0,3,0],1) -> [0,3,0,1];
([1,2,1],0) -> [1,2,1,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0813 true

([2,0,2],2) -> [2,0,2,2];
([0,0,3],3) -> [0,0,3,3];
([0,0],3) -> [0,0,3];
([1,3],2) -> [1,3,2];
([0,3,3],3) -> [0,3,3,3];
([1,3],3) -> [1,3,3];
([3,2],0) -> [3,2,0];
([2],3) -> [2,3];
([0,2,2],3) -> [0,2,2,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0899 true

([2,0],1) -> [2,0,1];
([0,0,1],3) -> [0,0,1,3];
([0,2],1) -> [0,2,1];
([1,1,3],2) -> [1,1,3,2];
([2,0],2) -> [2,0,2];
([3,2],0) -> [3,2,0];
([0,0],2) -> [0,0,2];
([1],0) -> [1,0];
([2],0) -> [2,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0811 true

([1,2],3) -> [1,2,3];
([3,3,2],2) -> [3,3,2,2];
([3,2,3],1) -> [3,2,3,1];
([2],0) -> [2,0];
([0,0],3) -> [0,0,3];
([0],3) -> [0,3];
([0,2,3],3) -> [0,2,3,3];
([2,0],0) -> [2,0,0];
([1,2],2) -> [1,2,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0859 true

([2,2],1) -> [2,2,1];
([2,3],1) -> [2,3,1];
([3],2) -> [3,2];
([1],3) -> [1,3];
([1,0],1) -> [1,0,1];
([1,3,0],3) -> [1,3,0,3];
([0,3],0) -> [0,3,0];
([0],3) -> [0,3];
([2,1,2],0) -> [2,1,2,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0731 true

([2,3],1) -> [2,3,1];
([1,2],0) -> [1,2,0];
([0,1],1) -> [0,1,1];
([1,3],2) -> [1,3,2];
([1,0,3],3) -> [1,0,3,3];
([0,0],2) -> [0,0,2];
([1],2) -> [1,2];
([3],1) -> [3,1];
([3,0,1],2) -> [3,0,1,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0780 true

([0,1],1) -> [0,1,1];
([1,3],2) -> [1,3,2];
([1,2],2) -> [1,2,2];
([0],2) -> [0,2];
([3,1],0) -> [3,1,0];
([2,2,2],3) -> [2,2,2,3];
([3],2) -> [3,2];
([1],0) -> [1,0];
([3,1,1],0) -> [3,1,1,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0742 true

([1],2) -> [1,2];
([3,3],3) -> [3,3,3];
([2,2],3) -> [2,2,3];
([1],0) -> [1,0];
([2],3) -> [2,3];
([3,1,2],1) -> [3,1,2,1];
([1,3],1) -> [1,3,1];
([0,0,1],3) -> [0,0,1,3];
([2,1],3) -> [2,1,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0843 true

([1,0],0) -> [1,0,0];
([1],1) -> [1,1];
([3],2) -> [3,2];
([2,3],1) -> [2,3,1];
([1],0) -> [1,0];
([0,0],0) -> [0,0,0];
([2,1],2) -> [2,1,2];
([0,0],3) -> [0,0,3];
([3],1) -> [3,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0715 true

([1,0],2) -> [1,0,2];
([3,2],0) -> [3,2,0];
([0],1) -> [0,1];
([0,1],3) -> [0,1,3];
([3,2,2],2) -> [3,2,2,2];
([3,3],1) -> [3,3,1];
([2,0],1) -> [2,0,1];
([3],0) -> [3,0];
([2],1) -> [2,1];
([3,3,2],3) -> [3,3,2,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0906 true

([0,0,0],0) -> [0,0,0,0];
([0],0) -> [0,0];
([1,2,1],3) -> [1,2,1,3];
([0],1) -> [0,1];
([2,1],0) -> [2,1,0];
([1],2) -> [1,2];
([3,2],1) -> [3,2,1];
([3,3],2) -> [3,3,2];
([0],2) -> [0,2];
([0,1,2],0) -> [0,1,2,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0814 true

([2,1,2],3) -> [2,1,2,3];
([2,2,1],1) -> [2,2,1,1];
([1,0],1) -> [1,0,1];
([0,0,0],0) -> [0,0,0,0];
([0],0) -> [0,0];
([0,0,1],0) -> [0,0,1,0];
([2,3,0],0) -> [2,3,0,0];
([1,2],0) -> [1,2,0];
([1,1,3],1) -> [1,1,3,1];
([1],1) -> [1,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0971 true

([3],1) -> [3,1];
([1],1) -> [1,1];
([2],2) -> [2,2];
([3],0) -> [3,0];
([1,0],3) -> [1,0,3];
([2,3],0) -> [2,3,0];
([3,0],2) -> [3,0,2];
([1,2,2],0) -> [1,2,2,0];
([3,3],0) -> [3,3,0];
([3,3],3) -> [3,3,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0877 true

([3,2],0) -> [3,2,0];
([1,0,2],1) -> [1,0,2,1];
([2],0) -> [2,0];
([3,0,2],2) -> [3,0,2,2];
([3,2,2],3) -> [3,2,2,3];
([2,1,3],2) -> [2,1,3,2];
([3,1,2],0) -> [3,1,2,0];
([3,3],3) -> [3,3,3];
([0,1],0) -> [0,1,0];
([3,2],2) -> [3,2,2];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.1046 true

([3,1,0],0) -> [3,1,0,0];
([0,1],1) -> [0,1,1];
([0],0) -> [0,0];
([3],3) -> [3,3];
([1,2,2],3) -> [1,2,2,3];
([2],2) -> [2,2];
([3,2,1],0) -> [3,2,1,0];
([3,3,3],2) -> [3,3,3,2];
([2],3) -> [2,3];
([2,1,2],3) -> [2,1,2,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0970 true

([3],0) -> [3,0];
([1],3) -> [1,3];
([0,2,2],0) -> [0,2,2,0];
([3,0],0) -> [3,0,0];
([2,3,2],2) -> [2,3,2,2];
([1],1) -> [1,1];
([0],3) -> [0,3];
([0,2],2) -> [0,2,2];
([0],2) -> [0,2];
([2,1,0],0) -> [2,1,0,0];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0844 true

([0,0],2) -> [0,0,2];
([3,3,1],0) -> [3,3,1,0];
([2],1) -> [2,1];
([0,1,2],0) -> [0,1,2,0];
([0],0) -> [0,0];
([1],3) -> [1,3];
([0,1],3) -> [0,1,3];
([2,2],1) -> [2,2,1];
([0,1,2],1) -> [0,1,2,1];
([3,2,2],3) -> [3,2,2,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0872 true

([0,3],2) -> [0,3,2];
([3,3,2],1) -> [3,3,2,1];
([3,1],1) -> [3,1,1];
([1],2) -> [1,2];
([0,1,3],1) -> [0,1,3,1];
([0],2) -> [0,2];
([2,1],1) -> [2,1,1];
([0,2],2) -> [0,2,2];
([0,1,3],2) -> [0,1,3,2];
([2],1) -> [2,1];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0911 true

([3],1) -> [3,1];
([1],1) -> [1,1];
([3,1,3],3) -> [3,1,3,3];
([1],0) -> [1,0];
([3,3],3) -> [3,3,3];
([0,1,1],3) -> [0,1,1,3];
([2],0) -> [2,0];
([3,2],2) -> [3,2,2];
([0,2,2],1) -> [0,2,2,1];
([0,3,2],3) -> [0,3,2,3];
([], 0) -> [0];

=================================
fix (f : list * nat -> list) =
  fun (x:list * nat) ->
    match x . 0 with
      | Nil _ -> Cons (x . 1, x . 0)
      | Cons _ -> Cons (Un_Cons (x . 0) . 0, f (Un_Cons (x . 0) . 1, x . 1))

0.0983 true

