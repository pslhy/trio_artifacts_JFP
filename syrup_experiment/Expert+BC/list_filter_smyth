(isEven, [0]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.022205 false false

(isEven, [1]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0227339999999 false false

(isEven , [2]) -> [2];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.022048 false false

(isEven, [0, 0]) -> [0, 0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0220159999999 false false

(isEven, [0, 1]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0265240000001 false false

(isEven, [1, 0, 1]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.026431 false false

(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0211879999999 false false

(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0215760000001 false false

(isEven , [2]) -> [2];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            []

          S y2 -> 
            xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            fixListFilter (#2.2 y1)

          S y2 -> 
            xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0406860000001 false false

(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (0, fixListFilter (#2.2 y2)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.041504 false false

(isEven, [0]) -> [0];
(isEven, [0, 0]) -> [0, 0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0202839999999 false false

(isEven, [0]) -> [0];
(isEven, [0, 1]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.024535 false false

(isEven , [2]) -> [2];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0205169999999 false false

(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            xs

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          (case #2.2 y1 of
            Nil y2 -> 
              (#2.1 y1, fixListFilter (#2.2 y1))

            Cons y2 -> 
              (0, [])) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0438730000001 false false

(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0221570000001 false false

(isEven, [0, 0]) -> [0, 0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (0, #2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons
              ( 0
              , Cons (0, fixListFilter (#2.2 y1))
              ) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.041009 false false

(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0218179999999 false false

(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        xs

      Cons y1 -> 
        case fixListFilter (#2.2 y1) of
          Nil y2 -> 
            case isEven (#2.1 y1) of
              T y3 -> 
                [0]

              F y3 -> 
                []

          Cons y2 -> 
            Cons (0, #2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        xs

      Cons y1 -> 
        case fixListFilter (#2.2 y1) of
          Nil y2 -> 
            case isEven (#2.1 y1) of
              T y3 -> 
                [0]

              F y3 -> 
                []

          Cons y2 -> 
            Cons (0, #2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0921639999999 false false

(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [#2.1 y1] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0281379999999 false false

(isEven , [2]) -> [2];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            []

          S y2 -> 
            xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            fixListFilter (#2.2 y1)

          S y2 -> 
            xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.042152 false false

(isEven, [0]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.028206 false false

(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0839149999999 false false

(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.104112 false false

(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.023598 false false

(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0511980000001 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [#2.1 y1] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.026237 false false

(isEven, [1]) -> [];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (0, fixListFilter (#2.2 y1)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0412080000001 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        xs

      F y1 -> 
        [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (#2.1 y2, fixListFilter (#2.2 y2))

      F y1 -> 
        [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.068411 false false

(isEven, [0]) -> [0];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0620289999999 false false

(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0543720000001 false false

(isEven, [0]) -> [0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0]

      F y1 -> 
        [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0]

      F y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            fixListFilter (#2.2 y2) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.070968 false false

(isEven, [0]) -> [0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.026404 false false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0898870000001 false false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.088227 false false

(isEven, [0]) -> [0];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            [0]

          Cons y2 -> 
            case isEven (#2.1 y2) of
              T y3 -> 
                Cons (0, #2.2 y1)

              F y3 -> 
                [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            [0]

          Cons y2 -> 
            case isEven (#2.1 y2) of
              T y3 -> 
                Cons (0, fixListFilter (#2.2 y1))

              F y3 -> 
                [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
1.018627 false false

(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0464099999999 false false

(isEven, [0]) -> [0];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0782099999999 false false

(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.282717 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.042353 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [0]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [0]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0924419999999 false false

(isEven, [1]) -> [];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (0, fixListFilter (#2.2 y2)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0441760000001 false false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.104252 false false

(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.098489 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        xs

      F y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            xs

      F y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            fixListFilter (#2.2 y2) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0729140000001 false false

(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.097896 false false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.091801 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.097902 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0794639999999 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.102994 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.120572 true true

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.116262 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.111166 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.19163 false false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.100074 true true

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.114347 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0980979999999 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.045887 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0950270000001 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.10581 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.099465 true true

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.108296 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.118679 true true

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.102512 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.106347 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.146021 true true

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.115923 true true

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.123873 true true

