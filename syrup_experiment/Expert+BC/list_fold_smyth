(add, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (fixListFold (#2.2 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.175125 false false

(add, 0, [2, 1]) -> 3;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        3 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.193475 false false

(add, 0, [3, 2, 1]) -> 6;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        6 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (S (S (S (countOdd acc (fixListFold (#2.2 y1)))))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.19847 false false

(add, 1, []) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.168249 false false

(countOdd, 0, []) -> 0;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 0 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.162161 false false

(countOdd, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (fixListFold (#2.2 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.177593 false false

(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.179751 false false

(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        2 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (countOdd acc (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.190823 false false

(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (fixListFold (#2.2 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.227452 false false

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.357676 false false

(add, 1, []) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        2 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd acc (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.23034 false false

(add, 0, [1]) -> 1;
(countOdd, 0, []) -> 0;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (fixListFold (#2.2 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.203196 false false

(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        6 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (S (S (S (countOdd acc (fixListFold (#2.2 y1)))))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.238114 false false

(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        2 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (countOdd acc (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.257199 false false

(add, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.402652 false false

(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.243119 false false

(add, 0, [2, 1]) -> 3;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (f acc (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.27665 false false

(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.423381 false false

(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.433095 false false

(add, 0, [2, 1]) -> 3;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.671119 true true

(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        2 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd acc (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.340599 false false

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.77394 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.820585 true true

(add, 0, [1]) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.915345 false false

(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (f acc (S (#2.1 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (f acc (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.693632 false false

(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (fixListFold (#2.2 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.543579 false false

(add, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.470894 false false

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.033805 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.10756 false false

(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.800177 false false

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.878832 true true

(add, 0, [1]) -> 1;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.928081 false false

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.054683 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.778276 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.060101 true true

(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.463941 true true

(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.630375 true true

(add, 0, [1]) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.815602 false false

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.748525 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.050535 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.280676 true true

(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (f acc (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.699626 false false

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.54313 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.827014 true true

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.278686 true true

(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.713153 true true

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.735847 false false

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.288893 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.709952 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.040506 true true

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.003806 true true

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.76797 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.275029 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.384478 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.059481 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.741076 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.152877 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
3.785502 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.652188 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.773403 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
3.897645 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
4.260905 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.051105 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
3.166526 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.640545 true true

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.295631 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
4.884739 true true

