([2,3,0],[3]) -> [2,3,0,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.038231 true true

([1,0,3],[0,3,0]) -> [1,0,3,0,3,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0957249999999 true true

([3,3],[0,1]) -> [3,3,0,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (#2.1 y1, Cons (#2.1 y1, ys)) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0419260000001 false true

([0,2],[0,3]) -> [0,2,0,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (0, Cons (2, ys)) in list_append) : NatList -> NatList -> NatList)
0.049667 false false

([2],[0]) -> [2,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (#2.1 y1, ys) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , Cons (0, list_append (#2.2 y1) xs)
        ) in list_append) : NatList -> NatList -> NatList)
0.0458490000001 false false

([0],[0,0]) -> [0,0,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (0, Cons (0, xs)) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( 0
        , Cons
            ( 0
            , Cons (0, list_append (#2.2 y1) xs)
            )
        ) in list_append) : NatList -> NatList -> NatList)
0.0218649999999 false false

([2,2],[2,0,1]) -> [2,2,2,0,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (#2.1 y1, Cons (#2.1 y1, ys)) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.122547 false true

([1,0],[3,0]) -> [1,0,3,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (#2.1 y1, Cons (0, ys)) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.025621 false true

([2],[2,2,1]) -> [2,2,2,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [2, #2.1 y1, #2.1 y1, 1] in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( 2
        , Cons
            ( #2.1 y1
            , Cons
                ( #2.1 y1
                , Cons (1, list_append (#2.2 y1) xs)
                )
            )
        ) in list_append) : NatList -> NatList -> NatList)
0.028926 false false

([1,2,0],[3]) -> [1,2,0,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.018955 true true

([0,0,0],[3,3]) -> [0,0,0,3,3];
([3],[0,3]) -> [3,0,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.032391 true true

([0,2],[3]) -> [0,2,3];
([2],[1,0,2]) -> [2,1,0,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0148730000001 true true

([0],[1]) -> [0,1];
([1],[1,2]) -> [1,1,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (#2.1 y1, ys) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0145199999999 false true

([0],[1,2]) -> [0,1,2];
([3],[3,3,1]) -> [3,3,3,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (#2.1 y1, ys) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.020544 false true

([2,0,3],[2,3]) -> [2,0,3,2,3];
([2,3,0],[2,1,2]) -> [2,3,0,2,1,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0247810000001 true true

([3],[1,1]) -> [3,1,1];
([0,3],[3]) -> [0,3,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0178289999999 true true

([0,0,0],[1,2]) -> [0,0,0,1,2];
([3,3,2],[0,3]) -> [3,3,2,0,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0174219999999 true true

([0,0],[0,2]) -> [0,0,0,2];
([3,1,3],[3]) -> [3,1,3,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.018008 true true

([1,0,3],[3,0]) -> [1,0,3,3,0];
([2,1,1],[0,0]) -> [2,1,1,0,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.033774 true true

([1,0],[0]) -> [1,0,0];
([1],[2,0,0]) -> [1,2,0,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.033991 true true

([2,3,0],[1]) -> [2,3,0,1];
([0,3,1],[3,3,0]) -> [0,3,1,3,3,0];
([3,1],[3,1,1]) -> [3,1,3,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0199359999999 true true

([2],[1]) -> [2,1];
([0,1],[3,1,1]) -> [0,1,3,1,1];
([3],[0,2,3]) -> [3,0,2,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0390729999999 true true

([2,0],[2]) -> [2,0,2];
([3],[3,1,2]) -> [3,3,1,2];
([3,3],[0,0]) -> [3,3,0,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.018321 true true

([0],[3,3,1]) -> [0,3,3,1];
([1],[3,3,0]) -> [1,3,3,0];
([2],[3,1]) -> [2,3,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (#2.1 y1, ys) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.032283 false true

([3,2,2],[3,3,3]) -> [3,2,2,3,3,3];
([2,1,1],[2]) -> [2,1,1,2];
([1,1],[1]) -> [1,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0466699999999 true true

([1],[1,2,0]) -> [1,1,2,0];
([0,3],[3]) -> [0,3,3];
([2],[0,2,1]) -> [2,0,2,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0404799999999 true true

([0,1],[3]) -> [0,1,3];
([3,1],[1,3,2]) -> [3,1,1,3,2];
([1,0,1],[1,3]) -> [1,0,1,1,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0674509999999 true true

([2],[1,1,1]) -> [2,1,1,1];
([0],[2]) -> [0,2];
([1,1,0],[1,2]) -> [1,1,0,1,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0566249999999 true true

([1,0,0],[2,3]) -> [1,0,0,2,3];
([3,0,1],[3,2]) -> [3,0,1,3,2];
([0,0],[0,1]) -> [0,0,0,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.081355 true true

([0,3],[1,2]) -> [0,3,1,2];
([1,3],[1,2,2]) -> [1,3,1,2,2];
([2,2,2],[3,1,0]) -> [2,2,2,3,1,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0427079999999 true true

([3],[1,0,2]) -> [3,1,0,2];
([2,0],[2,2,2]) -> [2,0,2,2,2];
([2],[2,3]) -> [2,2,3];
([3,3,2],[2,2]) -> [3,3,2,2,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.023586 true true

([0,2,0],[2,0,2]) -> [0,2,0,2,0,2];
([2],[0]) -> [2,0];
([1,1,1],[1]) -> [1,1,1,1];
([1,1,1],[3,1,1]) -> [1,1,1,3,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0281680000001 true true

([3],[0,1]) -> [3,0,1];
([3,1,1],[3]) -> [3,1,1,3];
([2],[0,0,2]) -> [2,0,0,2];
([0,3],[3,3]) -> [0,3,3,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00822900000003 true true

([2],[1,3,2]) -> [2,1,3,2];
([2],[1,0,2]) -> [2,1,0,2];
([1,2],[3,2,1]) -> [1,2,3,2,1];
([0,3,1],[0,1,3]) -> [0,3,1,0,1,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.012864 true true

([1,3,1],[1,3]) -> [1,3,1,1,3];
([1,2,2],[1,3,3]) -> [1,2,2,1,3,3];
([1,0],[0,0,3]) -> [1,0,0,0,3];
([1],[1,3,2]) -> [1,1,3,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.019998 true true

([3],[1,0]) -> [3,1,0];
([3,2,1],[1]) -> [3,2,1,1];
([0],[3]) -> [0,3];
([2,0,0],[1,2,1]) -> [2,0,0,1,2,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00849199999993 true true

([3],[3]) -> [3,3];
([3],[2]) -> [3,2];
([0],[3,2]) -> [0,3,2];
([2],[2]) -> [2,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (#2.1 y1, ys) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0081439999999 false true

([2],[1,2,3]) -> [2,1,2,3];
([1,3,2],[0,1,3]) -> [1,3,2,0,1,3];
([1,0,2],[2,3]) -> [1,0,2,2,3];
([3,1,0],[0]) -> [3,1,0,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.038818 true true

([3,1],[2,3]) -> [3,1,2,3];
([0],[0]) -> [0,0];
([1],[3,3]) -> [1,3,3];
([2,2,2],[1]) -> [2,2,2,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0689669999999 true true

([2],[0,0]) -> [2,0,0];
([3,0,0],[2,0,0]) -> [3,0,0,2,0,0];
([0],[3,1,3]) -> [0,3,1,3];
([3,0,3],[0,0]) -> [3,0,3,0,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0277020000001 true true

([2,3,2],[1]) -> [2,3,2,1];
([3],[3,1]) -> [3,3,1];
([1,2,1],[2,1,2]) -> [1,2,1,2,1,2];
([2],[3]) -> [2,3];
([0],[2,1]) -> [0,2,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00961400000006 true true

([3],[0,1]) -> [3,0,1];
([2,3],[3,0]) -> [2,3,3,0];
([2],[1]) -> [2,1];
([1],[0]) -> [1,0];
([2,2,1],[3,2]) -> [2,2,1,3,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.00946900000008 true true

([3],[0]) -> [3,0];
([0,3],[1,0]) -> [0,3,1,0];
([2,2],[0]) -> [2,2,0];
([0,2],[0,0]) -> [0,2,0,0];
([3],[3,1,2]) -> [3,3,1,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.010708 true true

([1,1],[3]) -> [1,1,3];
([2],[1,0]) -> [2,1,0];
([2,0,2],[2,3]) -> [2,0,2,2,3];
([2,0,3],[2,0,0]) -> [2,0,3,2,0,0];
([0,2,1],[3,1,1]) -> [0,2,1,3,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0298680000001 true true

([3],[3,1]) -> [3,3,1];
([0],[1,1]) -> [0,1,1];
([3,3,3],[1,0]) -> [3,3,3,1,0];
([3,3,1],[1]) -> [3,3,1,1];
([2,3,3],[3,2]) -> [2,3,3,3,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0500400000001 true true

([3,3],[0]) -> [3,3,0];
([1,0],[3,3,3]) -> [1,0,3,3,3];
([0],[1]) -> [0,1];
([3,2],[1,3]) -> [3,2,1,3];
([2],[1,1,1]) -> [2,1,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.026339 true true

([3],[2,2,2]) -> [3,2,2,2];
([0],[0]) -> [0,0];
([1,2],[2,3,1]) -> [1,2,2,3,1];
([0],[1]) -> [0,1];
([0],[3]) -> [0,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0179820000001 true true

([0],[3,3]) -> [0,3,3];
([1,0],[2]) -> [1,0,2];
([0,2,3],[2,3]) -> [0,2,3,2,3];
([1,3],[2,2,0]) -> [1,3,2,2,0];
([3,3],[3,2,0]) -> [3,3,3,2,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0213229999999 true true

([1,0],[0,0]) -> [1,0,0,0];
([2],[1,3,0]) -> [2,1,3,0];
([2,2,1],[3]) -> [2,2,1,3];
([2],[2]) -> [2,2];
([1],[2,3,1]) -> [1,2,3,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0232100000001 true true

([2,0],[3]) -> [2,0,3];
([2],[3]) -> [2,3];
([2,0],[1,0,0]) -> [2,0,1,0,0];
([1,0,0],[2,2,0]) -> [1,0,0,2,2,0];
([3,1],[1]) -> [3,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.05924 true true

([0,0],[2,1,1]) -> [0,0,2,1,1];
([2,1],[3]) -> [2,1,3];
([0],[1]) -> [0,1];
([2],[1]) -> [2,1];
([2,3,2],[2,1,1]) -> [2,3,2,2,1,1];
([0,1,1],[0,2,3]) -> [0,1,1,0,2,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0407949999999 true true

([2],[0,2]) -> [2,0,2];
([3,0],[1,1,2]) -> [3,0,1,1,2];
([0,3,0],[1]) -> [0,3,0,1];
([3,1,0],[3,3,1]) -> [3,1,0,3,3,1];
([1],[0,1]) -> [1,0,1];
([2,2],[3]) -> [2,2,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0201239999999 true true

([1,3],[2,2]) -> [1,3,2,2];
([0,0],[2,3]) -> [0,0,2,3];
([1],[3,3]) -> [1,3,3];
([0,3],[3,2,2]) -> [0,3,3,2,2];
([2],[3]) -> [2,3];
([0],[0]) -> [0,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0980280000001 true true

([3,0],[1]) -> [3,0,1];
([1],[2,3]) -> [1,2,3];
([2],[1,3]) -> [2,1,3];
([1,2],[3,1,2]) -> [1,2,3,1,2];
([1,0],[0]) -> [1,0,0];
([0],[3]) -> [0,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.030399 true true

([0,0],[2,3,1]) -> [0,0,2,3,1];
([0,1,3],[0,3]) -> [0,1,3,0,3];
([2],[2,1,0]) -> [2,2,1,0];
([0,1],[2,2]) -> [0,1,2,2];
([1,3,0],[2,0]) -> [1,3,0,2,0];
([0,1,0],[1,2,2]) -> [0,1,0,1,2,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0260820000001 true true

([3,3,3],[1]) -> [3,3,3,1];
([2,1,3],[3,1,1]) -> [2,1,3,3,1,1];
([3,2],[0]) -> [3,2,0];
([0],[0,3]) -> [0,0,3];
([1],[0,1]) -> [1,0,1];
([3,1,0],[0]) -> [3,1,0,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.015715 true true

([1,1],[0]) -> [1,1,0];
([1],[3,2,3]) -> [1,3,2,3];
([0],[2,1,3]) -> [0,2,1,3];
([3,1],[1,3,3]) -> [3,1,1,3,3];
([1,2],[0,3]) -> [1,2,0,3];
([3],[1,2]) -> [3,1,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0234479999999 true true

([2],[2,0,0]) -> [2,2,0,0];
([0,1,2],[3,3,3]) -> [0,1,2,3,3,3];
([1,1],[1,3,3]) -> [1,1,1,3,3];
([2],[1,2]) -> [2,1,2];
([0],[3,1]) -> [0,3,1];
([1],[3]) -> [1,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0318830000001 true true

([2,1,3],[0,0,1]) -> [2,1,3,0,0,1];
([1,3],[0,2]) -> [1,3,0,2];
([3,2,0],[1,2]) -> [3,2,0,1,2];
([3,2,1],[3]) -> [3,2,1,3];
([0],[2,3]) -> [0,2,3];
([1,1],[1]) -> [1,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0548879999999 true true

([3,3,0],[0,2,0]) -> [3,3,0,0,2,0];
([0,3,0],[2,0,0]) -> [0,3,0,2,0,0];
([3],[1]) -> [3,1];
([0],[0]) -> [0,0];
([3,1,1],[3]) -> [3,1,1,3];
([0,3,3],[0,3,1]) -> [0,3,3,0,3,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0380640000001 true true

([2,2],[1,3]) -> [2,2,1,3];
([2,0,1],[1,3]) -> [2,0,1,1,3];
([2,3,2],[3,3,2]) -> [2,3,2,3,3,2];
([0,2],[1,0]) -> [0,2,1,0];
([2,2,3],[3,2,2]) -> [2,2,3,3,2,2];
([0,3],[0]) -> [0,3,0];
([2],[0,0]) -> [2,0,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0654549999999 true true

([2,2],[0]) -> [2,2,0];
([3,0],[3,3,2]) -> [3,0,3,3,2];
([2],[2,0,3]) -> [2,2,0,3];
([0,1,3],[1]) -> [0,1,3,1];
([0],[2,3,3]) -> [0,2,3,3];
([3,1],[0,3,3]) -> [3,1,0,3,3];
([0,1],[1,2,1]) -> [0,1,1,2,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.021201 true true

([0,3],[2,3,3]) -> [0,3,2,3,3];
([1,0],[0]) -> [1,0,0];
([3,0],[3,0,1]) -> [3,0,3,0,1];
([2,2],[0,1]) -> [2,2,0,1];
([1,1],[1,3]) -> [1,1,1,3];
([2,3,3],[3,3]) -> [2,3,3,3,3];
([0,2,1],[3,2,3]) -> [0,2,1,3,2,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.024347 true true

([0],[3]) -> [0,3];
([3,3,0],[3,3]) -> [3,3,0,3,3];
([3],[2]) -> [3,2];
([1],[1]) -> [1,1];
([1,0,2],[1,1]) -> [1,0,2,1,1];
([3],[0]) -> [3,0];
([1],[0]) -> [1,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0495069999999 true true

([0],[0]) -> [0,0];
([0,2,1],[2,2,1]) -> [0,2,1,2,2,1];
([1,3],[2,2,0]) -> [1,3,2,2,0];
([3,2,1],[0,0,0]) -> [3,2,1,0,0,0];
([3,0],[1]) -> [3,0,1];
([1],[1,1,1]) -> [1,1,1,1];
([1,0,1],[1,2]) -> [1,0,1,1,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.018149 true true

([3,1,2],[3,1,1]) -> [3,1,2,3,1,1];
([0,3,1],[0,2]) -> [0,3,1,0,2];
([3],[2]) -> [3,2];
([0],[3,0]) -> [0,3,0];
([2],[3]) -> [2,3];
([3,1,0],[1,2,0]) -> [3,1,0,1,2,0];
([3,2],[2]) -> [3,2,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.036785 true true

([1,3],[2,3,3]) -> [1,3,2,3,3];
([1],[3,2]) -> [1,3,2];
([2,2,1],[0,2]) -> [2,2,1,0,2];
([3],[0]) -> [3,0];
([3],[2]) -> [3,2];
([2],[3,3,3]) -> [2,3,3,3];
([0],[2]) -> [0,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0147529999999 true true

([1],[3,1,2]) -> [1,3,1,2];
([1,2,0],[0,3,1]) -> [1,2,0,0,3,1];
([3],[1,1,1]) -> [3,1,1,1];
([3,3],[0,3]) -> [3,3,0,3];
([2,2],[0,0,2]) -> [2,2,0,0,2];
([0,0,0],[0,3]) -> [0,0,0,0,3];
([1,2,3],[0,1,3]) -> [1,2,3,0,1,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.028726 true true

([3],[0,0,0]) -> [3,0,0,0];
([3],[2,3]) -> [3,2,3];
([1,2],[1,0]) -> [1,2,1,0];
([0,1,2],[0,2,3]) -> [0,1,2,0,2,3];
([2],[2]) -> [2,2];
([2,1],[3,0,2]) -> [2,1,3,0,2];
([2,0,3],[3,0]) -> [2,0,3,3,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0354930000001 true true

([0],[0,0]) -> [0,0,0];
([1,2],[2]) -> [1,2,2];
([3,2],[3]) -> [3,2,3];
([0,0,1],[2,1,0]) -> [0,0,1,2,1,0];
([1,3,3],[3,0,0]) -> [1,3,3,3,0,0];
([3],[3]) -> [3,3];
([3],[1]) -> [3,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0239959999999 true true

([2,2,1],[0,2,3]) -> [2,2,1,0,2,3];
([3,0,1],[0]) -> [3,0,1,0];
([2,1],[2]) -> [2,1,2];
([2,2,2],[2]) -> [2,2,2,2];
([3],[1]) -> [3,1];
([0],[3,1]) -> [0,3,1];
([0,0,1],[2]) -> [0,0,1,2];
([1,1],[1]) -> [1,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.039487 true true

([1,0],[2,0]) -> [1,0,2,0];
([1],[0,1,3]) -> [1,0,1,3];
([3,1],[1,0,0]) -> [3,1,1,0,0];
([3],[0,0,2]) -> [3,0,0,2];
([3],[3]) -> [3,3];
([0,1,2],[1,2,2]) -> [0,1,2,1,2,2];
([2,2,1],[2,0,2]) -> [2,2,1,2,0,2];
([0],[2,1]) -> [0,2,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.015936 true true

([1,2,2],[1,3,3]) -> [1,2,2,1,3,3];
([1,0,3],[2,2,3]) -> [1,0,3,2,2,3];
([0,3,0],[3,2,2]) -> [0,3,0,3,2,2];
([3,0,1],[1,2,3]) -> [3,0,1,1,2,3];
([3,1],[2,2]) -> [3,1,2,2];
([2],[2,0,0]) -> [2,2,0,0];
([2,2],[3]) -> [2,2,3];
([1,1,1],[0,1,2]) -> [1,1,1,0,1,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.017556 true true

([2],[2,3,2]) -> [2,2,3,2];
([2],[1,0]) -> [2,1,0];
([3,1,2],[0,3,3]) -> [3,1,2,0,3,3];
([3,3,2],[1,0]) -> [3,3,2,1,0];
([0,0],[0,0]) -> [0,0,0,0];
([1],[2,0,2]) -> [1,2,0,2];
([2,1,0],[3,2,1]) -> [2,1,0,3,2,1];
([2,3],[1]) -> [2,3,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0467149999999 true true

([2],[3,0,1]) -> [2,3,0,1];
([0,2],[1,3]) -> [0,2,1,3];
([3,1],[2]) -> [3,1,2];
([0,2],[3,3]) -> [0,2,3,3];
([1],[3]) -> [1,3];
([3,2],[2]) -> [3,2,2];
([2,1,2],[3,2,0]) -> [2,1,2,3,2,0];
([2],[0]) -> [2,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0963320000001 true true

([0,2,1],[3,1]) -> [0,2,1,3,1];
([0,0],[2]) -> [0,0,2];
([1,2],[3]) -> [1,2,3];
([1,2,3],[1,2]) -> [1,2,3,1,2];
([0],[0,0,3]) -> [0,0,0,3];
([1,2,2],[2]) -> [1,2,2,2];
([1],[3]) -> [1,3];
([2],[0,2]) -> [2,0,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0244929999999 true true

([0],[2]) -> [0,2];
([2],[1]) -> [2,1];
([2,2],[0,3,0]) -> [2,2,0,3,0];
([1,3,2],[2,2,1]) -> [1,3,2,2,2,1];
([3,0,0],[1]) -> [3,0,0,1];
([2,2],[0]) -> [2,2,0];
([2],[1,3]) -> [2,1,3];
([0,1],[2,1]) -> [0,1,2,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0174259999999 true true

([2],[0,0,3]) -> [2,0,0,3];
([3,1],[2]) -> [3,1,2];
([0,2],[3,2,2]) -> [0,2,3,2,2];
([1,3,1],[1]) -> [1,3,1,1];
([2,3],[1,0]) -> [2,3,1,0];
([3],[0,3]) -> [3,0,3];
([3,0,2],[1,3]) -> [3,0,2,1,3];
([2,2,0],[1,1,3]) -> [2,2,0,1,1,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.039745 true true

([1],[2,2,3]) -> [1,2,2,3];
([0,2,1],[1]) -> [0,2,1,1];
([0],[2,0,0]) -> [0,2,0,0];
([1],[3,3]) -> [1,3,3];
([1,3],[0,1]) -> [1,3,0,1];
([3,1],[1]) -> [3,1,1];
([1],[2,0]) -> [1,2,0];
([3,3,2],[2,3]) -> [3,3,2,2,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0438899999999 true true

([0],[1,2]) -> [0,1,2];
([3],[3,3,2]) -> [3,3,3,2];
([1,2,3],[3]) -> [1,2,3,3];
([2],[1,1,3]) -> [2,1,1,3];
([0,0,2],[3]) -> [0,0,2,3];
([3],[0]) -> [3,0];
([2],[1,2]) -> [2,1,2];
([3,2],[1,1]) -> [3,2,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0192730000001 true true

([2,1,2],[0]) -> [2,1,2,0];
([1],[0]) -> [1,0];
([3,2,0],[1]) -> [3,2,0,1];
([3,1],[3,0]) -> [3,1,3,0];
([2],[2,2]) -> [2,2,2];
([0],[1,0]) -> [0,1,0];
([1,1,3],[2,3,3]) -> [1,1,3,2,3,3];
([1,0],[3,2,3]) -> [1,0,3,2,3];
([0,1,3],[3]) -> [0,1,3,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.040491 true true

([2,0,3],[3]) -> [2,0,3,3];
([1,3],[3,1,3]) -> [1,3,3,1,3];
([2],[2,0]) -> [2,2,0];
([1,1,1],[2,1]) -> [1,1,1,2,1];
([1,2],[1,0,3]) -> [1,2,1,0,3];
([3,0,0],[0]) -> [3,0,0,0];
([2,2],[0,3,3]) -> [2,2,0,3,3];
([3,2],[1,1]) -> [3,2,1,1];
([1,1],[0,2]) -> [1,1,0,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.048016 true true

([1,1],[2,3,3]) -> [1,1,2,3,3];
([3,0,2],[2,3,2]) -> [3,0,2,2,3,2];
([2,2],[0,3]) -> [2,2,0,3];
([2,2,3],[2]) -> [2,2,3,2];
([0],[0,0,3]) -> [0,0,0,3];
([0],[1,3]) -> [0,1,3];
([3,3],[2,1]) -> [3,3,2,1];
([3],[3,0,2]) -> [3,3,0,2];
([2,1],[3,1]) -> [2,1,3,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.040499 true true

([0,2],[1,2,0]) -> [0,2,1,2,0];
([2,2,3],[3,2]) -> [2,2,3,3,2];
([3,1],[3]) -> [3,1,3];
([3,3,1],[3,0]) -> [3,3,1,3,0];
([3],[0,2]) -> [3,0,2];
([1,1,3],[0]) -> [1,1,3,0];
([1,3],[3,2]) -> [1,3,3,2];
([3,3],[3]) -> [3,3,3];
([2,0,1],[0,1]) -> [2,0,1,0,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.031483 true true

([0,3],[3]) -> [0,3,3];
([2,3,2],[3,3]) -> [2,3,2,3,3];
([0,3],[2]) -> [0,3,2];
([0,3],[0,1]) -> [0,3,0,1];
([1,0],[1]) -> [1,0,1];
([0],[3,2,1]) -> [0,3,2,1];
([1,1],[2,1]) -> [1,1,2,1];
([2],[1,3]) -> [2,1,3];
([0],[0]) -> [0,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.045308 true true

([3,0,0],[1,3,3]) -> [3,0,0,1,3,3];
([1,3],[3,1,1]) -> [1,3,3,1,1];
([0,3],[0,3]) -> [0,3,0,3];
([0,3,3],[1,1,3]) -> [0,3,3,1,1,3];
([2,0],[1,0,2]) -> [2,0,1,0,2];
([0],[2,1]) -> [0,2,1];
([2],[3,1]) -> [2,3,1];
([2,1],[0]) -> [2,1,0];
([3,2],[1,2]) -> [3,2,1,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.042911 true true

([1],[2,3]) -> [1,2,3];
([0,1],[3,1]) -> [0,1,3,1];
([1,2,2],[0]) -> [1,2,2,0];
([0,2,3],[0]) -> [0,2,3,0];
([0,3,2],[3]) -> [0,3,2,3];
([2],[2,1]) -> [2,2,1];
([3,0],[3]) -> [3,0,3];
([2],[1,3]) -> [2,1,3];
([2,1,1],[3,0,3]) -> [2,1,1,3,0,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.020168 true true

([0],[2,1,3]) -> [0,2,1,3];
([1],[1,1]) -> [1,1,1];
([3,0],[3,3]) -> [3,0,3,3];
([1],[1]) -> [1,1];
([3,3],[3,0]) -> [3,3,3,0];
([0,1,3],[2]) -> [0,1,3,2];
([1,2],[0,2]) -> [1,2,0,2];
([0],[0,0]) -> [0,0,0];
([1,1,3],[1,2,2]) -> [1,1,3,1,2,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0665570000001 true true

([1,3],[3]) -> [1,3,3];
([2,0,2],[3]) -> [2,0,2,3];
([2,2],[1]) -> [2,2,1];
([0,0,1],[3,1]) -> [0,0,1,3,1];
([3],[3,2,2]) -> [3,3,2,2];
([0,2,2],[1,3,1]) -> [0,2,2,1,3,1];
([0],[1]) -> [0,1];
([0,3,3],[2,3]) -> [0,3,3,2,3];
([3,3],[2,1,1]) -> [3,3,2,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0169550000001 true true

([1,1,0],[2,2]) -> [1,1,0,2,2];
([3],[0,3]) -> [3,0,3];
([3],[0,2]) -> [3,0,2];
([3,1,1],[3,3]) -> [3,1,1,3,3];
([0],[3,2,3]) -> [0,3,2,3];
([2,3,0],[0,1,1]) -> [2,3,0,0,1,1];
([2,3,3],[0,3,1]) -> [2,3,3,0,3,1];
([0],[1,1]) -> [0,1,1];
([1],[3,0]) -> [1,3,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0201500000001 true true

([3],[1]) -> [3,1];
([3,0,0],[2,1]) -> [3,0,0,2,1];
([0,2,0],[3,1,0]) -> [0,2,0,3,1,0];
([3,1,3],[0,2,1]) -> [3,1,3,0,2,1];
([3,0],[0]) -> [3,0,0];
([0,2,0],[0]) -> [0,2,0,0];
([3,3],[3,1,1]) -> [3,3,3,1,1];
([0,3,2],[2]) -> [0,3,2,2];
([0,1,3],[2,2]) -> [0,1,3,2,2];
([3],[0,3,0]) -> [3,0,3,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.036292 true true

([3,1,0],[0,2,1]) -> [3,1,0,0,2,1];
([0,1],[1,2,3]) -> [0,1,1,2,3];
([3,3,3],[0]) -> [3,3,3,0];
([2,1,2],[0]) -> [2,1,2,0];
([0],[2,1]) -> [0,2,1];
([2],[3]) -> [2,3];
([0,3,2],[3,2,3]) -> [0,3,2,3,2,3];
([0],[2]) -> [0,2];
([3,1],[0]) -> [3,1,0];
([3,2,0],[0,3]) -> [3,2,0,0,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0475730000001 true true

([3],[2,0,1]) -> [3,2,0,1];
([3,1,0],[3,1]) -> [3,1,0,3,1];
([0,2,0],[2]) -> [0,2,0,2];
([2],[2,0,3]) -> [2,2,0,3];
([2],[1,2,0]) -> [2,1,2,0];
([3,2],[3,1]) -> [3,2,3,1];
([3],[2]) -> [3,2];
([2],[2,3]) -> [2,2,3];
([2,3,3],[3]) -> [2,3,3,3];
([1,3],[2,2]) -> [1,3,2,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.057581 true true

([2,2],[1]) -> [2,2,1];
([3,3,3],[0,0,1]) -> [3,3,3,0,0,1];
([1,3],[0,3,3]) -> [1,3,0,3,3];
([1,1],[2,3]) -> [1,1,2,3];
([1,3],[0,2]) -> [1,3,0,2];
([1,2],[1]) -> [1,2,1];
([0],[1,2]) -> [0,1,2];
([1,0],[3]) -> [1,0,3];
([0],[2,1,0]) -> [0,2,1,0];
([0,3],[1,3,2]) -> [0,3,1,3,2];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0218400000001 true true

([0,2,3],[2,2,0]) -> [0,2,3,2,2,0];
([0,3],[0]) -> [0,3,0];
([2,2,0],[1,1,1]) -> [2,2,0,1,1,1];
([0,1,3],[3]) -> [0,1,3,3];
([0,0],[2,0,3]) -> [0,0,2,0,3];
([0,3,0],[0,0]) -> [0,3,0,0,0];
([0,2],[1]) -> [0,2,1];
([3,2,3],[3,2]) -> [3,2,3,3,2];
([2,3],[1,3]) -> [2,3,1,3];
([0],[3,0]) -> [0,3,0];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0285960000001 true true

([3,2,3],[2,3]) -> [3,2,3,2,3];
([2,3,3],[3,3]) -> [2,3,3,3,3];
([3],[3]) -> [3,3];
([2],[1,0]) -> [2,1,0];
([0],[1,3]) -> [0,1,3];
([3],[2,0]) -> [3,2,0];
([0,1],[0]) -> [0,1,0];
([1],[0,1,2]) -> [1,0,1,2];
([1,0,0],[2,1]) -> [1,0,0,2,1];
([2],[1,1,3]) -> [2,1,1,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0400669999999 true true

([1,1,0],[1,0]) -> [1,1,0,1,0];
([0,0,3],[3,3]) -> [0,0,3,3,3];
([1],[1,2]) -> [1,1,2];
([0],[2,2,2]) -> [0,2,2,2];
([2],[3]) -> [2,3];
([1,2],[3,3,2]) -> [1,2,3,3,2];
([3,1,0],[2,3]) -> [3,1,0,2,3];
([3,3,3],[3,2,0]) -> [3,3,3,3,2,0];
([1,3],[2]) -> [1,3,2];
([0,0,0],[1,3]) -> [0,0,0,1,3];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0235419999999 true true

([2,3,2],[2,1]) -> [2,3,2,2,1];
([2],[0,3,2]) -> [2,0,3,2];
([0,1],[0,0,1]) -> [0,1,0,0,1];
([1],[3,0,2]) -> [1,3,0,2];
([1],[0]) -> [1,0];
([1,1],[0]) -> [1,1,0];
([1,0,2],[3]) -> [1,0,2,3];
([0,1],[2]) -> [0,1,2];
([3],[2,1,3]) -> [3,2,1,3];
([0,2,3],[0,3,1]) -> [0,2,3,0,3,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0174179999999 true true

([2,1],[1,0]) -> [2,1,1,0];
([1,3,0],[2,2]) -> [1,3,0,2,2];
([1],[0,0]) -> [1,0,0];
([1],[1]) -> [1,1];
([3,2],[2,0]) -> [3,2,2,0];
([1,2],[1]) -> [1,2,1];
([1,0,0],[2,3,1]) -> [1,0,0,2,3,1];
([0,1,2],[2,0,3]) -> [0,1,2,2,0,3];
([0],[3,1]) -> [0,3,1];
([0,0],[0,1,1]) -> [0,0,0,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0409099999999 true true

([0,0],[2]) -> [0,0,2];
([0,2,1],[3]) -> [0,2,1,3];
([2],[2,2]) -> [2,2,2];
([3,2],[2,3]) -> [3,2,2,3];
([1],[2,3,1]) -> [1,2,3,1];
([0],[3,3]) -> [0,3,3];
([2],[3,1,1]) -> [2,3,1,1];
([3,3,0],[2,2,3]) -> [3,3,0,2,2,3];
([1,1],[3,3,1]) -> [1,1,3,3,1];
([3,3,0],[2,1,1]) -> [3,3,0,2,1,1];
([], []) -> [];

=================================
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
(\list_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_append = \xs -> \ys -> case xs of
    Nil y1 -> 
      ys

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_append (#2.2 y1) ys
        ) in list_append) : NatList -> NatList -> NatList)
0.0225129999999 true true

