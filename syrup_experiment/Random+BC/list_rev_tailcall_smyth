([0,3,2],[0,3,0]) -> [2,3,0,0,3,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (2, Cons (3, Cons (0, acc))) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.047255 false false

([2,0],[3]) -> [0,2,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (0, Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.024461 false true

([0,0],[1,0]) -> [0,0,1,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (0, Cons (0, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0230839999999 false false

([2,2,3],[2]) -> [3,2,2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( S (#2.1 y1)
        , Cons (#2.1 y1, Cons (#2.1 y1, acc))
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0212079999999 false false

([3],[3,3,1]) -> [3,3,3,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (#2.1 y1, acc) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.041819 false false

([3],[0,2]) -> [3,0,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (3, acc) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.032297 false false

([1,0,3],[2,0]) -> [3,0,1,2,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( S (#2.1 y1)
        , Cons (0, Cons (1, acc))
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0330489999999 false false

([2,0],[2]) -> [0,2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (0, Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0195189999999 false false

([1],[0,1,2]) -> [1,0,1,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (1, acc) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.018188 false false

([3,1,2],[2]) -> [2,1,3,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case acc of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , Cons (1, Cons (S (#2.1 y1), acc))
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.021939 false false

([0],[3,2]) -> [0,3,2];
([1,1],[3,2,2]) -> [1,1,3,2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_rev_tailcall (#2.2 y1) acc
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_rev_tailcall (#2.2 y1) acc
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0182259999999 false false

([3,2],[1,0]) -> [2,3,1,0];
([2,2],[2]) -> [2,2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0768619999999 true true

([3,3,2],[2,3,1]) -> [2,3,3,2,3,1];
([2,0,0],[2,3]) -> [0,0,2,2,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0225820000001 true true

([2,1,3],[2,1,3]) -> [3,1,2,2,1,3];
([2,3,1],[0,2]) -> [1,3,2,0,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.01784 true true

([1],[1]) -> [1,1];
([3],[1,3,1]) -> [3,1,3,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (#2.1 y1, acc) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_rev_tailcall (#2.2 y1) acc
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.018417 false false

([3],[3,3,0]) -> [3,3,3,0];
([1,0],[2,2]) -> [0,1,2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0197860000001 true true

([3],[3]) -> [3,3];
([0,2],[1]) -> [2,0,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0170680000001 true true

([2,2],[2]) -> [2,2,2];
([2,0],[1,2,2]) -> [0,2,1,2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0178060000001 true true

([0],[1,2]) -> [0,1,2];
([3,0,1],[1,1]) -> [1,0,3,1,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0147199999999 true true

([3,2],[3]) -> [2,3,3];
([0,1,0],[0,2]) -> [0,1,0,0,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.015228 true true

([3,1,1],[2]) -> [1,1,3,2];
([1],[2,1]) -> [1,2,1];
([0,3,2],[2]) -> [2,3,0,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0125149999999 true true

([3,1],[1,0]) -> [1,3,1,0];
([1],[2,0]) -> [1,2,0];
([1],[2]) -> [1,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0176019999999 true true

([1,0],[1,3,1]) -> [0,1,1,3,1];
([2,1,1],[0,2]) -> [1,1,2,0,2];
([3,0],[1,0]) -> [0,3,1,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0416760000001 true true

([3,1],[2]) -> [1,3,2];
([3],[1]) -> [3,1];
([0],[2,3]) -> [0,2,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.01269 true true

([2,0],[3,0]) -> [0,2,3,0];
([2,1,3],[1,1,2]) -> [3,1,2,1,1,2];
([2,0],[2,3,0]) -> [0,2,2,3,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.027055 true true

([2,0],[1,3,3]) -> [0,2,1,3,3];
([0],[2]) -> [0,2];
([0],[0]) -> [0,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0355010000001 true true

([2,2,0],[0,2]) -> [0,2,2,0,2];
([1,2],[3]) -> [2,1,3];
([0,3,0],[0,2,1]) -> [0,3,0,0,2,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0197330000001 true true

([1,3],[0]) -> [3,1,0];
([0],[2,0,1]) -> [0,2,0,1];
([0],[3]) -> [0,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.011634 true true

([1,2],[1,3,0]) -> [2,1,1,3,0];
([0],[3,1,2]) -> [0,3,1,2];
([2],[2]) -> [2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.013115 true true

([0],[3,2]) -> [0,3,2];
([1,2],[3,1]) -> [2,1,3,1];
([0],[1]) -> [0,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0402340000001 true true

([2,3,1],[1,2]) -> [1,3,2,1,2];
([3],[3,2,1]) -> [3,3,2,1];
([3,2,3],[2]) -> [3,2,3,2];
([3,2],[0,3]) -> [2,3,0,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0194240000001 true true

([0],[0]) -> [0,0];
([1,0,1],[1,3,0]) -> [1,0,1,1,3,0];
([1,3,1],[2,3,3]) -> [1,3,1,2,3,3];
([0],[3]) -> [0,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_rev_tailcall (#2.2 y1) acc
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_rev_tailcall (#2.2 y1) acc
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.01712 false false

([2,3],[3,1,1]) -> [3,2,3,1,1];
([0,0],[1,1]) -> [0,0,1,1];
([1,3,3],[1,1]) -> [3,3,1,1,1];
([0,0,0],[1,0,1]) -> [0,0,0,1,0,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.016531 true true

([2,2],[1,0]) -> [2,2,1,0];
([1,3,2],[0]) -> [2,3,1,0];
([3,0,2],[0]) -> [2,0,3,0];
([1,1,0],[1,1]) -> [0,1,1,1,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0157790000001 true true

([3,2],[1,2,1]) -> [2,3,1,2,1];
([0],[3,1,1]) -> [0,3,1,1];
([3],[0]) -> [3,0];
([3,3],[0,3]) -> [3,3,0,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.037699 true true

([0,2,3],[2,2]) -> [3,2,0,2,2];
([1,1],[3,3]) -> [1,1,3,3];
([0],[2]) -> [0,2];
([2],[0,1,3]) -> [2,0,1,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.017047 true true

([3,0],[1,0]) -> [0,3,1,0];
([0,3],[3,1]) -> [3,0,3,1];
([0],[1,1,3]) -> [0,1,1,3];
([1,3,3],[3,0]) -> [3,3,1,3,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.021534 true true

([1],[2,1,3]) -> [1,2,1,3];
([1,0],[3]) -> [0,1,3];
([2,1,2],[0,0,2]) -> [2,1,2,0,0,2];
([3,2],[1]) -> [2,3,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.015946 true true

([0],[1,3]) -> [0,1,3];
([3,0],[3]) -> [0,3,3];
([3],[1]) -> [3,1];
([2,2],[1,0]) -> [2,2,1,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0129649999999 true true

([1],[0,1]) -> [1,0,1];
([3],[0,1,3]) -> [3,0,1,3];
([3,2,2],[2,3]) -> [2,2,3,2,3];
([2,0],[2]) -> [0,2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0149630000001 true true

([1],[1,3,2]) -> [1,1,3,2];
([2,0,3],[3]) -> [3,0,2,3];
([2,2],[0,1]) -> [2,2,0,1];
([0,3],[0]) -> [3,0,0];
([3,0],[3]) -> [0,3,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0167759999999 true true

([2,3,1],[2,2]) -> [1,3,2,2,2];
([3],[2,1,2]) -> [3,2,1,2];
([1,1,1],[2]) -> [1,1,1,2];
([3],[3]) -> [3,3];
([2],[0,2,3]) -> [2,0,2,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.017276 true true

([0],[1,2]) -> [0,1,2];
([1,1],[2,2]) -> [1,1,2,2];
([0,2],[2,1,2]) -> [2,0,2,1,2];
([2,3],[3]) -> [3,2,3];
([2,1,3],[1]) -> [3,1,2,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.013387 true true

([1,0],[0]) -> [0,1,0];
([0,0,2],[1]) -> [2,0,0,1];
([0],[2,1,0]) -> [0,2,1,0];
([1,0],[1]) -> [0,1,1];
([2,3],[1]) -> [3,2,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0158180000001 true true

([2,2,2],[2,1,1]) -> [2,2,2,2,1,1];
([2,1],[2,3]) -> [1,2,2,3];
([2,2,2],[2,3,3]) -> [2,2,2,2,3,3];
([1],[2]) -> [1,2];
([1,1],[1,3,3]) -> [1,1,1,3,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00942600000008 true true

([1,2],[2,2]) -> [2,1,2,2];
([2,3,0],[2]) -> [0,3,2,2];
([1],[2,3,3]) -> [1,2,3,3];
([3,1,3],[1]) -> [3,1,3,1];
([2],[0,3,3]) -> [2,0,3,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00732799999992 true true

([1],[3,3]) -> [1,3,3];
([3,2,1],[0,0,1]) -> [1,2,3,0,0,1];
([2,2],[0]) -> [2,2,0];
([2,3],[2,2,2]) -> [3,2,2,2,2];
([3,1,3],[2]) -> [3,1,3,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.01045 true true

([3,3,2],[1,3]) -> [2,3,3,1,3];
([3,0,3],[1,0,0]) -> [3,0,3,1,0,0];
([3,0],[0,2,3]) -> [0,3,0,2,3];
([0,3],[1,3,3]) -> [3,0,1,3,3];
([0,3,2],[2,2]) -> [2,3,0,2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00804199999993 true true

([0],[3,0]) -> [0,3,0];
([1],[1,0,0]) -> [1,1,0,0];
([3,0],[1]) -> [0,3,1];
([2],[3,3,3]) -> [2,3,3,3];
([0,0],[1,1]) -> [0,0,1,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00733500000001 true true

([1,3,2],[3]) -> [2,3,1,3];
([0,3,0],[3,0]) -> [0,3,0,3,0];
([0,0,0],[0]) -> [0,0,0,0];
([3,0,0],[0]) -> [0,0,3,0];
([0],[3,3,2]) -> [0,3,3,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00805100000002 true true

([1,2,2],[1,1]) -> [2,2,1,1,1];
([3],[3,2,2]) -> [3,3,2,2];
([2,3],[2,2]) -> [3,2,2,2];
([2],[0,2,0]) -> [2,0,2,0];
([2,1],[1,3,1]) -> [1,2,1,3,1];
([3,1,3],[0,3]) -> [3,1,3,0,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.011913 true true

([1,1],[0]) -> [1,1,0];
([2,1],[3]) -> [1,2,3];
([3],[0,1,2]) -> [3,0,1,2];
([0,2,2],[1,0,2]) -> [2,2,0,1,0,2];
([0],[3,0]) -> [0,3,0];
([1],[2,3,2]) -> [1,2,3,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00762400000008 true true

([2,1,2],[3,1]) -> [2,1,2,3,1];
([2,0],[1,3,2]) -> [0,2,1,3,2];
([0],[3]) -> [0,3];
([3,0],[1,0]) -> [0,3,1,0];
([2,3,1],[2,2,0]) -> [1,3,2,2,2,0];
([2,2],[3]) -> [2,2,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.011211 true true

([2,0,3],[0,0,0]) -> [3,0,2,0,0,0];
([2,1],[3,3]) -> [1,2,3,3];
([3,2,2],[3,1,1]) -> [2,2,3,3,1,1];
([2,1],[3,1]) -> [1,2,3,1];
([1],[0,0]) -> [1,0,0];
([3,2],[2,1]) -> [2,3,2,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0175380000001 true true

([1,2],[3,0,3]) -> [2,1,3,0,3];
([0,1],[1,3]) -> [1,0,1,3];
([3],[0,0,1]) -> [3,0,0,1];
([1,3],[1,2]) -> [3,1,1,2];
([2,2],[3,1,3]) -> [2,2,3,1,3];
([2,3,3],[1,3,3]) -> [3,3,2,1,3,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.010497 true true

([0],[0,2,3]) -> [0,0,2,3];
([0,0,0],[1,0,2]) -> [0,0,0,1,0,2];
([2],[1,3]) -> [2,1,3];
([1,1],[2,2,3]) -> [1,1,2,2,3];
([0,3,3],[3]) -> [3,3,0,3];
([1,0,2],[2,1,3]) -> [2,0,1,2,1,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00853600000005 true true

([2],[0]) -> [2,0];
([0],[3,2]) -> [0,3,2];
([3,1,2],[2]) -> [2,1,3,2];
([1,3],[1,1]) -> [3,1,1,1];
([1,0,0],[2,0]) -> [0,0,1,2,0];
([3,2,0],[0,1]) -> [0,2,3,0,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00876999999991 true true

([3,3],[2,1,3]) -> [3,3,2,1,3];
([0],[3,0,2]) -> [0,3,0,2];
([3,3],[1,0,2]) -> [3,3,1,0,2];
([1,0,1],[2,1]) -> [1,0,1,2,1];
([1,1,0],[1,1]) -> [0,1,1,1,1];
([2,0,0],[0]) -> [0,0,2,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00844800000004 true true

([3],[1,0]) -> [3,1,0];
([1,2],[0,2,1]) -> [2,1,0,2,1];
([0,1],[2,0,1]) -> [1,0,2,0,1];
([3,3,1],[3]) -> [1,3,3,3];
([1,3],[1,3,2]) -> [3,1,1,3,2];
([0,3,2],[3]) -> [2,3,0,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00965199999996 true true

([2,3],[2,2]) -> [3,2,2,2];
([3,2],[1,3]) -> [2,3,1,3];
([2,0,1],[3]) -> [1,0,2,3];
([0,2,0],[1,2]) -> [0,2,0,1,2];
([3,1,0],[3,3,1]) -> [0,1,3,3,3,1];
([3,2,1],[3,2]) -> [1,2,3,3,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00783499999989 true true

([2,0],[1]) -> [0,2,1];
([3,1],[1,2]) -> [1,3,1,2];
([0,3,0],[1,3,2]) -> [0,3,0,1,3,2];
([2,1,0],[3,0,3]) -> [0,1,2,3,0,3];
([3,2],[3,1,2]) -> [2,3,3,1,2];
([0,0,1],[3,3]) -> [1,0,0,3,3];
([2,2,2],[3]) -> [2,2,2,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00788899999998 true true

([0],[1,0]) -> [0,1,0];
([3],[3,0,0]) -> [3,3,0,0];
([3],[3]) -> [3,3];
([0],[3,2,0]) -> [0,3,2,0];
([1,1],[0]) -> [1,1,0];
([1,0],[3]) -> [0,1,3];
([3,1],[1,2]) -> [1,3,1,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00826499999994 true true

([1,1,3],[2,2,0]) -> [3,1,1,2,2,0];
([0,2],[3,3,1]) -> [2,0,3,3,1];
([3,3,1],[3,2,1]) -> [1,3,3,3,2,1];
([1,3],[3,0]) -> [3,1,3,0];
([2],[1]) -> [2,1];
([1],[1,0]) -> [1,1,0];
([0,3],[0,1]) -> [3,0,0,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0112320000001 true true

([3,0],[1,1,2]) -> [0,3,1,1,2];
([1,2],[1]) -> [2,1,1];
([3],[2,2,1]) -> [3,2,2,1];
([2,0,0],[0]) -> [0,0,2,0];
([1,3,0],[1,1,3]) -> [0,3,1,1,1,3];
([1],[1,0]) -> [1,1,0];
([0,3,0],[1,3]) -> [0,3,0,1,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00817299999994 true true

([3,0,1],[2]) -> [1,0,3,2];
([1,2],[3,2,2]) -> [2,1,3,2,2];
([3,3,2],[0,0]) -> [2,3,3,0,0];
([2,0,2],[1,1]) -> [2,0,2,1,1];
([1,1,2],[1]) -> [2,1,1,1];
([2,1,3],[2,3,1]) -> [3,1,2,2,3,1];
([2,3,2],[0,3]) -> [2,3,2,0,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0107720000001 true true

([3],[2,2]) -> [3,2,2];
([3,2],[1,1,3]) -> [2,3,1,1,3];
([1,3,3],[3,1,0]) -> [3,3,1,3,1,0];
([0,3,0],[1,2]) -> [0,3,0,1,2];
([3,3],[0,3]) -> [3,3,0,3];
([2,0],[2,3,1]) -> [0,2,2,3,1];
([0,0,2],[2]) -> [2,0,0,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00765999999999 true true

([3,1],[2,3]) -> [1,3,2,3];
([0,3,1],[3]) -> [1,3,0,3];
([0,2,0],[1,3]) -> [0,2,0,1,3];
([1,1],[3,2,1]) -> [1,1,3,2,1];
([0,2],[0,2,0]) -> [2,0,0,2,0];
([3,3],[2,3,3]) -> [3,3,2,3,3];
([1],[2,1]) -> [1,2,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00837700000011 true true

([0,2,3],[0,1]) -> [3,2,0,0,1];
([1],[2]) -> [1,2];
([2,3],[3,2,1]) -> [3,2,3,2,1];
([2],[2]) -> [2,2];
([1,0],[0,2,2]) -> [0,1,0,2,2];
([3],[1,1,1]) -> [3,1,1,1];
([1,3],[1]) -> [3,1,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00868199999991 true true

([0,3,3],[2,2]) -> [3,3,0,2,2];
([1],[2,2,0]) -> [1,2,2,0];
([3,1],[2,2]) -> [1,3,2,2];
([3,3,2],[3]) -> [2,3,3,3];
([2],[0]) -> [2,0];
([3,0],[1,2]) -> [0,3,1,2];
([0],[1,2]) -> [0,1,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00840500000004 true true

([1,2],[3,3]) -> [2,1,3,3];
([3],[3]) -> [3,3];
([1],[2,0]) -> [1,2,0];
([0],[1]) -> [0,1];
([2,3,0],[1]) -> [0,3,2,1];
([2,1],[3,3,3]) -> [1,2,3,3,3];
([1],[0,0,3]) -> [1,0,0,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00874999999996 true true

([1,2,2],[2]) -> [2,2,1,2];
([3,0,0],[2,3]) -> [0,0,3,2,3];
([0],[0,0]) -> [0,0,0];
([0,2,0],[2,1,1]) -> [0,2,0,2,1,1];
([3,2],[0,1]) -> [2,3,0,1];
([2,1,0],[0]) -> [0,1,2,0];
([0,1],[1,2]) -> [1,0,1,2];
([2],[3,0]) -> [2,3,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00789000000009 true true

([3,3,0],[0,1]) -> [0,3,3,0,1];
([2,3],[3]) -> [3,2,3];
([1,0],[3,0]) -> [0,1,3,0];
([2],[2]) -> [2,2];
([0,0],[0]) -> [0,0,0];
([2,2,3],[2]) -> [3,2,2,2];
([1,0,0],[1]) -> [0,0,1,1];
([3],[2]) -> [3,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00989000000004 true true

([3,1,0],[3,3,2]) -> [0,1,3,3,3,2];
([1,2],[0,1]) -> [2,1,0,1];
([1,2,1],[0]) -> [1,2,1,0];
([2],[0]) -> [2,0];
([0],[2,3,0]) -> [0,2,3,0];
([0],[3]) -> [0,3];
([3,0],[2]) -> [0,3,2];
([3,3,3],[2]) -> [3,3,3,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.009906 true true

([2,3],[2]) -> [3,2,2];
([3,0],[3]) -> [0,3,3];
([0,2,0],[0,2,0]) -> [0,2,0,0,2,0];
([0,2,2],[1]) -> [2,2,0,1];
([2,0,3],[0,2,3]) -> [3,0,2,0,2,3];
([3,3],[3]) -> [3,3,3];
([0],[0]) -> [0,0];
([0],[0,2]) -> [0,0,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00844200000006 true true

([0],[3]) -> [0,3];
([2],[3]) -> [2,3];
([3,0],[1,1]) -> [0,3,1,1];
([1,2],[0]) -> [2,1,0];
([3,1],[2,3,2]) -> [1,3,2,3,2];
([3,1,1],[0,1]) -> [1,1,3,0,1];
([1],[1]) -> [1,1];
([0,3,1],[2]) -> [1,3,0,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00786199999993 true true

([3,0,1],[1,1,3]) -> [1,0,3,1,1,3];
([0],[0,2,1]) -> [0,0,2,1];
([1],[0,2]) -> [1,0,2];
([2],[3,1,2]) -> [2,3,1,2];
([0],[0,0]) -> [0,0,0];
([3,1,2],[0,2,0]) -> [2,1,3,0,2,0];
([2,2,1],[0,0,1]) -> [1,2,2,0,0,1];
([2,3,3],[0]) -> [3,3,2,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.007789 true true

([3],[0,0,0]) -> [3,0,0,0];
([1,0],[0]) -> [0,1,0];
([2,2,1],[0,0,1]) -> [1,2,2,0,0,1];
([0,2,0],[3,0,2]) -> [0,2,0,3,0,2];
([3,1,3],[1]) -> [3,1,3,1];
([2],[2,2]) -> [2,2,2];
([1],[0]) -> [1,0];
([1],[1,0]) -> [1,1,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00768700000003 true true

([0,1,3],[3]) -> [3,1,0,3];
([2,2],[3,0]) -> [2,2,3,0];
([0,0,2],[3]) -> [2,0,0,3];
([0],[2,0]) -> [0,2,0];
([1,1,3],[2,1]) -> [3,1,1,2,1];
([0,0,0],[1,3,0]) -> [0,0,0,1,3,0];
([1],[1]) -> [1,1];
([0,2],[1]) -> [2,0,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00916499999994 true true

([0],[3,0]) -> [0,3,0];
([1,0],[1]) -> [0,1,1];
([2,0],[2]) -> [0,2,2];
([1,2],[0]) -> [2,1,0];
([2],[0,3]) -> [2,0,3];
([2],[1,3,2]) -> [2,1,3,2];
([2],[0,3,0]) -> [2,0,3,0];
([1,2],[0,2,2]) -> [2,1,0,2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00875900000005 true true

([3],[1,1]) -> [3,1,1];
([3,0],[2]) -> [0,3,2];
([3,3],[0,3]) -> [3,3,0,3];
([2],[0]) -> [2,0];
([0],[1,3,3]) -> [0,1,3,3];
([2],[2,3]) -> [2,2,3];
([2,1,0],[3,0]) -> [0,1,2,3,0];
([0],[3,1,3]) -> [0,3,1,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00852000000009 true true

([3,1,0],[2,1,1]) -> [0,1,3,2,1,1];
([1,2],[0,3]) -> [2,1,0,3];
([0],[3,2,0]) -> [0,3,2,0];
([3],[1,2,1]) -> [3,1,2,1];
([0],[1]) -> [0,1];
([1],[2,2]) -> [1,2,2];
([2,3,0],[2,1,1]) -> [0,3,2,2,1,1];
([2],[3,3]) -> [2,3,3];
([2,3],[1]) -> [3,2,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00796799999989 true true

([1,2],[2]) -> [2,1,2];
([0],[0]) -> [0,0];
([3,1,2],[3]) -> [2,1,3,3];
([2],[3,3,2]) -> [2,3,3,2];
([1,2,2],[0]) -> [2,2,1,0];
([0,1],[2]) -> [1,0,2];
([3,1,2],[1]) -> [2,1,3,1];
([3,1],[0,3,3]) -> [1,3,0,3,3];
([1,1],[0]) -> [1,1,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00898099999995 true true

([1,3,2],[2,1,2]) -> [2,3,1,2,1,2];
([2,2,0],[0,2,3]) -> [0,2,2,0,2,3];
([2],[2,2]) -> [2,2,2];
([0],[3]) -> [0,3];
([2],[0,3]) -> [2,0,3];
([3,1,2],[1,0,1]) -> [2,1,3,1,0,1];
([1,1],[0]) -> [1,1,0];
([3,2],[1]) -> [2,3,1];
([2,2],[1]) -> [2,2,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00847700000008 true true

([0,2],[2]) -> [2,0,2];
([1,3,1],[1,1,1]) -> [1,3,1,1,1,1];
([2,2],[1,2,1]) -> [2,2,1,2,1];
([0,0],[2,2,3]) -> [0,0,2,2,3];
([1,0],[1]) -> [0,1,1];
([3],[3,2]) -> [3,3,2];
([0,0,1],[3,3,2]) -> [1,0,0,3,3,2];
([1],[3,2]) -> [1,3,2];
([1,3,3],[0]) -> [3,3,1,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00830300000007 true true

([3,1],[3,1,1]) -> [1,3,3,1,1];
([0],[0,0]) -> [0,0,0];
([3,3,1],[0,2]) -> [1,3,3,0,2];
([3,1],[1,0]) -> [1,3,1,0];
([3,2,3],[0,2,3]) -> [3,2,3,0,2,3];
([2],[3]) -> [2,3];
([3,2,3],[1]) -> [3,2,3,1];
([1,3],[3,0,3]) -> [3,1,3,0,3];
([3],[3,3,0]) -> [3,3,3,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00997400000006 true true

([0,3],[0,0,3]) -> [3,0,0,0,3];
([1,0],[0,3,1]) -> [0,1,0,3,1];
([1],[2,2]) -> [1,2,2];
([1,0,2],[1]) -> [2,0,1,1];
([0,1],[1,1]) -> [1,0,1,1];
([1,3,0],[3]) -> [0,3,1,3];
([2,3],[1]) -> [3,2,1];
([3],[2,1,1]) -> [3,2,1,1];
([0],[2]) -> [0,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00862499999994 true true

([3],[1]) -> [3,1];
([3,3],[2,2,1]) -> [3,3,2,2,1];
([2],[3,2]) -> [2,3,2];
([1],[3,3,2]) -> [1,3,3,2];
([1],[2,3]) -> [1,2,3];
([0],[2,1]) -> [0,2,1];
([3],[3]) -> [3,3];
([2,3,0],[3]) -> [0,3,2,3];
([0,3,2],[3,0]) -> [2,3,0,3,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0078860000001 true true

([0,0],[1,0]) -> [0,0,1,0];
([1,2,0],[1]) -> [0,2,1,1];
([1],[3]) -> [1,3];
([1,2,1],[0,1]) -> [1,2,1,0,1];
([3],[1]) -> [3,1];
([2,3,1],[1,1,3]) -> [1,3,2,1,1,3];
([1,3],[0,2]) -> [3,1,0,2];
([1,1],[3,1]) -> [1,1,3,1];
([2,3,2],[2,1,2]) -> [2,3,2,2,1,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00819799999999 true true

([0],[2,2,3]) -> [0,2,2,3];
([3,2,1],[1,1]) -> [1,2,3,1,1];
([1,1],[3]) -> [1,1,3];
([2],[2,2,0]) -> [2,2,2,0];
([1,3],[0,0]) -> [3,1,0,0];
([3],[3,3]) -> [3,3,3];
([1],[0,0,2]) -> [1,0,0,2];
([1],[1,3]) -> [1,1,3];
([2,3],[3,2]) -> [3,2,3,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00852299999997 true true

([2],[0]) -> [2,0];
([1,2,1],[0]) -> [1,2,1,0];
([0],[1,3]) -> [0,1,3];
([0],[0]) -> [0,0];
([1],[0,0,3]) -> [1,0,0,3];
([1,1,1],[2,0]) -> [1,1,1,2,0];
([3],[0,1]) -> [3,0,1];
([3],[0,0]) -> [3,0,0];
([3,3,3],[2,0,3]) -> [3,3,3,2,0,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_rev_tailcall (#2.2 y1) acc
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_rev_tailcall (#2.2 y1) acc
        ) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.010027 false false

([0,2,1],[1,1]) -> [1,2,0,1,1];
([0,2],[0]) -> [2,0,0];
([2,3,0],[3,1,3]) -> [0,3,2,3,1,3];
([0,2],[1]) -> [2,0,1];
([2,3],[0,2]) -> [3,2,0,2];
([1],[2,0]) -> [1,2,0];
([2,0,1],[1]) -> [1,0,2,1];
([2,3],[0,3]) -> [3,2,0,3];
([1,0,2],[1,1,2]) -> [2,0,1,1,1,2];
([2,1,1],[0,1,0]) -> [1,1,2,0,1,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00936799999999 true true

([2,0,3],[1,0,1]) -> [3,0,2,1,0,1];
([1],[0,0]) -> [1,0,0];
([2,2,3],[0]) -> [3,2,2,0];
([0,0,1],[0,0,2]) -> [1,0,0,0,0,2];
([0,0],[3,0]) -> [0,0,3,0];
([0,3,0],[3,0]) -> [0,3,0,3,0];
([0,0,1],[3]) -> [1,0,0,3];
([3,1,3],[3,2]) -> [3,1,3,3,2];
([3],[1,1,0]) -> [3,1,1,0];
([2],[0,1,0]) -> [2,0,1,0];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00954999999999 true true

([1],[1,3,0]) -> [1,1,3,0];
([2,3],[1]) -> [3,2,1];
([3,0,0],[0,1]) -> [0,0,3,0,1];
([1,0],[1,2]) -> [0,1,1,2];
([3],[1,0]) -> [3,1,0];
([0,0,1],[1,1]) -> [1,0,0,1,1];
([0,2],[3,0,2]) -> [2,0,3,0,2];
([1,0],[1,1,1]) -> [0,1,1,1,1];
([0,1],[0]) -> [1,0,0];
([3],[3]) -> [3,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00833299999999 true true

([2],[0,2,1]) -> [2,0,2,1];
([3,1,3],[2,3,1]) -> [3,1,3,2,3,1];
([0],[2]) -> [0,2];
([2,3,1],[2]) -> [1,3,2,2];
([0,3],[1]) -> [3,0,1];
([0,1,3],[3]) -> [3,1,0,3];
([0,0],[1,1,1]) -> [0,0,1,1,1];
([0,0],[0,1]) -> [0,0,0,1];
([3,2,3],[3,1,3]) -> [3,2,3,3,1,3];
([1],[2]) -> [1,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.0083810000001 true true

([1],[2,2]) -> [1,2,2];
([1,3,0],[0,3,1]) -> [0,3,1,0,3,1];
([1,0],[1]) -> [0,1,1];
([2,0],[2,0,1]) -> [0,2,2,0,1];
([3,0],[1]) -> [0,3,1];
([3],[1,3,1]) -> [3,1,3,1];
([1,3],[3,0,2]) -> [3,1,3,0,2];
([1,2],[3,0,3]) -> [2,1,3,0,3];
([2,1,0],[3]) -> [0,1,2,3];
([3,0],[3,1,3]) -> [0,3,3,1,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.009366 true true

([3],[3,2]) -> [3,3,2];
([3,0],[3]) -> [0,3,3];
([3],[3,0,3]) -> [3,3,0,3];
([0],[0,0]) -> [0,0,0];
([2,3],[3]) -> [3,2,3];
([2,3],[1,1,2]) -> [3,2,1,1,2];
([0,3],[2,1,2]) -> [3,0,2,1,2];
([2,0],[3,2,1]) -> [0,2,3,2,1];
([3,2],[0,0,3]) -> [2,3,0,0,3];
([1,2,2],[2,2]) -> [2,2,1,2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00925200000006 true true

([1,3,3],[2,2,3]) -> [3,3,1,2,2,3];
([0,3],[0,3,1]) -> [3,0,0,3,1];
([0,0,3],[3,0]) -> [3,0,0,3,0];
([1,3],[2]) -> [3,1,2];
([1],[1,1,0]) -> [1,1,1,0];
([1],[3]) -> [1,3];
([2],[0,2]) -> [2,0,2];
([3,3],[0]) -> [3,3,0];
([3,1,0],[1]) -> [0,1,3,1];
([2],[2,0,3]) -> [2,2,0,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00835099999995 true true

([3],[1,2,0]) -> [3,1,2,0];
([2,2,2],[3,3,2]) -> [2,2,2,3,3,2];
([2],[3,1]) -> [2,3,1];
([2,2,3],[3,1]) -> [3,2,2,3,1];
([1,1,3],[1]) -> [3,1,1,1];
([1,2],[2,2,0]) -> [2,1,2,2,0];
([0],[3]) -> [0,3];
([1,2,3],[1,3,1]) -> [3,2,1,1,3,1];
([1,0,1],[2,3]) -> [1,0,1,2,3];
([2],[2]) -> [2,2];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.009683 true true

([2,2],[3,0]) -> [2,2,3,0];
([0,2,0],[2,1,2]) -> [0,2,0,2,1,2];
([3,1],[0]) -> [1,3,0];
([0,1],[2,1]) -> [1,0,2,1];
([1,2,0],[1]) -> [0,2,1,1];
([0,1],[0,2]) -> [1,0,0,2];
([3,2],[0,0]) -> [2,3,0,0];
([2],[3]) -> [2,3];
([0,0],[1,1,1]) -> [0,0,1,1,1];
([2,2,3],[1,0,3]) -> [3,2,2,1,0,3];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00928799999997 true true

([0,2],[0]) -> [2,0,0];
([2],[3]) -> [2,3];
([1],[3]) -> [1,3];
([3,2,0],[0,3,1]) -> [0,2,3,0,3,1];
([1,1],[2,2]) -> [1,1,2,2];
([2,0,2],[1,1,0]) -> [2,0,2,1,1,0];
([0],[3,1,1]) -> [0,3,1,1];
([1,0,2],[2]) -> [2,0,1,2];
([0,2],[3]) -> [2,0,3];
([0,3,1],[2,3,1]) -> [1,3,0,2,3,1];
([], []) -> [];

=================================
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
(\list_rev_tailcall -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_tailcall = \xs -> \acc -> case xs of
    Nil y1 -> 
      acc

    Cons y1 -> 
      list_rev_tailcall (#2.2 y1) (Cons (#2.1 y1, acc)) in list_rev_tailcall) : NatList -> NatList -> NatList)
0.00930900000003 true true

