(Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        ( Node (Node (Leaf, 0, Leaf), 2, Leaf)
        , 1
        , #3.3 y1
        ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.042696 false false

(Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        ( Node (Leaf, 0, Leaf)
        , 2
        , Node
            ( Leaf
            , 0
            , Node (Leaf, #3.2 y1, Leaf)
            )
        ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0367080000001 false false

(Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())),2) -> Node (Leaf (),0,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        ( Leaf
        , 0
        , Node
            ( Node (Leaf, 1, Node (Leaf, x1, Leaf))
            , 3
            , Leaf
            )
        ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0446999999999 false false

(Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))),3) -> Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node (Leaf, x1, #3.3 y1) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.044815 false false

(Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ())),2) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        ( #3.1 y1
        , 0
        , Node (Leaf, 1, Node (Leaf, x1, Leaf))
        ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0585329999999 false false

(Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())),1) -> Node (Node (Leaf (),2,Leaf ()),0,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        ( Node (Leaf, S x1, Leaf)
        , 0
        , Node
            ( Node (Leaf, x1, Leaf)
            , S (S x1)
            , Leaf
            )
        ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.03611 false false

(Node (Leaf (),0,Leaf ()),3) -> Node (Leaf (),0,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Node (Leaf, x1, Leaf)) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.022463 false false

(Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ())),0) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node (#3.1 y1, 0, #3.3 y1) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0333430000001 false false

(Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ())),2) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        ( #3.1 y1
        , 0
        , Node (Leaf, 0, Node (Leaf, x1, Leaf))
        ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0607279999999 false false

(Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ()),2) -> Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        ( Node (Node (Leaf, x1, Leaf), 1, Leaf)
        , 0
        , Node (Leaf, 2, Leaf)
        ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0324149999999 false false

(Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))),1) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ())));
(Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ()),1) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),3,Leaf ())),3,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.1 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Node
                ( Node (Leaf, 1, Leaf)
                , 3
                , Node (Leaf, #3.2 y1, Leaf)
                )
            , 3
            , Leaf
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node
            ( Leaf
            , 1
            , Node (Leaf, 2, Node (Leaf, 0, Leaf))
            ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.223571 false false

(Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())),1) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.1 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Node (Leaf, 0, Node (Leaf, 1, Leaf))
            , 3
            , Node (Leaf, S (S x1), Leaf)
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node
            ( Leaf
            , 2
            , Node
                ( Leaf
                , 2
                , Node (Leaf, S (#3.2 y1), Leaf)
                )
            ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.1899 false false

(Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ())));
(Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.1 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Node (Leaf, 1, Leaf)
            , 1
            , Node (Leaf, S (S (#3.2 y1)), Leaf)
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node
            ( Node (Leaf, 0, Leaf)
            , 2
            , Node
                ( Leaf
                , 0
                , Node (Leaf, #3.2 y1, Leaf)
                )
            ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.490418 false false

(Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(Node (Leaf (),2,Leaf ()),2) -> Node (Leaf (),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.3 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Node (Leaf, 1, Leaf)
            , 2
            , Node (Node (Leaf, x1, Leaf), S x1, Leaf)
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node (Leaf, 2, Leaf) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.164738 false false

(Node (Leaf (),1,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ()),2) -> Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.1 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Node (Leaf, 2, Node (Leaf, S x1, Leaf))
            , 0
            , Node (Leaf, 2, Leaf)
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node (Node (Leaf, 0, Leaf), 1, Leaf) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.298857 false false

(Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))),2) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0,Leaf ()),2) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.1 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Node (Node (Leaf, 1, Leaf), 3, Leaf)
            , 0
            , Node (Leaf, 2, Leaf)
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node
            ( Leaf
            , 2
            , Node (Leaf, 3, Node (Leaf, 2, Leaf))
            ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.465918 false false

(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())),1) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ()),2) -> Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.3 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Node (Leaf, 0, Node (Leaf, x1, Leaf))
            , 3
            , Node (Leaf, 2, Leaf)
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node
            ( Node (Leaf, 0, Node (Leaf, S x1, Leaf))
            , 2
            , Leaf
            ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.039549 false false

(Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())),3) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> let f1 = \x1 -> Node
    ( case tree of
        Node y1 -> 
          #3.1 y1

        Leaf y1 -> 
          Leaf
    , case tree of
        Node y1 -> 
          #3.2 y1

        Leaf y1 -> 
          0
    , case x1 of
        Z y1 -> 
          Leaf

        S y1 -> 
          Node (Leaf, y1, Node (Leaf, x1, Leaf))
    ) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.190293 false false

(Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ());
(Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ()),1) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        ( Node (Node (Leaf, 0, Leaf), 3, Leaf)
        , #3.2 y1
        , Leaf
        ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        ( Node (tree_binsert (#3.3 y1) x1, 3, Leaf)
        , #3.2 y1
        , Leaf
        ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0529289999999 false false

(Node (Leaf (),1,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())),3) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.1 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Node (Leaf, 1, Leaf)
            , 1
            , Node (Leaf, 0, Node (Leaf, x1, Leaf))
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node (Node (Leaf, 0, Leaf), 1, Leaf) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.395597 false false

(Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())),3) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> let f1 = \x1 -> Node
    (case tree of
      Node y1 -> 
        ( Node (Leaf, 0, Leaf)
        , #3.2 y1
        , #3.3 y1
        )

      Leaf y1 -> 
        (Leaf, 0, Leaf)) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.216607 false false

(Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))),2) -> Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));
(Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),3) -> Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ())),2) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        ( case compare x1 (#3.2 y1) of
            LT y2 -> 
              ??

            GT y2 -> 
              Node (Leaf, 3, Leaf)

            EQ y2 -> 
              Leaf
        , case compare x1 (S (#3.2 y1)) of
            LT y2 -> 
              2

            GT y2 -> 
              0

            EQ y2 -> 
              1
        , Node
            ( case compare x1 (S (#3.2 y1)) of
                LT y2 -> 
                  Leaf

                GT y2 -> 
                  Leaf

                EQ y2 -> 
                  Node (Leaf, 2, Leaf)
            , case #3.1 y1 of
                Node y2 -> 
                  3

                Leaf y2 -> 
                  1
            , case #3.1 y1 of
                Node y2 -> 
                  Leaf

                Leaf y2 -> 
                  Node (Leaf, 2, Leaf)
            )
        ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
27.943558 false false

(Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))),1) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(Node (Leaf (),3,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),3,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.3 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Leaf
            , #3.2 y1
            , Node (Leaf, x1, #3.3 y2)
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node (Node (Leaf, 0, Leaf), 3, Leaf) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.273166 false false

(Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));
(Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ()),0) -> Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case compare (#3.2 y1) 0 of
        LT y2 -> 
          let f1 = \x1 -> tree in f1

        GT y2 -> 
          let f1 = \x1 -> Node
            ( tree_binsert (#3.1 y1) x1
            , 3
            , #3.3 y1
            ) in f1

        EQ y2 -> 
          let f1 = \x1 -> Node
            ( Node (Node (Leaf, 3, Leaf), 3, Leaf)
            , 0
            , Leaf
            ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, x1, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case compare (#3.2 y1) 0 of
        LT y2 -> 
          let f1 = \x1 -> tree in f1

        GT y2 -> 
          let f1 = \x1 -> Node
            ( tree_binsert (#3.1 y1) x1
            , 3
            , #3.3 y1
            ) in f1

        EQ y2 -> 
          let f1 = \x1 -> Node
            ( Node (Node (Leaf, 3, Leaf), 3, Leaf)
            , 0
            , Leaf
            ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, x1, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
20.233273 false false

(Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))),1) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())),3) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),0,Leaf ()),1) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case compare (#3.2 y1) 0 of
        LT y2 -> 
          let f1 = \x1 -> tree in f1

        GT y2 -> 
          let f1 = \x1 -> Node (#3.1 y1, x1, #3.3 y1) in f1

        EQ y2 -> 
          let f1 = \x1 -> Node (Leaf, 0, Node (Leaf, x1, Leaf)) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
11.073648 false false

(Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))),0) -> Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ());
(Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))),1) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case compare (#3.2 y1) 0 of
        LT y2 -> 
          let f1 = \x1 -> tree in f1

        GT y2 -> 
          let f1 = \x1 -> Node
            ( tree_binsert (#3.1 y1) x1
            , #3.2 y1
            , #3.3 y1
            ) in f1

        EQ y2 -> 
          let f1 = \x1 -> Node (Leaf, 0, #3.3 y1) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, x1, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case compare (#3.2 y1) 0 of
        LT y2 -> 
          let f1 = \x1 -> tree in f1

        GT y2 -> 
          let f1 = \x1 -> Node
            ( tree_binsert (#3.1 y1) x1
            , #3.2 y1
            , #3.3 y1
            ) in f1

        EQ y2 -> 
          let f1 = \x1 -> Node (Leaf, 0, #3.3 y1) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, x1, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
14.249107 false false

(Node (Leaf (),2,Leaf ()),2) -> Node (Leaf (),2,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())),3) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        (case compare x1 (#3.2 y1) of
          LT y2 -> 
            ( Node (Leaf, 0, Leaf)
            , 1
            , Node (Node (Leaf, 0, Leaf), 1, Leaf)
            )

          GT y2 -> 
            ( Node (Leaf, 1, Leaf)
            , 2
            , Node (Leaf, 0, Node (Leaf, 3, Leaf))
            )

          EQ y2 -> 
            (Leaf, 2, Leaf)) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
26.799757 false false

(Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0,Leaf ()),0) -> Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0,Leaf ());
(Node (Leaf (),0,Leaf ()),3) -> Node (Leaf (),0,Node (Leaf (),3,Leaf ()));
(Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ()),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        (case compare x1 (#3.2 y1) of
          LT y2 -> 
            ( Node
                ( Node (Node (Leaf, 0, Leaf), 3, Leaf)
                , 3
                , Leaf
                )
            , 2
            , Leaf
            )

          GT y2 -> 
            (Leaf, 0, Node (Leaf, 3, Leaf))

          EQ y2 -> 
            ( Node (Node (Leaf, 2, Leaf), 2, Leaf)
            , 0
            , Leaf
            )) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
27.433061 false false

(Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> let f1 = \x1 -> case x1 of
    Z y1 -> 
      case tree of
        Node y2 -> 
          Node
            ( Node (Leaf, 0, Leaf)
            , 3
            , Node (Leaf, 3, Leaf)
            )

        Leaf y2 -> 
          Node (Leaf, 0, Leaf)

    S y1 -> 
      Node
        ( Leaf
        , case y1 of
            Z y2 -> 
              0

            S y2 -> 
              1
        , Node
            ( case y1 of
                Z y2 -> 
                  Node (Leaf, 1, Leaf)

                S y2 -> 
                  Leaf
            , 2
            , case y1 of
                Z y2 -> 
                  Leaf

                S y2 -> 
                  Node (Leaf, 3, Leaf)
            )
        ) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.496537 false false

(Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()));
(Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),0,Leaf ()),1) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case compare (#3.2 y1) 0 of
        LT y2 -> 
          let f1 = \x1 -> tree in f1

        GT y2 -> 
          let f1 = \x1 -> Node (Node (Leaf, x1, Leaf), 1, #3.3 y1) in f1

        EQ y2 -> 
          let f1 = \x1 -> Node
            ( Node
                ( Node (Leaf, 0, Leaf)
                , S (S x1)
                , Leaf
                )
            , 0
            , Node (Leaf, 1, Leaf)
            ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
110.366592 false false

(Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ())),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ()),1) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())),2) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case compare (#3.2 y1) 0 of
        LT y2 -> 
          let f1 = \x1 -> tree in f1

        GT y2 -> 
          case #3.3 y1 of
            Node y3 -> 
              let f1 = \x1 -> Node
                ( Node (Node (Leaf, 0, Leaf), 3, Leaf)
                , 2
                , Node (Leaf, 2, Leaf)
                ) in f1

            Leaf y3 -> 
              let f1 = \x1 -> Node
                ( Node (Node (Leaf, 0, Leaf), 3, Leaf)
                , 1
                , Leaf
                ) in f1

        EQ y2 -> 
          case #3.1 y1 of
            Node y3 -> 
              let f1 = \x1 -> Node
                ( Node (Leaf, 0, Leaf)
                , 0
                , Node (Leaf, 1, Leaf)
                ) in f1

            Leaf y3 -> 
              let f1 = \x1 -> Node
                ( Leaf
                , 0
                , Node
                    ( Node (Leaf, 0, Leaf)
                    , 1
                    , Node (Leaf, 2, Leaf)
                    )
                ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
105.340972 false false

(Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()),3) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())),1) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> let f1 = \x1 -> case tree of
    Node y1 -> 
      tree

    Leaf y1 -> 
      Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.120868 false false

(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())),1) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())),1) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2) -> Node (Leaf (),2,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ()),3) -> Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.1 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Node
                ( Leaf
                , #3.2 y2
                , tree_binsert (#3.3 y1) x1
                )
            , #3.2 y1
            , #3.3 y1
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node (Leaf, #3.2 y1, #3.3 y1) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.1 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Node
                ( Leaf
                , #3.2 y2
                , tree_binsert (#3.3 y1) x1
                )
            , #3.2 y1
            , #3.3 y1
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node (Leaf, #3.2 y1, #3.3 y1) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.346394 false false

(Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()),2) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()),1) -> Node (Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())),3,Leaf ());
(Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),0,Leaf ()),3) -> Node (Leaf (),0,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> let f1 = \x1 -> Node
    (case tree of
      Node y1 -> 
        ( case compare (#3.2 y1) (S x1) of
            LT y2 -> 
              Leaf

            GT y2 -> 
              Node
                ( Leaf
                , 0
                , Node (Node (Leaf, 1, Leaf), 3, Leaf)
                )

            EQ y2 -> 
              Node (Leaf, 1, Node (Leaf, 2, Leaf))
        , case compare x1 (#3.2 y1) of
            LT y2 -> 
              3

            GT y2 -> 
              0

            EQ y2 -> 
              1
        , case compare x1 (#3.2 y1) of
            LT y2 -> 
              Leaf

            GT y2 -> 
              Node (Leaf, 3, Leaf)

            EQ y2 -> 
              Node (Leaf, 2, Leaf)
        )

      Leaf y1 -> 
        (Leaf, 0, Leaf)) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
35.880653 false false

(Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))),1) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ())));
(Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ()),1) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()),1) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())),0) -> Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())),1) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ());
(Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      let f1 = \x1 -> Node
        ( case compare (#3.2 y1) (S x1) of
            LT y2 -> 
              Leaf

            GT y2 -> 
              Node (Node (Leaf, 0, Leaf), 1, Leaf)

            EQ y2 -> 
              Node (Leaf, 1, Node (Leaf, 2, Leaf))
        , S
            (case #3.1 y1 of
              Node y2 -> 
                2

              Leaf y2 -> 
                0)
        , case compare x1 (S (#3.2 y1)) of
            LT y2 -> 
              Leaf

            GT y2 -> 
              Node (Leaf, 1, Node (Leaf, 3, Leaf))

            EQ y2 -> 
              Node (Leaf, 2, Leaf)
        ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
47.570511 false false

(Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ()),0) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ());
(Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()),1) -> Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ());
(Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Leaf ()),3) -> Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),1,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.1 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node (#3.1 y1, #3.2 y1, #3.1 y2) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node (Node (Leaf, 0, Leaf), 1, Leaf) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.503006 false false

(Node (Leaf (),3,Leaf ()),3) -> Node (Leaf (),3,Leaf ());
(Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ()),3) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))),1) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ())));
(Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())),0) -> Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case compare (#3.2 y1) 0 of
        LT y2 -> 
          let f1 = \x1 -> tree in f1

        GT y2 -> 
          case #3.3 y1 of
            Node y3 -> 
              let f1 = \x1 -> Node
                ( Node (Leaf, 1, Leaf)
                , 3
                , Node (Leaf, 2, Node (Leaf, 0, Leaf))
                ) in f1

            Leaf y3 -> 
              let f1 = \x1 -> Node (Leaf, 3, Leaf) in f1

        EQ y2 -> 
          case #3.1 y1 of
            Node y3 -> 
              let f1 = \x1 -> Node
                ( Node (Node (Leaf, 0, Leaf), 1, Leaf)
                , 0
                , Node (Leaf, 3, Leaf)
                ) in f1

            Leaf y3 -> 
              let f1 = \x1 -> Node
                ( Leaf
                , 0
                , Node (Node (Leaf, 2, Leaf), 0, Leaf)
                ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
80.541168 false false

(Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),3,Leaf ())),3) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0) -> Node (Node (Leaf (),3,Leaf ()),0,Leaf ());
(Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
(\compare -> (\tree_binsert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_binsert = \tree -> case tree of
    Node y1 -> 
      case #3.1 y1 of
        Node y2 -> 
          let f1 = \x1 -> Node
            ( Node (Leaf, #3.2 y2, Leaf)
            , #3.2 y1
            , #3.3 y1
            ) in f1

        Leaf y2 -> 
          let f1 = \x1 -> Node
            ( Leaf
            , 2
            , Node (Leaf, 2, Node (Leaf, x1, Leaf))
            ) in f1

    Leaf y1 -> 
      let f1 = \x1 -> Node (Leaf, 0, Leaf) in f1 in tree_binsert) : NatTree -> Nat -> NatTree))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.389631 false false

(Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())),1) -> Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))),2) -> Node (Leaf (),0,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())));
(Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3) -> Node (Node (Leaf (),0,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ())),2) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ());
(Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),0,Leaf ()),3) -> Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()),1,Leaf ());
(Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())),3) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))),3) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())),1) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))),0) -> Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ())));
(Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ()),2) -> Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ());
(Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ()),2) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ()),1) -> Node (Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())),2,Leaf ());
(Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ())),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ()),3) -> Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()),2) -> Node (Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))),3,Leaf ());
(Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ()),2) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())),3) -> Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())),0) -> Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ())),3) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()),2) -> Node (Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))),3,Leaf ());
(Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3) -> Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()),3) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())),2) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));
(Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Leaf ()),1) -> Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),2,Leaf ()),3) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())),2) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))),2) -> Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),1,Leaf ()),3) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())),0) -> Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ())),1) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ());
(Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))),1) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),1) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ());
(Node (Leaf (),1,Leaf ()),2) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))),2) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3) -> Node (Leaf (),3,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),2,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())),1) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Leaf ()),2) -> Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),0,Leaf ()),1) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())),3) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())),1) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()),1) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1) -> Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())),2) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Node (Leaf (),0,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())),2) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))),3) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ()));
(Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ());
(Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ()),3) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ())),0) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),1,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));
(Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),3,Leaf ()),1) -> Node (Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),1,Leaf ())),3,Leaf ());
(Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3) -> Node (Leaf (),3,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0) -> Node (Leaf (),0,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),3,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())),0) -> Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()),3) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ());
(Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))),3) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))),1) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())));
(Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))),3) -> Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))));
(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())),1) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ())),2) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ())));
(Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),0,Leaf ()),3) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())),1) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(Node (Leaf (),3,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),3,Leaf ());
(Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ());
(Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()),3) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ())),2) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));
(Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ())),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ())),1) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2) -> Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ());
(Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ()),1) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ());
(Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3) -> Node (Leaf (),3,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ())));
(Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),2,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(Node (Leaf (),3,Leaf ()),3) -> Node (Leaf (),3,Leaf ());
(Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Leaf ()),1) -> Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ()),3) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ()),1) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()),2) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ());
(Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())),1) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),3) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())),0) -> Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()));
(Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2) -> Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()),3) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())),2) -> Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()));
(Node (Leaf (),0,Leaf ()),0) -> Node (Leaf (),0,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())),2) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()),1) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ());
(Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))),3) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))));
(Node (Leaf (),2,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ()),1) -> Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())),2) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ())),0) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))),3) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))));
(Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())),3,Leaf ());
(Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ()),0) -> Node (Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ())),2) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),3,Leaf ()),2) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())),3) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),2,Leaf ()),2) -> Node (Leaf (),2,Leaf ());
(Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),1,Leaf ()),2) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))),0) -> Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ())));
(Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()),2) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ())),3) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))),3) -> Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))));
(Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ())),1) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ()),2) -> Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())),3) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))),3) -> Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))));
(Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))),1) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))),3) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))));
(Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()),0) -> Node (Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()),3,Leaf ());
(Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))),1) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())));
(Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ()),2) -> Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Node (Leaf (),2,Leaf ()));
(Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ()),1) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),1,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));
(Node (Leaf (),1,Leaf ()),2) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))),1) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ())));
(Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ())),1) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()));
(Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ())),3,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ())),2) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))),3) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))));
(Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))),3) -> Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),1) -> Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))),1) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ()),0) -> Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()),2) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ());
(Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())),3) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),3,Leaf ())));
(Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ())));
(Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())),2) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0) -> Node (Leaf (),0,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ())),1) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))),3) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ()));
(Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ()),2) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ());
(Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2) -> Node (Leaf (),0,Node (Leaf (),2,Leaf ()));
(Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ()),1) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()),1) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()),0) -> Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())),2,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())),2) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())),3) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()));
(Node (Leaf (),1,Leaf ()),3) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),3,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),3,Leaf ());
(Node (Leaf (),2,Leaf ()),2) -> Node (Leaf (),2,Leaf ());
(Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))),1) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ())));
(Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()));
(Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ()),3) -> Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))),2) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ())));
(Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())),1) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),3,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),3,Leaf ());
(Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ())),1) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2) -> Node (Node (Leaf (),0,Leaf ()),2,Leaf ());
(Node (Leaf (),2,Leaf ()),3) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ()),1) -> Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))),1) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ())));
(Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()),2) -> Node (Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))),3,Leaf ());
(Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()),2) -> Node (Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ()),1) -> Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),3,Leaf ()),3) -> Node (Leaf (),3,Leaf ());
(Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()),1,Leaf ());
(Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ())),3) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),2) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());
(Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3) -> Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()),2) -> Node (Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())),3,Leaf ());
(Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())),0) -> Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())),2) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ()),1) -> Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Node (Leaf (),1,Leaf ()));
(Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()),2) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())),1) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ()),0) -> Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ());
(Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()),0) -> Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2) -> Node (Node (Leaf (),2,Leaf ()),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2) -> Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))),3) -> Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))));
(Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))),3) -> Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))),1) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),2,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(Node (Leaf (),3,Leaf ()),3) -> Node (Leaf (),3,Leaf ());
(Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ())));
(Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ()),1) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ())),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ()),3) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))),2) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ())));
(Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))),2) -> Node (Leaf (),1,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())));
(Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))),3) -> Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))));
(Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))),2) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ())));
(Node (Leaf (),1,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ())),3) -> Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));
(Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))),3) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(Node (Leaf (),1,Leaf ()),3) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),2,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),2,Leaf ());
(Node (Leaf (),3,Leaf ()),2) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())),3) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ()),2) -> Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()),2,Leaf ());
(Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ()),1) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ());
(Node (Leaf (),2,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())),3) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())));
(Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()),2) -> Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Node (Leaf (),0,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())),1,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())),3) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ()),1) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ());
(Node (Leaf (),1,Leaf ()),2) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),3,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),3,Leaf ());
(Node (Leaf (),0,Leaf ()),2) -> Node (Leaf (),0,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2) -> Node (Leaf (),0,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())),3) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())),3) -> Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())));
(Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ())),3) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),0,Leaf ()),1) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),3) -> Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),3,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()),2) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ());
(Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ()),2) -> Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()),2) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ());
(Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ()),2) -> Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ());
(Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())),3,Leaf ());
(Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))),1) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ())),1) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()),0) -> Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())),2,Leaf ());
(Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ())),2) -> Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ()),3) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ())),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Leaf ()),1) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())),2) -> Node (Leaf (),0,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()));
(Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())),3) -> Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ());
(Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))),2) -> Node (Leaf (),1,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())));
(Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()),2) -> Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()),2) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),1,Leaf ())),3) -> Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),2,Leaf ()),3) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3) -> Node (Leaf (),3,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),3,Leaf ()),3) -> Node (Leaf (),3,Leaf ());
(Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())),2) -> Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ())));
(Node (Leaf (),2,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())),3) -> Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),0,Leaf ()),1) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())),2) -> Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())),3) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))),2) -> Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ())));
(Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))),1) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ())));
(Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))),0) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(Node (Leaf (),2,Leaf ()),3) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),2) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());
(Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ()),2) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2) -> Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),1,Leaf ()),3) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()),2) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())),1) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()));
(Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())),2) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));
(Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ()),1) -> Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Node (Leaf (),1,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2) -> Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ())),1) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())),2) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()),1) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0) -> Node (Leaf (),0,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()),1) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ()),1) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ());
(Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))),2) -> Node (Leaf (),1,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())));
(Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()),3) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ())),3) -> Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ()),3) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))),2) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ()),1) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())),1) -> Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))),2) -> Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ())));
(Node (Leaf (),1,Leaf ()),2) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),1,Leaf ())),0) -> Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()),1) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ())),3,Leaf ());
(Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()),3) -> Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ());
(Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ())));
(Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ())),2) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ()));
(Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ()),3) -> Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ())),1) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()),2) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Node (Leaf (),2,Leaf ()));
(Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ());
(Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()),3) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))),3) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))),3) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))));
(Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))),3) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),0,Leaf ())));
(Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())),2) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),2,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()));
(Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())),1) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),2,Leaf ()),3) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ())),3) -> Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())),0) -> Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()));
(Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()),2) -> Node (Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())),3,Leaf ());
(Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())),3) -> Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),0,Leaf ()),1) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ()),2) -> Node (Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))),1) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ())));
(Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()),0) -> Node (Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),0,Leaf ()),0) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),0,Leaf ());
(Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ()),2) -> Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Node (Leaf (),2,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3) -> Node (Leaf (),3,Node (Leaf (),3,Leaf ()));
(Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ()),1) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),2) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ()));
(Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()),1) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()),0) -> Node (Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()),3,Leaf ());
(Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ()),3) -> Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))),1) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))),2) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ())));
(Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())),3) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())));
(Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()),1) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())),3) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()),1) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ());
(Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Leaf ()),3) -> Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Node (Leaf (),3,Leaf ()));
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))),2) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))));
(Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ()),0) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(Node (Leaf (),2,Leaf ()),0) -> Node (Node (Leaf (),0,Leaf ()),2,Leaf ());
(Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())),0) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Node (Leaf (),0,Leaf ()));
(Node (Leaf (),3,Leaf ()),3) -> Node (Leaf (),3,Leaf ());
(Node (Leaf (),2,Leaf ()),1) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))),0) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(Node (Leaf (),3,Leaf ()),2) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
(Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Leaf ()),3) -> Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Node (Leaf (),3,Leaf ()));
(Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),0,Leaf ()),0) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),0,Leaf ());
(Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())),0) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ())),3) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ()),0) -> Node (Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())),1,Leaf ());
(Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())),3) -> Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())));
(Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))),0) -> Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ())));
(Node (Leaf (),2,Leaf ()),2) -> Node (Leaf (),2,Leaf ());
(Leaf (), 0) -> Node (Leaf (), 0, Leaf ());

=================================
None
