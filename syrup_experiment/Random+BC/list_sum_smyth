[1,1,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.038519 true false

[1,2,3] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0485550000001 true false

[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.057988 true false

[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0484240000001 true false

[0,2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0415069999999 true false

[0,3,2] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0519899999999 true false

[3,1,3] -> 7;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0548779999999 true false

[1,0,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0523129999999 true false

[2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.052034 true false

[2,1,2] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.071091 true false

[1] -> 1;
[2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.049047 true false

[1,3] -> 4;
[1,0] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.048771 true false

[2] -> 2;
[3,1,2] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.087362 true false

[3,3] -> 6;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.11659 true false

[0] -> 0;
[2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0470399999999 true false

[0,0,0] -> 0;
[3,2,2] -> 7;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.055531 true false

[2,3,1] -> 6;
[3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0402759999999 true false

[1] -> 1;
[2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.049405 true false

[1,0,0] -> 1;
[0,2,1] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028845 true false

[2,2] -> 4;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0306370000001 true false

[1,0] -> 1;
[3] -> 3;
[3,3,3] -> 9;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0384819999999 true false

[0,0,0] -> 0;
[2,0] -> 2;
[1,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0296089999999 true false

[3] -> 3;
[1,1] -> 2;
[3,0] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029254 true false

[1,3] -> 4;
[0] -> 0;
[1,0] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0291540000001 true false

[3] -> 3;
[3,1] -> 4;
[3,1,0] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031896 true false

[0] -> 0;
[3,1] -> 4;
[1,1] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0314940000001 true false

[2,3,2] -> 7;
[1,0,1] -> 2;
[3,3] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0294530000001 true false

[3,3,1] -> 7;
[2,2,2] -> 6;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0315740000001 true false

[3,0,0] -> 3;
[0,1] -> 1;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0300589999999 true false

[2] -> 2;
[0] -> 0;
[1,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0298499999999 true false

[0] -> 0;
[2,1,0] -> 3;
[3,1] -> 4;
[2,0,1] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.047055 true false

[3] -> 3;
[1] -> 1;
[0,0,2] -> 2;
[1,0,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0301059999999 true false

[1] -> 1;
[2,0,1] -> 3;
[1,1] -> 2;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0303309999999 true false

[1] -> 1;
[2,2,3] -> 7;
[0,1] -> 1;
[1,1] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0302569999999 true false

[3] -> 3;
[1] -> 1;
[2] -> 2;
[0,2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028988 true false

[2] -> 2;
[2,3,2] -> 7;
[0,0,0] -> 0;
[2,3,0] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0288410000001 true false

[1] -> 1;
[1,0,0] -> 1;
[0,0,1] -> 1;
[2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0293979999999 true false

[0] -> 0;
[3] -> 3;
[1,1] -> 2;
[2,3,2] -> 7;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0307740000001 true false

[0,0] -> 0;
[3] -> 3;
[1,0,2] -> 3;
[2,1,1] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0315579999999 true false

[3,2,2] -> 7;
[3,0] -> 3;
[0,1,0] -> 1;
[0,1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0302569999999 true false

[1,0] -> 1;
[1] -> 1;
[0,0,0] -> 0;
[3,2,0] -> 5;
[1,1] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0328079999999 true false

[1,0] -> 1;
[0,1] -> 1;
[2] -> 2;
[1,1,2] -> 4;
[0,0,2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0313839999999 true false

[2,3] -> 5;
[3,2,1] -> 6;
[1] -> 1;
[3,2,3] -> 8;
[1,2,3] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033496 true false

[3,1,3] -> 7;
[2,3] -> 5;
[0,0] -> 0;
[2] -> 2;
[1,3,3] -> 7;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031221 true false

[1] -> 1;
[0,2] -> 2;
[2,0,1] -> 3;
[3,1] -> 4;
[2,0,2] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0314410000001 true false

[2,1] -> 3;
[2] -> 2;
[3] -> 3;
[0,0,0] -> 0;
[1,0,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030708 true false

[2,1,0] -> 3;
[3,2,3] -> 8;
[3,3] -> 6;
[1,2,0] -> 3;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0311730000001 true false

[2,2,3] -> 7;
[1] -> 1;
[3,1,3] -> 7;
[0] -> 0;
[2,1] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.032516 true false

[0] -> 0;
[2,0] -> 2;
[0,1,3] -> 4;
[0,2,0] -> 2;
[1,1,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0311810000001 true false

[1,1] -> 2;
[1,2] -> 3;
[3,0,1] -> 4;
[3] -> 3;
[2,0,3] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0439140000001 true false

[1,1] -> 2;
[2] -> 2;
[2,1] -> 3;
[1,3] -> 4;
[1,2,2] -> 5;
[2,2,0] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0537039999999 true false

[0] -> 0;
[3] -> 3;
[0,3] -> 3;
[3,1,1] -> 5;
[1] -> 1;
[1,0,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.043482 true false

[0] -> 0;
[1,1] -> 2;
[1,2] -> 3;
[0,3,1] -> 4;
[0,3,2] -> 5;
[2,1] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.065842 true false

[3,1,3] -> 7;
[0] -> 0;
[1,2,2] -> 5;
[2,3] -> 5;
[3] -> 3;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0421799999999 true false

[2] -> 2;
[3] -> 3;
[1,3,2] -> 6;
[0,1,1] -> 2;
[0] -> 0;
[2,1] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0461459999999 true false

[3] -> 3;
[2,2,1] -> 5;
[0,2,1] -> 3;
[1] -> 1;
[2,3,0] -> 5;
[1,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0413349999999 true false

[1,0,3] -> 4;
[0,2,1] -> 3;
[3] -> 3;
[0] -> 0;
[2,3] -> 5;
[2,2,2] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0437890000001 true false

[2,2,3] -> 7;
[1] -> 1;
[2] -> 2;
[1,3] -> 4;
[3,1,0] -> 4;
[3,2,1] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0621269999999 true false

[0,3,1] -> 4;
[3,3] -> 6;
[2] -> 2;
[3,0,0] -> 3;
[0,0,0] -> 0;
[0,1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.05576 true false

[2] -> 2;
[3] -> 3;
[3,2,3] -> 8;
[3,0] -> 3;
[2,0,1] -> 3;
[0,0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.078602 true false

[2,2,0] -> 4;
[1,3,1] -> 5;
[1] -> 1;
[1,2,0] -> 3;
[3] -> 3;
[0,0] -> 0;
[1,0,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.062422 true false

[3,1] -> 4;
[1,2,2] -> 5;
[2,1,0] -> 3;
[0,1] -> 1;
[0] -> 0;
[2] -> 2;
[3,0,0] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.055175 true false

[3] -> 3;
[0,3] -> 3;
[3,3] -> 6;
[1] -> 1;
[1,0,0] -> 1;
[0] -> 0;
[3,2] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0557879999999 true false

[0,3] -> 3;
[2] -> 2;
[1,3,0] -> 4;
[3,3,1] -> 7;
[2,3,0] -> 5;
[1,2] -> 3;
[2,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.041547 true false

[1] -> 1;
[2,0] -> 2;
[3,1,1] -> 5;
[3] -> 3;
[2,1] -> 3;
[2,2] -> 4;
[1,0] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0644609999999 true false

[2,0,3] -> 5;
[0,0,1] -> 1;
[1] -> 1;
[2,3] -> 5;
[3,0] -> 3;
[1,3,3] -> 7;
[0,3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.068102 true false

[0] -> 0;
[3,2] -> 5;
[0,1] -> 1;
[3] -> 3;
[1,1,2] -> 4;
[1,2] -> 3;
[0,0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.070543 true false

[1,0,3] -> 4;
[0,1,1] -> 2;
[0,3,0] -> 3;
[0,3] -> 3;
[1,2,3] -> 6;
[0,2,1] -> 3;
[2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.035367 true false

[0,1] -> 1;
[2,0] -> 2;
[0] -> 0;
[1,3] -> 4;
[1] -> 1;
[3,2] -> 5;
[2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0331450000001 true false

[0] -> 0;
[3,2,0] -> 5;
[1] -> 1;
[2,0,3] -> 5;
[1,2] -> 3;
[2] -> 2;
[3,2,1] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.039094 true false

[2,0] -> 2;
[3,3,3] -> 9;
[3] -> 3;
[0] -> 0;
[1,2] -> 3;
[3,3,1] -> 7;
[3,2,0] -> 5;
[1,1] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0326669999999 true false

[3,3] -> 6;
[2] -> 2;
[2,1] -> 3;
[3] -> 3;
[3,2,3] -> 8;
[2,1,1] -> 4;
[3,0] -> 3;
[1,2,3] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0330100000001 true false

[1,1] -> 2;
[1,2,2] -> 5;
[2,2] -> 4;
[1,3] -> 4;
[1] -> 1;
[3] -> 3;
[0,2] -> 2;
[2,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.034586 true false

[3] -> 3;
[1,0,2] -> 3;
[1,1] -> 2;
[0] -> 0;
[3,1] -> 4;
[0,3] -> 3;
[2,0] -> 2;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0333149999999 true false

[1] -> 1;
[3,2] -> 5;
[1,2,3] -> 6;
[0,3] -> 3;
[3] -> 3;
[0,1,2] -> 3;
[0,0,1] -> 1;
[3,1] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0349229999999 true false

[0,2] -> 2;
[3,2,1] -> 6;
[2,3,0] -> 5;
[3,2,3] -> 8;
[2,0] -> 2;
[0] -> 0;
[3,0,3] -> 6;
[2,0,3] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0508219999999 true false

[1] -> 1;
[0,1] -> 1;
[1,0,0] -> 1;
[2,2] -> 4;
[3,0,2] -> 5;
[1,2,0] -> 3;
[1,3] -> 4;
[0,3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.086517 true false

[1,2] -> 3;
[3,3,0] -> 6;
[1,0] -> 1;
[2] -> 2;
[3,1,3] -> 7;
[2,1] -> 3;
[1] -> 1;
[2,0,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.05366 true false

[1,3,0] -> 4;
[1,2] -> 3;
[2] -> 2;
[3] -> 3;
[1] -> 1;
[2,0,0] -> 2;
[3,0] -> 3;
[2,2,0] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0412389999999 true false

[1] -> 1;
[1,1] -> 2;
[0,2,2] -> 4;
[0,2] -> 2;
[2,0] -> 2;
[2] -> 2;
[1,0] -> 1;
[1,1,3] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0656309999999 true false

[2] -> 2;
[3,0] -> 3;
[3,2,0] -> 5;
[3,0,0] -> 3;
[3,3] -> 6;
[0,1] -> 1;
[2,3] -> 5;
[3,1,3] -> 7;
[1,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0339980000001 true false

[1,3,1] -> 5;
[0,1,1] -> 2;
[1] -> 1;
[1,0] -> 1;
[0,0] -> 0;
[0,1] -> 1;
[0] -> 0;
[3,2,3] -> 8;
[1,1] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0331229999999 true false

[3] -> 3;
[1,1,0] -> 2;
[0,2] -> 2;
[1,2,2] -> 5;
[0,1,2] -> 3;
[1,2] -> 3;
[0,0,3] -> 3;
[2] -> 2;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.036402 true false

[1,2] -> 3;
[2,1,0] -> 3;
[2,0,1] -> 3;
[0,1] -> 1;
[1,1,3] -> 5;
[2,2] -> 4;
[2,1,3] -> 6;
[2,1,1] -> 4;
[3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.047278 true false

[1,0,3] -> 4;
[1] -> 1;
[3] -> 3;
[2,0] -> 2;
[3,2] -> 5;
[0] -> 0;
[2] -> 2;
[0,0,3] -> 3;
[2,1] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.062158 true false

[2,3,1] -> 6;
[2,2] -> 4;
[3] -> 3;
[1,2,2] -> 5;
[1,0,3] -> 4;
[2,3] -> 5;
[3,1,1] -> 5;
[0,1] -> 1;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0437890000001 true false

[3] -> 3;
[1,2] -> 3;
[1,2,0] -> 3;
[0,1,0] -> 1;
[0,1] -> 1;
[2,0] -> 2;
[0] -> 0;
[3,2] -> 5;
[2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0486169999999 true false

[2,1] -> 3;
[0] -> 0;
[1,3,1] -> 5;
[2,2,0] -> 4;
[3,1,1] -> 5;
[2,0] -> 2;
[1,2] -> 3;
[1,0] -> 1;
[3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.082384 true false

[3,0,0] -> 3;
[2,2] -> 4;
[1,0,0] -> 1;
[2,3] -> 5;
[0,0] -> 0;
[3,3,2] -> 8;
[1,1] -> 2;
[0,1] -> 1;
[3,1,0] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0776350000001 true false

[1,1] -> 2;
[1] -> 1;
[0,1,1] -> 2;
[0] -> 0;
[0,0,2] -> 2;
[3] -> 3;
[3,3] -> 6;
[3,1,0] -> 4;
[2,1,2] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0351450000001 true false

[0,1,0] -> 1;
[2,3,1] -> 6;
[1,2,2] -> 5;
[2] -> 2;
[1,0] -> 1;
[3] -> 3;
[2,1] -> 3;
[2,1,1] -> 4;
[1,3] -> 4;
[0,1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0341900000001 true false

[0] -> 0;
[3,0] -> 3;
[3,3,1] -> 7;
[0,3] -> 3;
[0,0] -> 0;
[0,1] -> 1;
[1] -> 1;
[1,1] -> 2;
[3] -> 3;
[0,0,3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0334849999999 true false

[1] -> 1;
[1,3] -> 4;
[3,2,0] -> 5;
[2,1] -> 3;
[2,3,1] -> 6;
[0] -> 0;
[0,1,1] -> 2;
[3,0] -> 3;
[2] -> 2;
[0,2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0655420000001 true false

[3,1] -> 4;
[2] -> 2;
[0,3,1] -> 4;
[0,0,1] -> 1;
[0,1] -> 1;
[3] -> 3;
[3,2] -> 5;
[0,0,3] -> 3;
[3,0,3] -> 6;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0580990000001 true false

[2] -> 2;
[3,2,1] -> 6;
[3,3,1] -> 7;
[2,1,3] -> 6;
[3,2,2] -> 7;
[2,1,2] -> 5;
[0] -> 0;
[2,2,1] -> 5;
[2,2] -> 4;
[2,3,0] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0632189999999 true false

[1] -> 1;
[0,2] -> 2;
[1,3,2] -> 6;
[3,1] -> 4;
[1,1] -> 2;
[1,3] -> 4;
[1,2,1] -> 4;
[0,0] -> 0;
[1,0] -> 1;
[3,0] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.122133 true false

[2,2,1] -> 5;
[1,3] -> 4;
[1] -> 1;
[2,1,2] -> 5;
[1,1,1] -> 3;
[3] -> 3;
[0] -> 0;
[2] -> 2;
[3,1,3] -> 7;
[3,1,2] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0341080000001 true false

[1,0] -> 1;
[0,2,2] -> 4;
[1] -> 1;
[3,2,1] -> 6;
[3,3] -> 6;
[0,1] -> 1;
[3,0] -> 3;
[3,1,0] -> 4;
[2,2,3] -> 7;
[3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.044508 true false

[0,0] -> 0;
[2] -> 2;
[1,1,1] -> 3;
[3,3,3] -> 9;
[0] -> 0;
[3] -> 3;
[0,3,1] -> 4;
[3,3] -> 6;
[2,0] -> 2;
[1,1] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.059287 true false

[1,0,3] -> 4;
[2,3,2] -> 7;
[2] -> 2;
[3,1,2] -> 6;
[3,2] -> 5;
[0,0] -> 0;
[1,2,0] -> 3;
[0] -> 0;
[1] -> 1;
[3,2,0] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0613289999999 true false

