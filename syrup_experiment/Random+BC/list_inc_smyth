[0,3] -> [1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.045521 true false

[0,2,1] -> [1,3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.023218 true false

[3,1] -> [4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0224619999999 true false

[0,0,2] -> [1,1,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.019839 true false

[3,0] -> [4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.049033 true false

[0,0] -> [1,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0211280000001 true false

[0,0,0] -> [1,1,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0193630000001 true false

[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0158570000001 true false

[2,1] -> [3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0182010000001 true false

[2,0] -> [3,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0205000000001 true false

[1,1,0] -> [2,2,1];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0456670000001 true false

[2] -> [3];
[1,1] -> [2,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0282709999999 true false

[0,1,0] -> [1,2,1];
[0] -> [1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.021293 true false

[1] -> [2];
[3,3,0] -> [4,4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.024263 true false

[0,0] -> [1,1];
[0,3,3] -> [1,4,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.024136 true false

[2,3] -> [3,4];
[0,0] -> [1,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.03997 true false

[2,2,3] -> [3,3,4];
[1,0] -> [2,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0282990000001 true false

[0,2] -> [1,3];
[2,3,0] -> [3,4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.016869 true false

[3,0,1] -> [4,1,2];
[2] -> [3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.029397 true false

[3] -> [4];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0200299999999 true false

[1] -> [2];
[0,0] -> [1,1];
[0,2] -> [1,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.032393 true false

[1] -> [2];
[2] -> [3];
[1,0] -> [2,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.022105 true false

[3,0] -> [4,1];
[0,2] -> [1,3];
[1,0] -> [2,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0213309999999 true false

[0,2] -> [1,3];
[2] -> [3];
[2,2] -> [3,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014023 true false

[3,3,0] -> [4,4,1];
[0,2,2] -> [1,3,3];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.023038 true false

[1] -> [2];
[1,3] -> [2,4];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.043498 true false

[2,2,3] -> [3,3,4];
[2] -> [3];
[2,0,1] -> [3,1,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.023158 true false

[0,3] -> [1,4];
[1,1,0] -> [2,2,1];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0288459999999 true false

[0,1,0] -> [1,2,1];
[3] -> [4];
[1,1] -> [2,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0221449999999 true false

[3,1,3] -> [4,2,4];
[3,2] -> [4,3];
[0,0,3] -> [1,1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0228400000001 true false

[0,0] -> [1,1];
[0] -> [1];
[2,3] -> [3,4];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0215949999999 true false

[2] -> [3];
[3,3] -> [4,4];
[0] -> [1];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0261419999999 true false

[2,2,3] -> [3,3,4];
[2,0] -> [3,1];
[0,1,1] -> [1,2,2];
[1,3] -> [2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0443319999999 true false

[1] -> [2];
[1,2] -> [2,3];
[2,0] -> [3,1];
[2,1,3] -> [3,2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.027605 true false

[3] -> [4];
[3,0,0] -> [4,1,1];
[0] -> [1];
[1,3] -> [2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0251639999999 true false

[0,1,1] -> [1,2,2];
[3,3] -> [4,4];
[3] -> [4];
[2] -> [3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014784 true false

[2] -> [3];
[0,1,1] -> [1,2,2];
[1] -> [2];
[1,0,0] -> [2,1,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0356300000001 true false

[2] -> [3];
[1] -> [2];
[0] -> [1];
[2,2,1] -> [3,3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0244709999999 true false

[2,2,1] -> [3,3,2];
[0,3] -> [1,4];
[1] -> [2];
[1,1,3] -> [2,2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0216929999999 true false

[1,0,2] -> [2,1,3];
[3] -> [4];
[1,1,2] -> [2,2,3];
[1,3,0] -> [2,4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0227190000001 true false

[2,3] -> [3,4];
[0,0] -> [1,1];
[2,1,1] -> [3,2,2];
[1,2] -> [2,3];
[0,3,0] -> [1,4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0261559999999 true false

[2,0] -> [3,1];
[0,0,3] -> [1,1,4];
[2] -> [3];
[1,1] -> [2,2];
[0,2] -> [1,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0237990000001 true false

[0,3] -> [1,4];
[1,3,3] -> [2,4,4];
[0,0] -> [1,1];
[3,2,2] -> [4,3,3];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0207869999999 true false

[2,0,2] -> [3,1,3];
[1,3] -> [2,4];
[1] -> [2];
[1,2] -> [2,3];
[3,3,1] -> [4,4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0151310000001 true false

[3,1] -> [4,2];
[0,0,1] -> [1,1,2];
[2,3] -> [3,4];
[1,1] -> [2,2];
[2,3,1] -> [3,4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0199709999999 true false

[1] -> [2];
[2,0,3] -> [3,1,4];
[0] -> [1];
[3,3,0] -> [4,4,1];
[1,3,1] -> [2,4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0328469999999 true false

[1,3] -> [2,4];
[2,3] -> [3,4];
[1,3,0] -> [2,4,1];
[0] -> [1];
[0,2,3] -> [1,3,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0359759999999 true false

[0] -> [1];
[2] -> [3];
[1] -> [2];
[1,0] -> [2,1];
[0,0] -> [1,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0165300000001 true false

[1,2] -> [2,3];
[3,1] -> [4,2];
[2,1,1] -> [3,2,2];
[2,1,0] -> [3,2,1];
[0,2] -> [1,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.019356 true false

[1] -> [2];
[0] -> [1];
[2] -> [3];
[1,1,0] -> [2,2,1];
[1,0] -> [2,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.023017 true false

[3] -> [4];
[2,0,3] -> [3,1,4];
[2,0] -> [3,1];
[3,1] -> [4,2];
[0,0] -> [1,1];
[3,3,3] -> [4,4,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0173709999999 true false

[3] -> [4];
[1,1,3] -> [2,2,4];
[0,3] -> [1,4];
[1] -> [2];
[0] -> [1];
[3,2] -> [4,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0189740000001 true false

[0,2] -> [1,3];
[1,0] -> [2,1];
[3] -> [4];
[2] -> [3];
[1,1,2] -> [2,2,3];
[0] -> [1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0155540000001 true false

[1,2] -> [2,3];
[1,1,1] -> [2,2,2];
[3] -> [4];
[0,3,2] -> [1,4,3];
[2,2,1] -> [3,3,2];
[2,0] -> [3,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0168699999999 true false

[3] -> [4];
[1,2,3] -> [2,3,4];
[2] -> [3];
[2,2,2] -> [3,3,3];
[2,3] -> [3,4];
[3,1] -> [4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0159349999999 true false

[1,3,1] -> [2,4,2];
[1,0] -> [2,1];
[2,2,2] -> [3,3,3];
[2,2,1] -> [3,3,2];
[1,0,0] -> [2,1,1];
[0,3] -> [1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.018139 true false

[0] -> [1];
[1,3] -> [2,4];
[1,1] -> [2,2];
[3,3,2] -> [4,4,3];
[1,0,0] -> [2,1,1];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0178040000001 true false

[0,3] -> [1,4];
[0,0] -> [1,1];
[3] -> [4];
[2] -> [3];
[1,3] -> [2,4];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0161439999999 true false

[1,1,3] -> [2,2,4];
[2,0,2] -> [3,1,3];
[1] -> [2];
[3,2,3] -> [4,3,4];
[2,3,1] -> [3,4,2];
[0] -> [1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.016151 true false

[1] -> [2];
[3] -> [4];
[1,1] -> [2,2];
[1,2] -> [2,3];
[2,1,3] -> [3,2,4];
[3,1] -> [4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0152660000001 true false

[3] -> [4];
[0,1,1] -> [1,2,2];
[0,0,1] -> [1,1,2];
[2,2] -> [3,3];
[0,2] -> [1,3];
[3,0] -> [4,1];
[2,0,2] -> [3,1,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0195200000001 true false

[2,1] -> [3,2];
[3,2] -> [4,3];
[2,3,3] -> [3,4,4];
[2,2,0] -> [3,3,1];
[0] -> [1];
[0,1] -> [1,2];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0235720000001 true false

[2] -> [3];
[0,3] -> [1,4];
[3] -> [4];
[2,0] -> [3,1];
[1,3,3] -> [2,4,4];
[1,2,2] -> [2,3,3];
[3,3,2] -> [4,4,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.016114 true false

[2,1] -> [3,2];
[3,1,0] -> [4,2,1];
[0] -> [1];
[2,1,2] -> [3,2,3];
[1,0] -> [2,1];
[1,2] -> [2,3];
[1,2,2] -> [2,3,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.017047 true false

[0,0] -> [1,1];
[2,3,2] -> [3,4,3];
[2] -> [3];
[1,3] -> [2,4];
[0] -> [1];
[0,2] -> [1,3];
[1,3,3] -> [2,4,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.022418 true false

[0,0,2] -> [1,1,3];
[2,1] -> [3,2];
[2] -> [3];
[3] -> [4];
[0,2] -> [1,3];
[1,3,2] -> [2,4,3];
[3,3] -> [4,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0172689999999 true false

[2] -> [3];
[0,0,1] -> [1,1,2];
[2,0] -> [3,1];
[3,0,0] -> [4,1,1];
[1,2,0] -> [2,3,1];
[3,2,0] -> [4,3,1];
[0,2,1] -> [1,3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0204779999999 true false

[1,2] -> [2,3];
[0,2,0] -> [1,3,1];
[3,0,0] -> [4,1,1];
[3,3,0] -> [4,4,1];
[1] -> [2];
[2] -> [3];
[2,3] -> [3,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.016631 true false

[1,3] -> [2,4];
[1,3,2] -> [2,4,3];
[0,2] -> [1,3];
[1,0] -> [2,1];
[2,1,1] -> [3,2,2];
[1,3,3] -> [2,4,4];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0164150000001 true false

[3] -> [4];
[3,3,0] -> [4,4,1];
[0,2] -> [1,3];
[2,3] -> [3,4];
[0,3,2] -> [1,4,3];
[1,2] -> [2,3];
[2,2,1] -> [3,3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.018073 true false

[1] -> [2];
[2,0] -> [3,1];
[2] -> [3];
[3,1] -> [4,2];
[2,1] -> [3,2];
[0,3] -> [1,4];
[0,1,0] -> [1,2,1];
[1,2] -> [2,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0193039999999 true false

[0,2] -> [1,3];
[1,3,2] -> [2,4,3];
[0,0] -> [1,1];
[2,0,3] -> [3,1,4];
[3,1,0] -> [4,2,1];
[1,2] -> [2,3];
[2,2,3] -> [3,3,4];
[2,2] -> [3,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0184420000001 true false

[1,2] -> [2,3];
[0] -> [1];
[0,3,3] -> [1,4,4];
[0,1] -> [1,2];
[3,0] -> [4,1];
[1,0,1] -> [2,1,2];
[1] -> [2];
[3,1,3] -> [4,2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0174709999999 true false

[2] -> [3];
[1] -> [2];
[3,2] -> [4,3];
[3,0,3] -> [4,1,4];
[1,0] -> [2,1];
[0,0,1] -> [1,1,2];
[0,2] -> [1,3];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0242149999999 true false

[3,1] -> [4,2];
[0,1] -> [1,2];
[3,3,0] -> [4,4,1];
[3,1,0] -> [4,2,1];
[1,3,1] -> [2,4,2];
[1] -> [2];
[1,1] -> [2,2];
[2,2,0] -> [3,3,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0427669999999 true false

[0,2] -> [1,3];
[2,2] -> [3,3];
[1,1] -> [2,2];
[3,0,1] -> [4,1,2];
[0,2,0] -> [1,3,1];
[1] -> [2];
[0,3] -> [1,4];
[3,3] -> [4,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.028626 true false

[0,3] -> [1,4];
[3,0] -> [4,1];
[3,0,0] -> [4,1,1];
[3] -> [4];
[0,1,3] -> [1,2,4];
[2,3] -> [3,4];
[2,0] -> [3,1];
[1,1,3] -> [2,2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.025576 true false

[2,0,3] -> [3,1,4];
[1,1,0] -> [2,2,1];
[1] -> [2];
[0,1] -> [1,2];
[0,3] -> [1,4];
[3,2,3] -> [4,3,4];
[0,2] -> [1,3];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.045251 true false

[3,2] -> [4,3];
[0,2] -> [1,3];
[1,0,0] -> [2,1,1];
[1] -> [2];
[0] -> [1];
[2,2] -> [3,3];
[0,1,1] -> [1,2,2];
[3,2,3] -> [4,3,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.016157 true false

[3,2] -> [4,3];
[0] -> [1];
[2,0,2] -> [3,1,3];
[1,2,2] -> [2,3,3];
[3,3,3] -> [4,4,4];
[0,3] -> [1,4];
[1,2] -> [2,3];
[2,0] -> [3,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.020258 true false

[3] -> [4];
[1,3,1] -> [2,4,2];
[0,0] -> [1,1];
[0] -> [1];
[1] -> [2];
[1,1] -> [2,2];
[2,1,1] -> [3,2,2];
[1,3] -> [2,4];
[3,2,3] -> [4,3,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0264890000001 true false

[1] -> [2];
[0,0,1] -> [1,1,2];
[3,3] -> [4,4];
[0,3,2] -> [1,4,3];
[3] -> [4];
[2,2] -> [3,3];
[0,0] -> [1,1];
[3,1,2] -> [4,2,3];
[1,3] -> [2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0266569999999 true false

[3,3] -> [4,4];
[3] -> [4];
[1,0] -> [2,1];
[2,1,2] -> [3,2,3];
[3,2,0] -> [4,3,1];
[3,0,3] -> [4,1,4];
[1,0,1] -> [2,1,2];
[2,0,2] -> [3,1,3];
[1,3] -> [2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0308210000001 true false

[2] -> [3];
[2,2,3] -> [3,3,4];
[1,0] -> [2,1];
[1,2,2] -> [2,3,3];
[1,3] -> [2,4];
[0,3,3] -> [1,4,4];
[0] -> [1];
[1,1] -> [2,2];
[3,1] -> [4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0197479999999 true false

[0,2] -> [1,3];
[1,3,3] -> [2,4,4];
[3,1] -> [4,2];
[0] -> [1];
[2,1] -> [3,2];
[1] -> [2];
[3,3] -> [4,4];
[2,3] -> [3,4];
[3,0] -> [4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.020714 true false

[0,3,1] -> [1,4,2];
[0,1] -> [1,2];
[1] -> [2];
[3,3,0] -> [4,4,1];
[2] -> [3];
[0,0] -> [1,1];
[2,0] -> [3,1];
[3] -> [4];
[2,3] -> [3,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.016842 true false

[0,0] -> [1,1];
[1,3,1] -> [2,4,2];
[0,2,2] -> [1,3,3];
[3,3,3] -> [4,4,4];
[1,2,0] -> [2,3,1];
[0,2] -> [1,3];
[2,3] -> [3,4];
[2,1] -> [3,2];
[3,1] -> [4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0700870000001 true false

[2,0,1] -> [3,1,2];
[0,1] -> [1,2];
[2] -> [3];
[3,0,2] -> [4,1,3];
[0,0] -> [1,1];
[1,3,1] -> [2,4,2];
[0,2,1] -> [1,3,2];
[3] -> [4];
[3,3] -> [4,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.026165 true false

[1,1] -> [2,2];
[0,3] -> [1,4];
[0] -> [1];
[2,2] -> [3,3];
[2] -> [3];
[1] -> [2];
[3] -> [4];
[1,3] -> [2,4];
[1,0,3] -> [2,1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.025922 true false

[3,2] -> [4,3];
[0] -> [1];
[3,1] -> [4,2];
[1,2,1] -> [2,3,2];
[0,2,2] -> [1,3,3];
[0,0,2] -> [1,1,3];
[3] -> [4];
[0,0,3] -> [1,1,4];
[1,1,0] -> [2,2,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.022099 true false

[2] -> [3];
[3] -> [4];
[1] -> [2];
[0,1] -> [1,2];
[1,1] -> [2,2];
[3,2] -> [4,3];
[0,2] -> [1,3];
[2,1,2] -> [3,2,3];
[2,3,2] -> [3,4,3];
[1,0,3] -> [2,1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0200620000001 true false

[3,2,2] -> [4,3,3];
[3] -> [4];
[0,2] -> [1,3];
[1,0] -> [2,1];
[2,2] -> [3,3];
[2] -> [3];
[0] -> [1];
[1,1,3] -> [2,2,4];
[1] -> [2];
[2,2,3] -> [3,3,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0175710000001 true false

[0] -> [1];
[0,1,2] -> [1,2,3];
[1,0] -> [2,1];
[2] -> [3];
[3] -> [4];
[1,0,1] -> [2,1,2];
[3,2,2] -> [4,3,3];
[1,1,2] -> [2,2,3];
[0,1,0] -> [1,2,1];
[2,0] -> [3,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.02405 true false

[1] -> [2];
[0] -> [1];
[0,1] -> [1,2];
[2,3] -> [3,4];
[3,2,0] -> [4,3,1];
[3,0,2] -> [4,1,3];
[3] -> [4];
[1,3] -> [2,4];
[1,1,1] -> [2,2,2];
[2,3,3] -> [3,4,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.026057 true false

[3,0] -> [4,1];
[2] -> [3];
[1,0] -> [2,1];
[1,2,1] -> [2,3,2];
[3,1,3] -> [4,2,4];
[2,0,3] -> [3,1,4];
[0,3,3] -> [1,4,4];
[1,1] -> [2,2];
[0,2] -> [1,3];
[1,0,3] -> [2,1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.029313 true false

[1,0,3] -> [2,1,4];
[1,1,1] -> [2,2,2];
[1,0] -> [2,1];
[3,0,1] -> [4,1,2];
[0] -> [1];
[3,0] -> [4,1];
[0,0,0] -> [1,1,1];
[3,1,3] -> [4,2,4];
[2,0] -> [3,1];
[1,2,1] -> [2,3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.01584 true false

[3,1,1] -> [4,2,2];
[0,0,0] -> [1,1,1];
[2,3] -> [3,4];
[1,2] -> [2,3];
[2,2] -> [3,3];
[3] -> [4];
[0] -> [1];
[2,1,1] -> [3,2,2];
[3,2,2] -> [4,3,3];
[3,1] -> [4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0296719999999 true false

[1,0,3] -> [2,1,4];
[3] -> [4];
[0] -> [1];
[2] -> [3];
[0,1] -> [1,2];
[2,0] -> [3,1];
[0,0] -> [1,1];
[1] -> [2];
[1,1,0] -> [2,2,1];
[2,1] -> [3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0264420000001 true false

[1,2] -> [2,3];
[0,3] -> [1,4];
[1] -> [2];
[0,0] -> [1,1];
[2,0,1] -> [3,1,2];
[0] -> [1];
[2,0,2] -> [3,1,3];
[3,3] -> [4,4];
[0,3,3] -> [1,4,4];
[3,2,1] -> [4,3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0352109999999 true false

[2,1] -> [3,2];
[0] -> [1];
[0,2] -> [1,3];
[1,3,3] -> [2,4,4];
[0,0,1] -> [1,1,2];
[3,0,2] -> [4,1,3];
[1,0,2] -> [2,1,3];
[0,2,2] -> [1,3,3];
[2,1,2] -> [3,2,3];
[2,2,3] -> [3,3,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0555879999999 true false

