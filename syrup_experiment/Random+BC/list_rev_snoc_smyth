[3] -> [3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00578900000005 false false

[1,2,2] -> [2,2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.022993 false true

[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00537899999995 false false

[1,2,2] -> [2,2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0244279999999 false true

[2] -> [2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00561399999992 false false

[3,2] -> [2,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010759 false true

[0,2,3] -> [3,2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0230799999999 true true

[0,3,2] -> [2,3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0205739999999 true true

[2,1,0] -> [0,1,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0138340000001 true true

[3] -> [3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00597199999993 false false

[2,2,3] -> [3,2,2];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00966199999993 true true

[2,2] -> [2,2];
[3,0,2] -> [2,0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010225 true true

[2,0] -> [0,2];
[2,2] -> [2,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00865500000009 false true

[2,3] -> [3,2];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00897499999996 false true

[2,3] -> [3,2];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0082910000001 false true

[3] -> [3];
[0,1] -> [1,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00972499999989 false true

[1] -> [1];
[3,0] -> [0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00836000000004 false true

[3,3,2] -> [2,3,3];
[1] -> [1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011199 true true

[2,3] -> [3,2];
[3] -> [3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010029 false true

[3] -> [3];
[3,0,3] -> [3,0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00621700000011 false false

[3] -> [3];
[0,1,0] -> [0,1,0];
[0,3] -> [3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00966999999991 true true

[3,2] -> [2,3];
[1] -> [1];
[2,3] -> [3,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010174 false true

[0,2] -> [2,0];
[2] -> [2];
[0,1,2] -> [2,1,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0114189999999 true true

[2] -> [2];
[1,0,1] -> [1,0,1];
[0,0,1] -> [1,0,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0119970000001 true true

[1] -> [1];
[3,1] -> [1,3];
[0,1,2] -> [2,1,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0115089999999 true true

[1,0,0] -> [0,0,1];
[0] -> [0];
[1,0] -> [0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0106069999999 false true

[2,3] -> [3,2];
[3] -> [3];
[2,2] -> [2,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0112610000001 false true

[1] -> [1];
[2,2,1] -> [1,2,2];
[2,1,1] -> [1,1,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0126009999999 true true

[0,2,3] -> [3,2,0];
[0] -> [0];
[3] -> [3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00997699999994 true true

[2,1] -> [1,2];
[1] -> [1];
[1,3,0] -> [0,3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.016192 true true

[0] -> [0];
[2] -> [2];
[1,1] -> [1,1];
[1] -> [1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00611400000003 false false

[0,2] -> [2,0];
[1,1,0] -> [0,1,1];
[2,3,2] -> [2,3,2];
[3,3] -> [3,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00992399999996 true true

[2,1] -> [1,2];
[2,1,1] -> [1,1,2];
[3,1] -> [1,3];
[3,2] -> [2,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0129939999999 false true

[1] -> [1];
[2,3] -> [3,2];
[3,1] -> [1,3];
[1,3,3] -> [3,3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0120850000001 false true

[0,1] -> [1,0];
[2,2,0] -> [0,2,2];
[0,0,1] -> [1,0,0];
[1,3] -> [3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0107620000001 true true

[0,2] -> [2,0];
[0] -> [0];
[1,1] -> [1,1];
[0,0] -> [0,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0111730000001 false true

[2,2,3] -> [3,2,2];
[1] -> [1];
[3,2,0] -> [0,2,3];
[3,0,1] -> [1,0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0107579999999 true true

[2] -> [2];
[0] -> [0];
[0,2] -> [2,0];
[0,2,3] -> [3,2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0103509999999 true true

[1,2] -> [2,1];
[1,2,0] -> [0,2,1];
[3] -> [3];
[3,0] -> [0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0103329999999 true true

[1,3] -> [3,1];
[0,1,2] -> [2,1,0];
[1,2,0] -> [0,2,1];
[1,2] -> [2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0101070000001 true true

[0,2] -> [2,0];
[3,0,3] -> [3,0,3];
[1,1] -> [1,1];
[2] -> [2];
[0,2,3] -> [3,2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0132100000001 true true

[0,1,2] -> [2,1,0];
[2,2,0] -> [0,2,2];
[1,2,1] -> [1,2,1];
[3] -> [3];
[3,2,0] -> [0,2,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0107700000001 true true

[2,3] -> [3,2];
[2,1] -> [1,2];
[0] -> [0];
[1,2,2] -> [2,2,1];
[2,2,2] -> [2,2,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0105470000001 false true

[0,2,2] -> [2,2,0];
[3] -> [3];
[2,2] -> [2,2];
[0,2,3] -> [3,2,0];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0102730000001 true true

[2,1,1] -> [1,1,2];
[0] -> [0];
[3] -> [3];
[2] -> [2];
[1,3] -> [3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0100640000001 false true

[0,3,2] -> [2,3,0];
[3] -> [3];
[3,3] -> [3,3];
[2,0,1] -> [1,0,2];
[1,0,3] -> [3,0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.013782 true true

[1] -> [1];
[0,1,2] -> [2,1,0];
[3,0] -> [0,3];
[3] -> [3];
[2] -> [2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010878 true true

[0] -> [0];
[3] -> [3];
[0,1] -> [1,0];
[1,3,3] -> [3,3,1];
[1,2] -> [2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0101259999999 false true

[1,3] -> [3,1];
[2,3] -> [3,2];
[3,0] -> [0,3];
[3,3] -> [3,3];
[2] -> [2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010669 false true

[1,2] -> [2,1];
[2,2] -> [2,2];
[0,3] -> [3,0];
[1,1,1] -> [1,1,1];
[3,2] -> [2,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0132490000001 false true

[2] -> [2];
[0,3] -> [3,0];
[1,0] -> [0,1];
[3,2] -> [2,3];
[1] -> [1];
[3,1] -> [1,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0114100000001 false true

[2,1] -> [1,2];
[1,3] -> [3,1];
[1] -> [1];
[2] -> [2];
[0,0] -> [0,0];
[3,1] -> [1,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0105410000001 false true

[2] -> [2];
[2,3,0] -> [0,3,2];
[2,2,2] -> [2,2,2];
[3,1] -> [1,3];
[0,1,2] -> [2,1,0];
[3,3,2] -> [2,3,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0118440000001 true true

[2] -> [2];
[3] -> [3];
[3,1,1] -> [1,1,3];
[1,2] -> [2,1];
[3,0] -> [0,3];
[2,0] -> [0,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0116640000001 false true

[2,0] -> [0,2];
[1,3] -> [3,1];
[3] -> [3];
[1,1] -> [1,1];
[3,0] -> [0,3];
[0,3,3] -> [3,3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011933 false true

[3] -> [3];
[3,1,0] -> [0,1,3];
[1] -> [1];
[0] -> [0];
[1,1] -> [1,1];
[2,1] -> [1,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0105410000001 true true

[3,0] -> [0,3];
[3,1,2] -> [2,1,3];
[3,2,2] -> [2,2,3];
[3,1,3] -> [3,1,3];
[3] -> [3];
[1,2,0] -> [0,2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0124559999999 true true

[0,1] -> [1,0];
[3,2] -> [2,3];
[1] -> [1];
[0,0] -> [0,0];
[2,3,0] -> [0,3,2];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0111979999999 true true

[0,1] -> [1,0];
[1,3,1] -> [1,3,1];
[2,2] -> [2,2];
[0,0] -> [0,0];
[2,0] -> [0,2];
[3,0] -> [0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0111010000001 true true

[0,0] -> [0,0];
[1] -> [1];
[0] -> [0];
[3] -> [3];
[0,1,2] -> [2,1,0];
[1,2] -> [2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0105510000001 true true

[2,2,1] -> [1,2,2];
[1,2,3] -> [3,2,1];
[0,2] -> [2,0];
[2] -> [2];
[3,3] -> [3,3];
[3,0,1] -> [1,0,3];
[1,0] -> [0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.012933 true true

[0] -> [0];
[1,0] -> [0,1];
[0,1,0] -> [0,1,0];
[0,2] -> [2,0];
[3,1] -> [1,3];
[2,0,3] -> [3,0,2];
[1,2] -> [2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.012379 true true

[0,1] -> [1,0];
[1,2,1] -> [1,2,1];
[2,0,0] -> [0,0,2];
[2,1] -> [1,2];
[1] -> [1];
[2,3,3] -> [3,3,2];
[3,2,1] -> [1,2,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0217150000001 true true

[1,2,1] -> [1,2,1];
[1,3,1] -> [1,3,1];
[1,2,3] -> [3,2,1];
[3] -> [3];
[2,1,1] -> [1,1,2];
[1,0] -> [0,1];
[1] -> [1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0126620000001 true true

[1] -> [1];
[3,0] -> [0,3];
[3,3] -> [3,3];
[2,2] -> [2,2];
[2,0,1] -> [1,0,2];
[1,2] -> [2,1];
[2,2,2] -> [2,2,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.01304 true true

[1,1] -> [1,1];
[2,2,1] -> [1,2,2];
[0,3] -> [3,0];
[3] -> [3];
[1,2] -> [2,1];
[0,2] -> [2,0];
[3,1,1] -> [1,1,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0165030000001 true true

[2] -> [2];
[2,3,3] -> [3,3,2];
[1,1] -> [1,1];
[2,3,0] -> [0,3,2];
[1,3,1] -> [1,3,1];
[1,2,1] -> [1,2,1];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.026979 true true

[3] -> [3];
[1,3,2] -> [2,3,1];
[0,2] -> [2,0];
[1,2,1] -> [1,2,1];
[1] -> [1];
[0] -> [0];
[0,0] -> [0,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0245540000001 true true

[1,3] -> [3,1];
[2,1] -> [1,2];
[3,2,0] -> [0,2,3];
[3] -> [3];
[1,1] -> [1,1];
[2] -> [2];
[3,0] -> [0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.044216 true true

[1,3] -> [3,1];
[3,0,0] -> [0,0,3];
[3,1,1] -> [1,1,3];
[2,1] -> [1,2];
[3,3,3] -> [3,3,3];
[3] -> [3];
[0,3,0] -> [0,3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0276699999999 true true

[2,3] -> [3,2];
[2,1] -> [1,2];
[0,1,0] -> [0,1,0];
[2,1,2] -> [2,1,2];
[2] -> [2];
[1] -> [1];
[1,0] -> [0,1];
[0,2] -> [2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0120810000001 true true

[3,2,2] -> [2,2,3];
[1] -> [1];
[0,3] -> [3,0];
[0,2,0] -> [0,2,0];
[1,2] -> [2,1];
[2] -> [2];
[0,2] -> [2,0];
[1,0,2] -> [2,0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.049325 true true

[1,0] -> [0,1];
[1,1] -> [1,1];
[0] -> [0];
[3,2,3] -> [3,2,3];
[3,3,1] -> [1,3,3];
[3] -> [3];
[3,1] -> [1,3];
[0,2,1] -> [1,2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.023203 true true

[2,3] -> [3,2];
[1,2,3] -> [3,2,1];
[3,2,1] -> [1,2,3];
[2,0] -> [0,2];
[2] -> [2];
[2,2,0] -> [0,2,2];
[0] -> [0];
[0,3] -> [3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.026746 true true

[2] -> [2];
[1] -> [1];
[3] -> [3];
[1,2,1] -> [1,2,1];
[0,1,2] -> [2,1,0];
[0] -> [0];
[0,0] -> [0,0];
[0,2,0] -> [0,2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.02665 true true

[0,1,2] -> [2,1,0];
[1,3] -> [3,1];
[0] -> [0];
[2,1,3] -> [3,1,2];
[2,1] -> [1,2];
[1,1] -> [1,1];
[0,0] -> [0,0];
[1,0] -> [0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0394249999999 true true

[0,0] -> [0,0];
[3] -> [3];
[3,2] -> [2,3];
[0,1] -> [1,0];
[2,0,3] -> [3,0,2];
[2,3] -> [3,2];
[3,1,2] -> [2,1,3];
[1,3,3] -> [3,3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0255979999999 true true

[2] -> [2];
[0,3] -> [3,0];
[1,0] -> [0,1];
[1] -> [1];
[2,0] -> [0,2];
[2,0,1] -> [1,0,2];
[0] -> [0];
[1,1,1] -> [1,1,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.026063 true true

[1,0,2] -> [2,0,1];
[0,1] -> [1,0];
[2,1] -> [1,2];
[1] -> [1];
[3] -> [3];
[3,0,1] -> [1,0,3];
[3,0,2] -> [2,0,3];
[0,3] -> [3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0689139999999 true true

[1] -> [1];
[3] -> [3];
[0,3,3] -> [3,3,0];
[2,2,1] -> [1,2,2];
[3,0] -> [0,3];
[0,1,2] -> [2,1,0];
[1,1] -> [1,1];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0237420000001 true true

[0,0,3] -> [3,0,0];
[2,3] -> [3,2];
[2,3,1] -> [1,3,2];
[1,1] -> [1,1];
[0,0,1] -> [1,0,0];
[2,1,3] -> [3,1,2];
[3,1] -> [1,3];
[1] -> [1];
[0,0] -> [0,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0283240000001 true true

[1] -> [1];
[1,1,2] -> [2,1,1];
[2] -> [2];
[2,3,1] -> [1,3,2];
[0,0,0] -> [0,0,0];
[0] -> [0];
[0,2,0] -> [0,2,0];
[2,0,1] -> [1,0,2];
[1,0] -> [0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0474039999999 true true

[2,0] -> [0,2];
[1] -> [1];
[3,2,3] -> [3,2,3];
[0] -> [0];
[0,1,2] -> [2,1,0];
[1,0] -> [0,1];
[3,1] -> [1,3];
[2,0,3] -> [3,0,2];
[0,2] -> [2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0336400000001 true true

[3] -> [3];
[3,2] -> [2,3];
[0,3] -> [3,0];
[0] -> [0];
[2,2] -> [2,2];
[2] -> [2];
[0,0,0] -> [0,0,0];
[1,0,3] -> [3,0,1];
[1,1,2] -> [2,1,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0276550000001 true true

[2,3] -> [3,2];
[1,3] -> [3,1];
[0,3] -> [3,0];
[0,3,1] -> [1,3,0];
[1] -> [1];
[2] -> [2];
[1,0,1] -> [1,0,1];
[0,1,1] -> [1,1,0];
[3,3] -> [3,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0477109999999 true true

[1,2] -> [2,1];
[0,2,3] -> [3,2,0];
[1] -> [1];
[1,2,3] -> [3,2,1];
[2] -> [2];
[0,3,3] -> [3,3,0];
[0,2] -> [2,0];
[3] -> [3];
[3,0,1] -> [1,0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0374400000001 true true

[1] -> [1];
[0,0] -> [0,0];
[3,2] -> [2,3];
[0,1] -> [1,0];
[2] -> [2];
[2,3] -> [3,2];
[0] -> [0];
[1,2] -> [2,1];
[2,2,0] -> [0,2,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0207270000001 true true

[1,2] -> [2,1];
[3,3] -> [3,3];
[3,3,1] -> [1,3,3];
[0,0] -> [0,0];
[3,2] -> [2,3];
[1,3] -> [3,1];
[2] -> [2];
[2,3] -> [3,2];
[2,1] -> [1,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0218500000001 true true

[1] -> [1];
[2] -> [2];
[0,3] -> [3,0];
[0,1,3] -> [3,1,0];
[2,3,0] -> [0,3,2];
[1,1,2] -> [2,1,1];
[2,0] -> [0,2];
[3,2] -> [2,3];
[2,3] -> [3,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.035484 true true

[1] -> [1];
[2,1,0] -> [0,1,2];
[3] -> [3];
[1,3,0] -> [0,3,1];
[0] -> [0];
[1,0,2] -> [2,0,1];
[3,2,1] -> [1,2,3];
[0,2,2] -> [2,2,0];
[1,0,3] -> [3,0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0264609999999 true true

[1] -> [1];
[3] -> [3];
[2,3] -> [3,2];
[2,3,2] -> [2,3,2];
[2,0,3] -> [3,0,2];
[1,2] -> [2,1];
[1,1,3] -> [3,1,1];
[0,0] -> [0,0];
[3,1,2] -> [2,1,3];
[1,3,1] -> [1,3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0682139999999 true true

[1,0,0] -> [0,0,1];
[1,1,1] -> [1,1,1];
[0] -> [0];
[3] -> [3];
[0,1,2] -> [2,1,0];
[0,3] -> [3,0];
[1,0,3] -> [3,0,1];
[1,2,2] -> [2,2,1];
[2] -> [2];
[2,0,3] -> [3,0,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0316780000001 true true

[3,1,0] -> [0,1,3];
[2] -> [2];
[3] -> [3];
[3,2] -> [2,3];
[3,0,1] -> [1,0,3];
[3,3,2] -> [2,3,3];
[2,3] -> [3,2];
[3,3] -> [3,3];
[0,3,1] -> [1,3,0];
[3,2,1] -> [1,2,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.040348 true true

[2] -> [2];
[3] -> [3];
[1] -> [1];
[2,2,2] -> [2,2,2];
[2,2] -> [2,2];
[3,0] -> [0,3];
[0] -> [0];
[3,2] -> [2,3];
[0,2,2] -> [2,2,0];
[0,1] -> [1,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.024866 false true

[3,0,2] -> [2,0,3];
[3,2,3] -> [3,2,3];
[1,0] -> [0,1];
[2,0,3] -> [3,0,2];
[1,1,0] -> [0,1,1];
[1,3,3] -> [3,3,1];
[2,0] -> [0,2];
[3,3] -> [3,3];
[2] -> [2];
[2,2,0] -> [0,2,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0287619999999 true true

[1,1] -> [1,1];
[2,3,1] -> [1,3,2];
[2,0,1] -> [1,0,2];
[1] -> [1];
[2,3,0] -> [0,3,2];
[2] -> [2];
[0] -> [0];
[3,2,2] -> [2,2,3];
[1,0] -> [0,1];
[1,0,2] -> [2,0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0284039999999 true true

[3,2] -> [2,3];
[3] -> [3];
[0,2,1] -> [1,2,0];
[2,0,0] -> [0,0,2];
[1,3,1] -> [1,3,1];
[1] -> [1];
[0,3] -> [3,0];
[2,0] -> [0,2];
[1,3,2] -> [2,3,1];
[1,2,1] -> [1,2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0294369999999 true true

[0,3,3] -> [3,3,0];
[1,1,2] -> [2,1,1];
[0] -> [0];
[3,3,2] -> [2,3,3];
[1,1,1] -> [1,1,1];
[0,1,1] -> [1,1,0];
[3,2,3] -> [3,2,3];
[3,2] -> [2,3];
[2,3] -> [3,2];
[0,1] -> [1,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.026975 true true

[3,0] -> [0,3];
[3] -> [3];
[1,2,3] -> [3,2,1];
[1,1,2] -> [2,1,1];
[3,3] -> [3,3];
[3,1,1] -> [1,1,3];
[2,1,2] -> [2,1,2];
[1,2] -> [2,1];
[2,3] -> [3,2];
[2,3,1] -> [1,3,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0313140000001 true true

[2,0,0] -> [0,0,2];
[0,0] -> [0,0];
[1,3,2] -> [2,3,1];
[1,0] -> [0,1];
[2] -> [2];
[0,1] -> [1,0];
[0,3] -> [3,0];
[3,3] -> [3,3];
[3] -> [3];
[0,2,1] -> [1,2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.039027 true true

