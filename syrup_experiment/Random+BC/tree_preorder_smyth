Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      [#3.2 y1, 0, 0]

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.018022 false false

Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [0,3,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      [0, 3, 3]

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( 0
        , Cons
            ( 3
            , Cons (3, tree_preorder (#3.1 y1))
            )
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0160800000001 false false

Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.1 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.1 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.024357 false false

Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [2,2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      [#3.2 y1, #3.2 y1, 1]

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , Cons
            ( #3.2 y1
            , Cons (1, tree_preorder (#3.3 y1))
            )
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.018419 false false

Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,3,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      [#3.2 y1, S (S (#3.2 y1)), #3.2 y1]

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , Cons
            ( S (S (#3.2 y1))
            , Cons (#3.2 y1, tree_preorder (#3.3 y1))
            )
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.014772 false false

Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,0,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      [0, 0, 1]

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( 0
        , Cons
            ( 0
            , Cons (1, tree_preorder (#3.3 y1))
            )
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0142000000001 false false

Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.014079 false false

Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.1 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.1 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0144210000001 false false

Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [3,0,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.032001 false false

Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [2,3,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      [#3.2 y1, S (#3.2 y1), 0]

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , Cons
            ( S (#3.2 y1)
            , Cons (0, tree_preorder (#3.1 y1))
            )
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0156790000001 false false

Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [1,1,0];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [1,1,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.829489 true true

Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,0,0];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.131588 true true

Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [0,1,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0607649999999 true true

Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [1,0,2];
Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.117591 true true

Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.111699 true true

Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,2,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.266416 true true

Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [2,3,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0144399999999 false false

Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0202810000001 false false

Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,0,0];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.148812 true true

Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [2,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.1 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.1 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.013207 false false

Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,1,0];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [1,2,1];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,0,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.656851 true true

Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,2,0];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,2,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.438994 true true

Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,1];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,2,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.181895 true true

Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [2,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.1 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.1 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.013154 false false

Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [0,2,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.17459 true true

Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,2];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [2,3,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.28075 true true

Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ()) -> [2,0,3];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.139839 true true

Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [3,2,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [0,0,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0131899999999 false false

Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,3,1];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [0,2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.339295 true true

Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [0,3,0];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.014036 false false

Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [1,1,3];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [2,0,3];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,1,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.745222 true true

Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,0,3];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [2,1,2];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.373703 true true

Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [0,0,1];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [1,2,2];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.22134 true true

Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [1,3,3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.377574 true true

Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [3,2,3];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [2,1,0];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.197736 true true

Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,2,1];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [3,0,3];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [2,3,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.409978 true true

Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,1,3];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [1,2,0];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [3,2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.364222 true true

Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [2,3];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),1,Leaf ()) -> [1,0,2];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [0,3,3];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.232123 true true

Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,3,1];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,2,0];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [3,0,0];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.18634 true true

Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,2,2];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ()) -> [1,0,3];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.431732 true true

Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,3];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [0,2,2];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [1,0,1];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,0,3];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.660208 true true

Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,0];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,0,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.24503 true true

Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ()) -> [0,3,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [2,1];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [0,1,0];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [2,3,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.328589 true true

Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [2,2,0];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,1,2];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [3,1,0];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,2,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.966303 true true

Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,2,2];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,1,0];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,3];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.26807 true true

Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,1,3];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [0,1,1];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.401319 true true

Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,2];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [2,3];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [0,3,2];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,1,0];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.284633 true true

Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,0];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,3,1];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [3,1,3];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,3,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.074884 true true

Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0,Leaf ()) -> [0,3,1];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [3,1,0];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [2,0];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,1,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.626868 true true

Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,3,2];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [3,0,3];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,1,3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,3,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.582062 true true

Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,1,3];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,1];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.675172 true true

Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,1,0];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,0,2];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [3,0,2];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,3,3];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.570004 true true

Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [1,1,0];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [2,0,2];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,1,3];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.600238 true true

Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,1,1];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,2,0];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,1,0];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,3,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.540676 true true

Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,0];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [3,0,0];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.288422 true true

Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ()) -> [1,0,3];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [2,2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.27225 true true

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,2,3];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [2,1,1];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [1,0,0];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [2,2,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.50482 true true

Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [1,1,3];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [0,3,1];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [1,3,3];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.281027 true true

Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [1,3,1];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [3,2,3];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,3];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,0,3];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.733545 true true

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,0,2];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,1,3];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [2,0,0];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [3,1,3];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.930169 true true

Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [2,0];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [0,1,2];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [0,3,0];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [1,2,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,1,3];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.73075 true true

Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,3,0];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,0];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [3,3,2];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [2,2,2];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,1];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
2.002558 true true

Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,2,2];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [1,0,0];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [2,0,1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [1,1,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.492698 true true

Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,0];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,0];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [3,1,3];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,1];
Node (Leaf (),1,Leaf ()) -> [1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.341655 true true

Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,1];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [3,2,2];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [3,0,0];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [2,1,1];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [0,3,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.479293 true true

Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,3,0];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,2];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,3,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.071272 true true

Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,0,1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [1,0,2];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,2,2];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.599257 true true

Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [0,2,2];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [1,1,3];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.339849 true true

Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [1,3,0];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,2,1];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,1];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,0];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,1,2];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,2,3];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.962059 true true

Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,1,2];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,3];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.644106 true true

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,0];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,2];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [2,3,3];
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [1,1,1];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,1];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.449451 true true

Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,3,2];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [1,0,3];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [3,0,1];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.789599 true true

Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [2,1,2];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [2,3,3];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,2];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [3,3,0];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,1,2];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,0,1];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [1,3,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.958141 true true

Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,0,1];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ()) -> [1,0,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,3,0];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,2,2];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.181154 true true

Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [0,2,2];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,3];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,2,1];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,3];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,3];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,2];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.025408 true true

Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,2,1];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [0,1,3];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [0,3,2];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,1,2];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [0,0,2];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [2,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.901757 true true

Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,1];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,1,2];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [3,1,3];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [1,3,3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.415965 true true

Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,2];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,0];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [2,3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.369444 true true

Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,0,1];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [2,1,0];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,0,3];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [1,0,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,2,0];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,0,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.8627 true true

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,3,2];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [2,0];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,1,1];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,2,3];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [1,0,1];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,3,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.808038 true true

Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,2,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [2,3,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [0,0,2];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [3,2,1];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,3,2];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [1,3,2];
Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.433518 true true

Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,2,0];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [0,3,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [0,3,3];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [1,2,0];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,0,3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,3,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.893716 true true

Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,3,2];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,1,0];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,1,1];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,1,2];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [0,0,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.895651 true true

Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),0,Leaf ()) -> [0,3,0];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ()) -> [2,0,2];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [2,3,1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [1,0,1];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [0,1,1];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.459386 true true

Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,0,1];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [3,3,0];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [3,2,2];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,2,2];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [1,1,2];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [2,3,1];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [2,1,2];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.488346 true true

Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [1,2,2];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,2];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [1,3,3];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [1,0,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [3,2,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.496654 true true

Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,2,0];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [1,3,2];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ()) -> [0,3,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,3,3];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [2,0];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,3,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.94843 true true

Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [1,3,2];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,2,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [0,1,2];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,0];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,1,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.91968 true true

Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,0,2];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [1,2,0];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [1,0,2];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [3,2,0];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.412615 true true

Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [2,2,1];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,0,1];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,3];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,0];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [2,3,1];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,3,0];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,0,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.952488 true true

Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,0,0];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,2];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,1,2];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,3];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,0];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,2,0];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,3,2];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [2,3,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.286538 true true

Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [2,1];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [3,3,2];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,3,2];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [3,2,1];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.481595 true true

Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [2,1,0];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,3,2];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,3];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,1,0];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [1,0,2];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [3,2,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.548951 true true

Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,1];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [2,0,3];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [3,2,0];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,2,0];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [3,3,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.556104 true true

Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [3,2,1];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [1,0,2];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [0,0,0];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,2];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,0,1];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,1,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.096864 true true

Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [2,1,1];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,3,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [3,1,1];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.769536 true true

Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,1,3];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,1,1];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,1,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,3,3];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [2,0,0];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,2,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.815594 true true

Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,3,1];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [2,0];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [2,0,1];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [1,3,3];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.584333 true true

Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [0,2,3];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [2,2,0];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,0];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,2,1];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [3,0,2];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,3,0];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [2,2,2];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,1,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.22162 true true

Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,2,1];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [1,2,3];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,2,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [2,2,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,0,1];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.101018 true true

