(isNonzero,[3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.024013 false false

(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.022727 false false

(isNonzero,[0,3,3]) -> [3,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.030025 false false

(isNonzero,[3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0225359999999 false false

(isNonzero,[1]) -> [1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.023766 false false

(isEven,[0,0]) -> [0,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.022348 false false

(isEven,[3,3,3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.022704 false false

(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0269089999999 false false

(isEven,[1,3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0225290000001 false false

(isEven,[2,3,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [#2.1 y1, #2.1 y1] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.028098 false false

(isNonzero,[1,3,3]) -> [1,3,3];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.023719 false false

(isEven,[1,3]) -> [];
(isNonzero,[1]) -> [1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            xs

          Cons y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            xs

          Cons y2 -> 
            fixListFilter (#2.2 y2) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.042518 false false

(isNonzero,[1,1,2]) -> [1,1,2];
(isNonzero,[0,3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            [3]

          S y2 -> 
            Cons (1, #2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.049051 false false

(isEven,[2,0]) -> [2,0];
(isNonzero,[1,2,1]) -> [1,2,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0236709999999 false false

(isNonzero,[0,0,2]) -> [2];
(isEven,[1,0]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            [2]

          S y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0557389999999 false false

(isEven,[3,0]) -> [0];
(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0284670000001 false false

(isNonzero,[0,3,2]) -> [3,2];
(isNonzero,[2,3,0]) -> [2,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            #2.2 y1

          S y2 -> 
            [2, S (#2.1 y1)] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0533390000001 false false

(isNonzero,[2]) -> [2];
(isNonzero,[1,3]) -> [1,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0235680000001 false false

(isEven,[0,3,3]) -> [0];
(isNonzero,[1,2,1]) -> [1,2,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            [0]

          S y2 -> 
            Cons (1, #2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.049927 false false

(isEven,[1,1]) -> [];
(isEven,[3,3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.025277 false false

(isNonzero,[0,0]) -> [];
(isNonzero,[0]) -> [];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            []

          S y2 -> 
            xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            fixListFilter (#2.2 y1)

          S y2 -> 
            xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0474790000001 false false

(isEven,[0,0,3]) -> [0,0];
(isEven,[1,2]) -> [2];
(isNonzero,[0,2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0977640000001 false false

(isEven,[2,3]) -> [2];
(isEven,[3]) -> [];
(isEven,[1,3,2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            [2] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (2, fixListFilter (#2.2 y2)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0422530000001 false false

(isNonzero,[1]) -> [1];
(isEven,[2,1,1]) -> [2];
(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0799280000001 false false

(isNonzero,[1,3,2]) -> [1,3,2];
(isNonzero,[3]) -> [3];
(isNonzero,[3,0]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            [3]

          Cons y2 -> 
            case isEven (#2.1 y2) of
              T y3 -> 
                [3]

              F y3 -> 
                Cons (1, Cons (#2.1 y2, #2.2 y2)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            [3]

          Cons y2 -> 
            case isEven (#2.1 y2) of
              T y3 -> 
                Cons (3, fixListFilter (#2.2 y2))

              F y3 -> 
                [1, S (S (#2.1 y1)), S (#2.1 y1)] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.224905 false false

(isNonzero,[0,0,3]) -> [3];
(isEven,[0,0]) -> [0,0];
(isEven,[2,1,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.123789 true true

(isEven,[0,0]) -> [0,0];
(isEven,[3,2,2]) -> [2,2];
(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            xs

          S y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0461560000001 false false

(isNonzero,[3,2,1]) -> [3,2,1];
(isNonzero,[0,3]) -> [3];
(isEven,[3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.148034 false false

(isEven,[1,0,3]) -> [0];
(isEven,[2]) -> [2];
(isNonzero,[3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            xs

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          (case #2.2 y1 of
            Nil y2 -> 
              (#2.1 y1, fixListFilter (#2.2 y1))

            Cons y2 -> 
              (0, [])) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.05665 false false

(isNonzero,[0,1,2]) -> [1,2];
(isNonzero,[2,2,0]) -> [2,2];
(isEven,[3,0,2]) -> [0,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.306357 false false

(isNonzero,[3,0]) -> [3];
(isNonzero,[3,1]) -> [3,1];
(isNonzero,[2,2]) -> [2,2];
(isNonzero,[0,2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            #2.2 y1

          S y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            #2.2 y1

          S y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0479230000001 false false

(isEven,[3,3,3]) -> [];
(isNonzero,[1,0,2]) -> [1,2];
(isEven,[1]) -> [];
(isEven,[2,3,0]) -> [2,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.105658 true true

(isEven,[1]) -> [];
(isNonzero,[1]) -> [1];
(isEven,[2,0,3]) -> [2,0];
(isNonzero,[0,3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0926669999999 false false

(isNonzero,[1,3,0]) -> [1,3];
(isEven,[1]) -> [];
(isNonzero,[2,2,0]) -> [2,2];
(isNonzero,[2,0]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.046578 false false

(isEven,[0]) -> [0];
(isEven,[3,2]) -> [2];
(isNonzero,[1,3]) -> [1,3];
(isNonzero,[0]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.089592 false false

(isNonzero,[1,0]) -> [1];
(isNonzero,[1]) -> [1];
(isEven,[3]) -> [];
(isNonzero,[3,0]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.103453 false false

(isEven,[3,1]) -> [];
(isNonzero,[3]) -> [3];
(isNonzero,[1,0]) -> [1];
(isNonzero,[1,2]) -> [1,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0992590000001 false false

(isNonzero,[3,1]) -> [3,1];
(isNonzero,[1]) -> [1];
(isNonzero,[0]) -> [];
(isNonzero,[0,3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            #2.2 y1

          S y2 -> 
            xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            fixListFilter (#2.2 y1)

          S y2 -> 
            xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.062915 false false

(isEven,[3,0]) -> [0];
(isNonzero,[1,3]) -> [1,3];
(isNonzero,[3]) -> [3];
(isEven,[1,0,3]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0]

      F y1 -> 
        xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.092666 false true

(isNonzero,[1,2,0]) -> [1,2];
(isEven,[0,3]) -> [0];
(isNonzero,[1,1,2]) -> [1,1,2];
(isEven,[3,3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0746429999999 false false

(isNonzero,[2,3]) -> [2,3];
(isEven,[2,1]) -> [2];
(isNonzero,[3,2,0]) -> [3,2];
(isNonzero,[2,0]) -> [2];
(isNonzero,[1,2,2]) -> [1,2,2];
(isEven, []) -> [];

=================================
NOSOL

(isEven,[3,1,3]) -> [];
(isNonzero,[0,1]) -> [1];
(isEven,[0]) -> [0];
(isEven,[0,3]) -> [0];
(isEven,[2,3]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.111308 false false

(isNonzero,[0,0,3]) -> [3];
(isEven,[3]) -> [];
(isEven,[0]) -> [0];
(isNonzero,[1]) -> [1];
(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.087149 false false

(isNonzero,[3,3]) -> [3,3];
(isNonzero,[0,1]) -> [1];
(isEven,[1]) -> [];
(isEven,[2,2,2]) -> [2,2,2];
(isNonzero,[2,0]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.108853 false false

(isNonzero,[2]) -> [2];
(isEven,[2]) -> [2];
(isEven,[1,3,2]) -> [2];
(isNonzero,[3,2,3]) -> [3,2,3];
(isEven,[1,1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.094965 false false

(isEven,[1,3,2]) -> [2];
(isEven,[1,2]) -> [2];
(isEven,[3]) -> [];
(isEven,[0]) -> [0];
(isNonzero,[3,3,0]) -> [3,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.104141 true true

(isEven,[0,1]) -> [0];
(isEven,[1,0,3]) -> [0];
(isEven,[2]) -> [2];
(isEven,[2,2,2]) -> [2,2,2];
(isNonzero,[1,1]) -> [1,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.370676 true true

(isEven,[3,0]) -> [0];
(isEven,[1,1]) -> [];
(isEven,[2]) -> [2];
(isNonzero,[2,2,3]) -> [2,2,3];
(isNonzero,[1,0,1]) -> [1,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0830900000001 true true

(isNonzero,[2,0,3]) -> [2,3];
(isNonzero,[1,3,1]) -> [1,3,1];
(isNonzero,[2,2,0]) -> [2,2];
(isEven,[0]) -> [0];
(isNonzero,[3,0,1]) -> [3,1];
(isEven, []) -> [];

=================================
None
(isEven,[2,2,1]) -> [2,2];
(isNonzero,[2,2]) -> [2,2];
(isEven,[1,1]) -> [];
(isEven,[3,0]) -> [0];
(isEven,[0,0]) -> [0,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.073617 false false

(isEven,[3]) -> [];
(isNonzero,[1,3]) -> [1,3];
(isNonzero,[0]) -> [];
(isEven,[2,2]) -> [2,2];
(isNonzero,[3,1,0]) -> [3,1];
(isNonzero,[3,2]) -> [3,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            [#2.1 y1, #2.1 y2] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons
              ( #2.1 y1
              , Cons (#2.1 y2, fixListFilter (#2.2 y2))
              ) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0507640000001 false false

(isNonzero,[2]) -> [2];
(isNonzero,[0,1]) -> [1];
(isNonzero,[3]) -> [3];
(isEven,[2,1,0]) -> [2,0];
(isEven,[0,2,2]) -> [0,2,2];
(isEven,[3,2,3]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.622849 true true

(isNonzero,[0,2]) -> [2];
(isNonzero,[0,3,2]) -> [3,2];
(isEven,[1]) -> [];
(isEven,[3]) -> [];
(isEven,[2,1,3]) -> [2];
(isNonzero,[1,3]) -> [1,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.103207 true true

(isNonzero,[2,0]) -> [2];
(isNonzero,[0,3]) -> [3];
(isNonzero,[3,3]) -> [3,3];
(isNonzero,[3,3,0]) -> [3,3];
(isEven,[1]) -> [];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0877849999999 false false

(isEven,[1,3,1]) -> [];
(isEven,[2]) -> [2];
(isEven,[0]) -> [0];
(isNonzero,[1,2,0]) -> [1,2];
(isNonzero,[0]) -> [];
(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.097004 false false

(isEven,[3,2]) -> [2];
(isEven,[1,1,1]) -> [];
(isNonzero,[1]) -> [1];
(isNonzero,[3]) -> [3];
(isEven,[2]) -> [2];
(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0944300000001 false false

(isNonzero,[2,3]) -> [2,3];
(isNonzero,[1]) -> [1];
(isNonzero,[3,3,0]) -> [3,3];
(isNonzero,[2]) -> [2];
(isEven,[1,1,3]) -> [];
(isEven,[3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.112308 false false

(isEven,[3]) -> [];
(isEven,[3,0,2]) -> [0,2];
(isNonzero,[0]) -> [];
(isEven,[0]) -> [0];
(isEven,[3,1,3]) -> [];
(isNonzero,[3,0]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0928180000001 true true

(isNonzero,[3,1]) -> [3,1];
(isEven,[3]) -> [];
(isEven,[2]) -> [2];
(isNonzero,[2,2]) -> [2,2];
(isNonzero,[0,2]) -> [2];
(isNonzero,[1,3,3]) -> [1,3,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.101756 false false

(isEven,[0]) -> [0];
(isNonzero,[0,2]) -> [2];
(isEven,[2]) -> [2];
(isNonzero,[3,1]) -> [3,1];
(isEven,[0,1]) -> [0];
(isNonzero,[2,3,0]) -> [2,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.441523 false false

(isEven,[3,0]) -> [0];
(isNonzero,[0]) -> [];
(isNonzero,[3,2,3]) -> [3,2,3];
(isEven,[2,0]) -> [2,0];
(isEven,[0,2]) -> [0,2];
(isEven,[3,1,1]) -> [];
(isEven,[3,3,3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.108783 false false

(isNonzero,[2,3]) -> [2,3];
(isNonzero,[2,0]) -> [2];
(isEven,[3]) -> [];
(isEven,[2,1]) -> [2];
(isEven,[3,1,0]) -> [0];
(isNonzero,[0,3]) -> [3];
(isNonzero,[3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.116326 true true

(isEven,[2,3,0]) -> [2,0];
(isNonzero,[3,2]) -> [3,2];
(isNonzero,[2]) -> [2];
(isEven,[1,2]) -> [2];
(isEven,[3,1,3]) -> [];
(isEven,[0,0]) -> [0,0];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.11099 true true

(isEven,[2,1,1]) -> [2];
(isEven,[3]) -> [];
(isNonzero,[3]) -> [3];
(isNonzero,[0]) -> [];
(isNonzero,[3,2]) -> [3,2];
(isEven,[2,1,0]) -> [2,0];
(isEven,[2,3]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.102089 true true

(isEven,[0,3,3]) -> [0];
(isNonzero,[1,2,2]) -> [1,2,2];
(isEven,[0,2]) -> [0,2];
(isEven,[1,2,1]) -> [2];
(isNonzero,[0]) -> [];
(isEven,[3,0,1]) -> [0];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.115711 true true

(isNonzero,[3,2,2]) -> [3,2,2];
(isEven,[1,1]) -> [];
(isEven,[3]) -> [];
(isEven,[1]) -> [];
(isNonzero,[0]) -> [];
(isEven,[3,3,3]) -> [];
(isNonzero,[1]) -> [1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.104188 false false

(isEven,[3,2,1]) -> [2];
(isEven,[0,1,0]) -> [0,0];
(isNonzero,[1]) -> [1];
(isNonzero,[3]) -> [3];
(isNonzero,[3,0]) -> [3];
(isEven,[3,3]) -> [];
(isEven,[1,0,3]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.101814 true true

(isEven,[2,1,1]) -> [2];
(isNonzero,[1]) -> [1];
(isEven,[1]) -> [];
(isEven,[2]) -> [2];
(isNonzero,[2]) -> [2];
(isNonzero,[2,2,2]) -> [2,2,2];
(isEven,[2,1,3]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0973100000001 false false

(isNonzero,[3]) -> [3];
(isEven,[0,3,3]) -> [0];
(isNonzero,[1,1,0]) -> [1,1];
(isNonzero,[1,2]) -> [1,2];
(isEven,[0,0]) -> [0,0];
(isEven,[3,0]) -> [0];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.79789 true true

(isEven,[3,1]) -> [];
(isEven,[1,3,3]) -> [];
(isEven,[0]) -> [0];
(isEven,[3,1,2]) -> [2];
(isNonzero,[3,2]) -> [3,2];
(isNonzero,[1,1]) -> [1,1];
(isNonzero,[0]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0927810000001 false false

(isNonzero,[1]) -> [1];
(isNonzero,[3]) -> [3];
(isEven,[3,3]) -> [];
(isNonzero,[0,0]) -> [];
(isEven,[2,3]) -> [2];
(isEven,[1,2]) -> [2];
(isEven,[0,3,2]) -> [0,2];
(isEven,[2,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.113122 true true

(isNonzero,[1,1]) -> [1,1];
(isEven,[2,2,3]) -> [2,2];
(isEven,[3]) -> [];
(isNonzero,[0,1,3]) -> [1,3];
(isNonzero,[3,3]) -> [3,3];
(isEven,[1]) -> [];
(isNonzero,[0]) -> [];
(isEven,[1,2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.13116 false false

(isEven,[3]) -> [];
(isEven,[2,1,1]) -> [2];
(isEven,[1]) -> [];
(isEven,[0,0,2]) -> [0,0,2];
(isNonzero,[3]) -> [3];
(isEven,[1,1,3]) -> [];
(isEven,[2]) -> [2];
(isNonzero,[1,3,3]) -> [1,3,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.123787 false false

(isEven,[2,1]) -> [2];
(isNonzero,[3,3]) -> [3,3];
(isEven,[3,2,3]) -> [2];
(isNonzero,[3]) -> [3];
(isEven,[0,1,0]) -> [0,0];
(isNonzero,[3,2,1]) -> [3,2,1];
(isEven,[2,2,3]) -> [2,2];
(isNonzero,[2,0]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
2.117288 true true

(isNonzero,[0]) -> [];
(isNonzero,[3]) -> [3];
(isNonzero,[3,0,3]) -> [3,3];
(isEven,[3,2]) -> [2];
(isNonzero,[3,0,2]) -> [3,2];
(isNonzero,[1,3,1]) -> [1,3,1];
(isNonzero,[1,2]) -> [1,2];
(isEven,[3,0,0]) -> [0,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.152837 false false

(isNonzero,[3,2]) -> [3,2];
(isEven,[0]) -> [0];
(isEven,[3]) -> [];
(isEven,[2,2,1]) -> [2,2];
(isEven,[3,3]) -> [];
(isEven,[2,1]) -> [2];
(isEven,[0,0]) -> [0,0];
(isNonzero,[2,2,1]) -> [2,2,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.11477 false false

(isEven,[2,0,2]) -> [2,0,2];
(isEven,[2]) -> [2];
(isEven,[1,0,2]) -> [0,2];
(isEven,[1,3]) -> [];
(isEven,[2,3,0]) -> [2,0];
(isNonzero,[1]) -> [1];
(isNonzero,[1,3]) -> [1,3];
(isNonzero,[2,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.117207 true true

(isEven,[0,1,0]) -> [0,0];
(isNonzero,[1,3,2]) -> [1,3,2];
(isEven,[0,3,0]) -> [0,0];
(isNonzero,[1]) -> [1];
(isEven,[2,2,2]) -> [2,2,2];
(isEven,[2,0]) -> [2,0];
(isNonzero,[0]) -> [];
(isEven,[2,1,3]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.135118 true true

(isNonzero,[3,0]) -> [3];
(isNonzero,[0,3]) -> [3];
(isNonzero,[3,1]) -> [3,1];
(isEven,[1,1]) -> [];
(isNonzero,[1,2,3]) -> [1,2,3];
(isNonzero,[3,2,0]) -> [3,2];
(isEven,[2,0,1]) -> [2,0];
(isNonzero,[3,3]) -> [3,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.125732 true true

(isNonzero,[0]) -> [];
(isNonzero,[3,0]) -> [3];
(isNonzero,[2]) -> [2];
(isNonzero,[2,3]) -> [2,3];
(isEven,[3,3]) -> [];
(isEven,[0,1,1]) -> [0];
(isNonzero,[2,2,2]) -> [2,2,2];
(isEven,[3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.122354 false false

(isEven,[2,3,0]) -> [2,0];
(isNonzero,[2,2,3]) -> [2,2,3];
(isEven,[3,1,2]) -> [2];
(isNonzero,[2]) -> [2];
(isEven,[1,3,1]) -> [];
(isNonzero,[0,3,0]) -> [3];
(isNonzero,[1,1]) -> [1,1];
(isNonzero,[1]) -> [1];
(isNonzero,[2,3]) -> [2,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.167933 true true

(isNonzero,[3,3,3]) -> [3,3,3];
(isNonzero,[2,2,3]) -> [2,2,3];
(isNonzero,[2,2]) -> [2,2];
(isEven,[0,3,1]) -> [0];
(isEven,[1,2]) -> [2];
(isEven,[0,3,2]) -> [0,2];
(isEven,[2,3,3]) -> [2];
(isNonzero,[2]) -> [2];
(isEven,[0,0]) -> [0,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
4.487995 true true

(isEven,[0,3]) -> [0];
(isNonzero,[0,2]) -> [2];
(isNonzero,[2,1,3]) -> [2,1,3];
(isEven,[3,1]) -> [];
(isEven,[0,0]) -> [0,0];
(isNonzero,[0]) -> [];
(isEven,[2]) -> [2];
(isEven,[1,1]) -> [];
(isNonzero,[2,0]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.150661 true true

(isNonzero,[1,3]) -> [1,3];
(isEven,[0]) -> [0];
(isEven,[1]) -> [];
(isNonzero,[2,0,3]) -> [2,3];
(isEven,[1,0]) -> [0];
(isNonzero,[2]) -> [2];
(isNonzero,[2,2]) -> [2,2];
(isNonzero,[3,1]) -> [3,1];
(isEven,[3,0]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.160573 false false

(isNonzero,[1,3,0]) -> [1,3];
(isEven,[2]) -> [2];
(isEven,[3]) -> [];
(isEven,[1,1]) -> [];
(isEven,[0,1]) -> [0];
(isNonzero,[3,2,2]) -> [3,2,2];
(isEven,[0]) -> [0];
(isNonzero,[1,3]) -> [1,3];
(isEven,[0,0,0]) -> [0,0,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.145957 false false

(isEven,[1,0,3]) -> [0];
(isNonzero,[2]) -> [2];
(isEven,[1,1]) -> [];
(isEven,[1,3]) -> [];
(isNonzero,[1]) -> [1];
(isEven,[2,0]) -> [2,0];
(isEven,[0,0,3]) -> [0,0];
(isNonzero,[2,1]) -> [2,1];
(isEven,[3,0,1]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.185353 true true

(isEven,[3]) -> [];
(isEven,[3,2]) -> [2];
(isNonzero,[2]) -> [2];
(isEven,[2,1]) -> [2];
(isEven,[0]) -> [0];
(isEven,[0,0]) -> [0,0];
(isEven,[2,3,2]) -> [2,2];
(isEven,[0,0,3]) -> [0,0];
(isNonzero,[2,3]) -> [2,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.175226 false false

(isNonzero,[2,0,0]) -> [2];
(isEven,[0,1]) -> [0];
(isNonzero,[1,3,3]) -> [1,3,3];
(isNonzero,[0,3,1]) -> [3,1];
(isNonzero,[3]) -> [3];
(isEven,[1,0,2]) -> [0,2];
(isEven,[2,3]) -> [2];
(isEven,[1,1,0]) -> [0];
(isNonzero,[2,3,2]) -> [2,3,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
5.059928 true true

(isNonzero,[1,2,2]) -> [1,2,2];
(isNonzero,[3]) -> [3];
(isEven,[3]) -> [];
(isNonzero,[0,0,0]) -> [];
(isEven,[2]) -> [2];
(isNonzero,[3,1,3]) -> [3,1,3];
(isNonzero,[1,1]) -> [1,1];
(isEven,[1,1,3]) -> [];
(isNonzero,[2,1]) -> [2,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.177957 false false

(isNonzero,[3]) -> [3];
(isEven,[2,0,3]) -> [2,0];
(isNonzero,[0,3]) -> [3];
(isNonzero,[0,2,1]) -> [2,1];
(isEven,[3,0]) -> [0];
(isEven,[1,3,1]) -> [];
(isNonzero,[1,3]) -> [1,3];
(isEven,[3]) -> [];
(isNonzero,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.153807 true true

(isNonzero,[2,1]) -> [2,1];
(isEven,[0,1]) -> [0];
(isEven,[0,1,1]) -> [0];
(isEven,[0,1,0]) -> [0,0];
(isEven,[1]) -> [];
(isNonzero,[0]) -> [];
(isNonzero,[3]) -> [3];
(isEven,[2,0,3]) -> [2,0];
(isEven,[1,1]) -> [];
(isNonzero,[2,0]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.249836 true true

(isEven,[0]) -> [0];
(isNonzero,[2,2]) -> [2,2];
(isNonzero,[3,1]) -> [3,1];
(isNonzero,[3]) -> [3];
(isNonzero,[1,1]) -> [1,1];
(isEven,[2]) -> [2];
(isNonzero,[2]) -> [2];
(isEven,[1,2]) -> [2];
(isEven,[3,0,3]) -> [0];
(isEven,[3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.201355 true true

(isNonzero,[3]) -> [3];
(isNonzero,[2,0,0]) -> [2];
(isEven,[3,3]) -> [];
(isEven,[1,3,2]) -> [2];
(isNonzero,[3,2]) -> [3,2];
(isNonzero,[2,2]) -> [2,2];
(isNonzero,[0,2,2]) -> [2,2];
(isEven,[3,2,2]) -> [2,2];
(isEven,[3,0,2]) -> [0,2];
(isNonzero,[1,1,0]) -> [1,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.29195 true true

(isEven,[3,2,2]) -> [2,2];
(isNonzero,[1,1]) -> [1,1];
(isEven,[3,2,3]) -> [2];
(isEven,[2,1,2]) -> [2,2];
(isEven,[2]) -> [2];
(isNonzero,[2]) -> [2];
(isNonzero,[1]) -> [1];
(isNonzero,[0,0,1]) -> [1];
(isEven,[1]) -> [];
(isEven,[0,0,1]) -> [0,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.252031 true true

(isNonzero,[0]) -> [];
(isEven,[1,1,1]) -> [];
(isEven,[0]) -> [0];
(isEven,[2,3,3]) -> [2];
(isNonzero,[2,1,1]) -> [2,1,1];
(isEven,[2]) -> [2];
(isEven,[2,3]) -> [2];
(isNonzero,[3,2,3]) -> [3,2,3];
(isEven,[0,2]) -> [0,2];
(isEven,[3,2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.239714 true true

(isNonzero,[1,2,2]) -> [1,2,2];
(isEven,[3,2,1]) -> [2];
(isEven,[1,0,2]) -> [0,2];
(isEven,[2,3]) -> [2];
(isNonzero,[3]) -> [3];
(isEven,[2]) -> [2];
(isNonzero,[2]) -> [2];
(isEven,[0,1,3]) -> [0];
(isNonzero,[1]) -> [1];
(isNonzero,[1,2]) -> [1,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
7.140327 true true

(isEven,[3]) -> [];
(isNonzero,[2,0]) -> [2];
(isNonzero,[0,0,1]) -> [1];
(isEven,[3,3]) -> [];
(isNonzero,[3]) -> [3];
(isEven,[1,2]) -> [2];
(isEven,[1,3,0]) -> [0];
(isNonzero,[1,3]) -> [1,3];
(isEven,[0,0,2]) -> [0,0,2];
(isNonzero,[0,2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.259872 true true

(isNonzero,[1,0]) -> [1];
(isNonzero,[3,1,2]) -> [3,1,2];
(isEven,[0]) -> [0];
(isEven,[2]) -> [2];
(isNonzero,[3,3]) -> [3,3];
(isEven,[0,1,0]) -> [0,0];
(isNonzero,[2]) -> [2];
(isEven,[1]) -> [];
(isNonzero,[0,2,2]) -> [2,2];
(isEven,[3,1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.227888 true true

(isEven,[2,1]) -> [2];
(isNonzero,[0,1,0]) -> [1];
(isNonzero,[3]) -> [3];
(isEven,[2,1,2]) -> [2,2];
(isNonzero,[1,3,3]) -> [1,3,3];
(isNonzero,[1]) -> [1];
(isEven,[0,0]) -> [0,0];
(isNonzero,[0,1,3]) -> [1,3];
(isEven,[3,0,1]) -> [0];
(isNonzero,[0,0]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.261238 true true

(isNonzero,[1,3]) -> [1,3];
(isNonzero,[0]) -> [];
(isEven,[0,1]) -> [0];
(isNonzero,[1,2]) -> [1,2];
(isEven,[0]) -> [0];
(isNonzero,[3,2,3]) -> [3,2,3];
(isNonzero,[1]) -> [1];
(isEven,[2,3]) -> [2];
(isEven,[3]) -> [];
(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.205924 false false

