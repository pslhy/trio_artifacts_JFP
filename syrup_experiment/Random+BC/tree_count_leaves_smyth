Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),T (),Leaf ()) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      5

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      S (S (S (S (tree_count_leaves (#3.3 y1)))))

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.015926 false false

Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      S (S (S (S (S (tree_count_leaves (#3.1 y1))))))

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0168200000001 false false

Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.029898 false false

Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      S (S (S (S (S (tree_count_leaves (#3.1 y1))))))

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.015461 false false

Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()))),F (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      S (S (S (S (S (tree_count_leaves (#3.3 y1))))))

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0168570000001 false false

Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))),F (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      S (S (S (S (S (tree_count_leaves (#3.1 y1))))))

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.016406 false false

Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.022802 false false

Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()))) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      5

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      S (S (S (S (tree_count_leaves (#3.1 y1)))))

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.015885 false false

Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),F (),Leaf ()) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      S (S (tree_count_leaves (#3.1 y1)))

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      S (S (tree_count_leaves (#3.1 y1)))

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0128910000001 false false

Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0310919999999 false false

Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()) -> 3;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.080673 true true

Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ()))) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ()))) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
6.437154 true true

Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))) -> 5;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())) -> 4;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.3658 true true

Node (Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ())),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      S (S (S (S (S (tree_count_leaves (#3.3 y1))))))

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0250120000001 false false

Node (Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Leaf ()) -> 4;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.756224 true true

Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
10.046483 true true

Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))),T (),Leaf ()),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.035558 false false

Node (Leaf (),T (),Leaf ()) -> 2;
Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))) -> 4;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> S
    (case tree of
      Node y1 -> 
        tree_count_leaves (#3.3 y1)

      Leaf y1 -> 
        0) in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> S
    (case tree of
      Node y1 -> 
        tree_count_leaves (#3.3 y1)

      Leaf y1 -> 
        0) in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0180800000001 false false

Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())) -> 4;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.78134 true true

Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))),F (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0354 false false

Node (Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ())) -> 5;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
8.573246 true true

Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))),T (),Leaf ()) -> 5;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
9.47223 true true

Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))),T (),Leaf ()) -> 5;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
9.314143 true true

Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))) -> 5;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
9.612019 true true

Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 4;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
9.384055 true true

Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()) -> 5;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
12.814965 true true

Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),T (),Leaf ()) -> 5;
Node (Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),F (),Leaf ()) -> 5;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ())) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      5

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0333029999999 false false

Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))) -> 5;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))),F (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
15.903619 true true

Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())))) -> 6;
Node (Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0490319999999 false false

Node (Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Leaf ()) -> 2;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.635802 true true

Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 5;
Node (Leaf (),T (),Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
18.213211 true true

Node (Leaf (),F (),Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))) -> 6;
Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0458860000001 false false

Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 4;
Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ())) -> 5;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
8.906361 true true

Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 4;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))),T (),Leaf ()) -> 5;
Node (Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))),T (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
11.036799 true true

Node (Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()) -> 5;
Node (Node (Leaf (),T (),Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Leaf ())),F (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())))) -> 5;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
14.034253 true true

Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())) -> 5;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())))),T (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())),F (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
14.526939 true true

Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()),F (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0595900000001 false false

Node (Node (Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()) -> 5;
Node (Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())),T (),Leaf ()) -> 5;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
15.010802 true true

Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),T (),Node (Leaf (),T (),Leaf ())) -> 5;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
17.494005 true true

Node (Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())) -> 4;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Node (Leaf (),F (),Leaf ())) -> 5;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
10.867431 true true

Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()))) -> 6;
Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())),F (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
17.535971 true true

Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),F (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())),F (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
17.344997 true true

Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
32.319405 true true

Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()) -> 4;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
10.032093 true true

Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())) -> 3;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())) -> 5;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))),T (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())),T (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
7.006298 true true

Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Leaf ()))),T (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0598680000001 false false

Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())) -> 5;
Node (Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())),T (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),F (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
15.804627 true true

Node (Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())))) -> 5;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())),F (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())))) -> 6;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
54.182826 true true

Node (Leaf (),F (),Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())) -> 5;
Node (Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())) -> 5;
Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Leaf ()) -> 4;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
23.203984 true true

Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()) -> 4;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))) -> 4;
Node (Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ())) -> 5;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()),T (),Leaf ()) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
23.328675 true true

Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))))) -> 6;
Node (Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())) -> 4;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))),F (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
29.398518 true true

Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))) -> 5;
Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())),T (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()))) -> 5;
Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())) -> 3;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
14.00688 true true

Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 5;
Node (Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ())),T (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
16.697319 true true

Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))))) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),T (),Node (Leaf (),T (),Leaf ())) -> 5;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),F (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())) -> 5;
Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),F (),Leaf ()) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
28.384781 true true

Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Leaf (),F (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.077687 false false

Node (Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))),T (),Leaf ()) -> 5;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()) -> 4;
Node (Leaf (),F (),Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
13.801866 true true

Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),F (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),T (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))),F (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()))) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
19.608997 true true

Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())),T (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())))) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())))) -> 6;
Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
37.81835 true true

Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())))) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Node (Leaf (),T (),Leaf ())) -> 5;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
25.940569 true true

Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()) -> 4;
Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())),T (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ())),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
16.349518 true true

Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()))) -> 5;
Node (Leaf (),F (),Leaf ()) -> 2;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),F (),Leaf ()),F (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())),F (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
9.032426 true true

Node (Leaf (),F (),Node (Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Leaf ()),F (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Leaf (),F (),Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()),F (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 4;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 5;
Node (Leaf (),T (),Leaf ()) -> 2;
Node (Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
6.679857 true true

Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()))) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ())),F (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())) -> 5;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()))),T (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))),F (),Leaf ()),F (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
23.056053 true true

Node (Node (Leaf (),F (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Leaf (),F (),Node (Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())))) -> 6;
Node (Node (Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())),T (),Leaf ()),F (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))),F (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
24.399142 true true

Node (Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ())),T (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))) -> 5;
Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())))) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()) -> 3;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
15.730698 true true

Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))))) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()) -> 3;
Node (Leaf (),T (),Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()),F (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())),T (),Leaf ()) -> 5;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())))) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))),F (),Leaf ()) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
20.305387 true true

Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),T (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Leaf ()) -> 4;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),T (),Leaf ()),F (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()),T (),Leaf ()) -> 5;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))))) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))),T (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
29.635246 true true

Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))))) -> 6;
Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))))) -> 6;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())) -> 3;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
31.551561 true true

Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 5;
Node (Leaf (),F (),Leaf ()) -> 2;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))),T (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()))),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
10.165087 true true

Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),F (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 4;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())))),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())),F (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
20.034148 true true

Node (Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),T (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()) -> 5;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))))) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())))) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())) -> 3;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())) -> 4;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
25.631083 true true

Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),T (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Node (Leaf (),T (),Leaf ())) -> 5;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),T (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 5;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Node (Leaf (),F (),Leaf ())) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
20.201198 true true

Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()))),T (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),T (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()),F (),Leaf ()) -> 5;
Node (Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),T (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()),F (),Leaf ()),F (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),T (),Leaf ())) -> 5;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()) -> 4;
Node (Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
22.417303 true true

Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())))),T (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ())) -> 5;
Node (Leaf (),F (),Node (Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()),F (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 5;
Node (Leaf (),F (),Leaf ()) -> 2;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()))),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())) -> 4;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
9.040301 true true

Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 4;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())))) -> 6;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()) -> 3;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),T (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
25.088726 true true

Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Leaf ()) -> 2;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))) -> 6;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))),F (),Leaf ()) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
11.036023 true true

Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()))) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ())) -> 5;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),F (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))),F (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()))),T (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())) -> 4;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
18.657182 true true

Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()))) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())) -> 4;
Node (Leaf (),T (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Leaf ())) -> 5;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()),T (),Leaf ()) -> 5;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Node (Leaf (),T (),Leaf ())) -> 5;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
23.059468 true true

Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 4;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()))) -> 6;
Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ())),F (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()) -> 4;
Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),T (),Leaf ()) -> 5;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
19.721466 true true

Node (Node (Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),T (),Leaf ()),F (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 5;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()) -> 4;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()))) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),F (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
27.337555 true true

Node (Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()) -> 4;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())))) -> 6;
Node (Leaf (),F (),Leaf ()) -> 2;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())) -> 4;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())))) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
14.765376 true true

Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())) -> 5;
Node (Leaf (),F (),Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())))) -> 5;
Node (Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())))),T (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Leaf ())) -> 5;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))) -> 4;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
31.062643 true true

Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())) -> 4;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 4;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
28.282192 true true

Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))),F (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()))) -> 5;
Node (Leaf (),F (),Leaf ()) -> 2;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 5;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())))) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
15.770274 true true

Node (Node (Leaf (),F (),Leaf ()),F (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))) -> 5;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ()))) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 6;
Node (Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())),F (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()) -> 3;
Node (Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
21.136287 true true

Node (Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),T (),Leaf ())),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())) -> 4;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())) -> 4;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())))) -> 6;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())) -> 4;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())) -> 4;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
21.78282 true true

Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()))),F (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),T (),Leaf ()) -> 5;
Node (Leaf (),F (),Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),F (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ())),T (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
30.187731 true true

Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())) -> 5;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()) -> 3;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())))) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
25.576938 true true

Node (Leaf (),F (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())),F (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))),T (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 4;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))),F (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Leaf ()) -> 2;
Node (Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
10.74665 true true

Node (Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())),T (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())),T (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))))) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()),F (),Leaf ()) -> 5;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())),F (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),T (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 4;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
33.695784 true true

Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())) -> 5;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ()))) -> 5;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),F (),Leaf ()) -> 5;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))) -> 5;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())) -> 4;
Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),T (),Leaf ()) -> 5;
Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ())),F (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
22.074101 true true

Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()))) -> 6;
Node (Leaf (),T (),Node (Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()),F (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()) -> 4;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()),T (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
29.709056 true true

Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())))) -> 6;
Node (Leaf (),T (),Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 4;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())))) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),F (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())),T (),Node (Leaf (),F (),Leaf ())) -> 5;
Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
41.63547 true true

Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()),F (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()) -> 5;
Node (Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()),F (),Leaf ()),F (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())),T (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Leaf ()))) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()),T (),Leaf ()) -> 5;
Node (Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())),F (),Leaf ()) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
54.59961 true true

Node (Leaf (),T (),Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Node (Leaf (),T (),Leaf ()))) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())) -> 4;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())) -> 4;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())) -> 4;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()) -> 5;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())) -> 5;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))),F (),Leaf ()),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
19.738129 true true

Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 4;
Node (Node (Leaf (),F (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),T (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ())),T (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ())))) -> 6;
Node (Leaf (),T (),Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Node (Leaf (),F (),Leaf ()))) -> 6;
Node (Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Leaf ()))),T (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
35.912584 true true

Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))) -> 5;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ()))),F (),Leaf ()),F (),Leaf ()) -> 6;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())))) -> 5;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())) -> 5;
Node (Leaf (),F (),Node (Leaf (),F (),Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()))) -> 6;
Node (Node (Node (Node (Leaf (),F (),Leaf ()),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()),F (),Node (Leaf (),T (),Leaf ())) -> 6;
Node (Leaf (),T (),Node (Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ())) -> 5;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())),F (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
42.505809 true true

Node (Leaf (),T (),Leaf ()) -> 2;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))) -> 4;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ()),F (),Leaf ()) -> 5;
Node (Node (Leaf (),T (),Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Leaf ())),T (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())),F (),Leaf ()) -> 5;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()),F (),Leaf ()) -> 5;
Node (Node (Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),T (),Leaf ()) -> 5;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))))) -> 6;
Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Leaf ()) -> 4;
Node (Leaf (),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())) -> 4;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
16.924595 true true

Node (Leaf (),T (),Node (Leaf (),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ()))) -> 5;
Node (Node (Leaf (),F (),Leaf ()),T (),Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),T (),Leaf ())),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Leaf (),T (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))) -> 5;
Node (Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()),T (),Node (Node (Leaf (),T (),Leaf ()),F (),Leaf ())) -> 6;
Node (Node (Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),T (),Leaf ()) -> 6;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))),T (),Leaf ()) -> 5;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ()))) -> 6;
Node (Node (Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())),T (),Leaf ()),T (),Leaf ()) -> 5;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
38.744009 true true

Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ()))) -> 5;
Node (Leaf (),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ())))) -> 6;
Node (Node (Node (Leaf (),T (),Leaf ()),T (),Leaf ()),F (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ()))),F (),Node (Leaf (),F (),Leaf ())) -> 6;
Node (Node (Leaf (),T (),Leaf ()),T (),Node (Node (Leaf (),F (),Leaf ()),T (),Leaf ())) -> 5;
Node (Node (Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),T (),Leaf ()))),F (),Leaf ()),T (),Leaf ()) -> 6;
Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Leaf ())))) -> 5;
Node (Node (Node (Leaf (),T (),Leaf ()),F (),Node (Leaf (),F (),Leaf ())),F (),Leaf ()) -> 5;
Node (Node (Leaf (),T (),Node (Leaf (),F (),Node (Leaf (),T (),Node (Leaf (),F (),Leaf ())))),F (),Leaf ()) -> 6;
Node (Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Node (Leaf (),F (),Leaf ())))),F (),Leaf ()) -> 6;
Leaf () -> 1;

=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
35.970434 true true

