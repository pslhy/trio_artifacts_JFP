(add,1,[0,3,3]) -> 7;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (S (S (S acc))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (S (S (S (S (countOdd (#2.1 y1) (fixListFold (#2.2 y1))))))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.215068 false false

(countOdd,1,[1]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> add acc acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.181039 false false

(countOdd,2,[2,2]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.176957 false false

(countOdd,3,[1,2,2]) -> 4;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> countOdd acc acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.186601 false false

(countOdd,2,[3]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        3 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.207806 false false

(add,2,[2,2]) -> 6;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> add (add acc acc) acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.186385 false false

(add,2,[3]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S acc)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (S (S (fixListFold (#2.2 y1)))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.218836 false false

(add,1,[2]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> add (add acc acc) acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.171665 false false

(countOdd,0,[1,1,2]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (countOdd acc (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.19392 false false

(add,1,[0,2,0]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> add (add acc acc) acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.178655 false false

(add,2,[1,1,3]) -> 7;
(add,2,[0,2,1]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (S (S (add (#2.1 y1) (#2.1 y1)))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (S (S (countOdd (#2.1 y1) (S (fixListFold (#2.2 y1)))))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.31114 false false

(countOdd,2,[1,3,0]) -> 4;
(countOdd,3,[3,0,1]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S acc) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (countOdd acc (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.282511 false false

(countOdd,0,[0,2]) -> 0;
(add,0,[0]) -> 0;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 0 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.187729 false false

(countOdd,0,[0,3]) -> 1;
(countOdd,1,[2]) -> 1;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.228232 false false

(countOdd,3,[3,1]) -> 5;
(countOdd,3,[2]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (countOdd (#2.1 y1) (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (countOdd (#2.1 y1) (S (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.369005 false false

(add,2,[0,3]) -> 5;
(add,1,[0,1,3]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        5 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (S (S (countOdd (#2.1 y1) (fixListFold (#2.2 y1))))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.255964 false false

(countOdd,1,[2,2]) -> 1;
(countOdd,3,[2]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.225256 false false

(countOdd,2,[2,1,2]) -> 3;
(add,3,[0]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        3 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (countOdd 0 (fixListFold (#2.2 y1))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.309781 false false

(countOdd,1,[0]) -> 1;
(countOdd,2,[1,2,2]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (fixListFold (#2.2 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (fixListFold (#2.2 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.252817 false false

(add,1,[0]) -> 1;
(countOdd,3,[2]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.208599 false false

(add,1,[0]) -> 1;
(add,2,[0]) -> 2;
(add,0,[3]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        add acc (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.375739 false false

(add,1,[3,0,3]) -> 7;
(countOdd,0,[3,2]) -> 1;
(add,1,[0,1]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.537213 true true

(add,3,[3,1,1]) -> 8;
(countOdd,1,[0]) -> 1;
(add,0,[0]) -> 0;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.366344 false false

(countOdd,2,[2,0,2]) -> 2;
(add,1,[3,1,0]) -> 5;
(countOdd,0,[0]) -> 0;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.290826 true true

(countOdd,2,[2,0]) -> 2;
(countOdd,1,[2,0,1]) -> 2;
(add,0,[0,3,1]) -> 4;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.013521 true true

(countOdd,2,[0,3]) -> 3;
(countOdd,3,[3,1]) -> 5;
(countOdd,1,[3,1]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (countOdd acc acc) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.374145 false false

(countOdd,1,[1]) -> 2;
(countOdd,1,[3,1]) -> 3;
(add,0,[3,3,3]) -> 9;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.751306 true true

(countOdd,1,[2,2]) -> 1;
(countOdd,1,[2,3,2]) -> 2;
(countOdd,2,[0]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.558849 false false

(countOdd,2,[2,2]) -> 2;
(countOdd,2,[3]) -> 3;
(add,3,[1,2,0]) -> 6;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.852037 true true

(countOdd,0,[2,0,3]) -> 1;
(countOdd,2,[0]) -> 2;
(add,0,[2,3]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.595875 true true

(add,2,[1,2,2]) -> 7;
(add,2,[2,2,1]) -> 7;
(countOdd,0,[2,1]) -> 1;
(add,2,[0,1,1]) -> 4;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.825029 true true

(countOdd,3,[1]) -> 4;
(countOdd,3,[3,3,2]) -> 5;
(add,2,[2,3]) -> 7;
(add,1,[1]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.322729 true true

(countOdd,3,[0,3]) -> 4;
(add,3,[3,0,1]) -> 7;
(countOdd,1,[3,0,1]) -> 3;
(countOdd,1,[3]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.479565 true true

(add,3,[0,0]) -> 3;
(add,2,[0,3]) -> 5;
(add,3,[0,1]) -> 4;
(countOdd,1,[1,3,2]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.839812 true true

(add,0,[2]) -> 2;
(add,3,[0]) -> 3;
(add,0,[0]) -> 0;
(add,0,[1,3]) -> 4;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.348389 false false

(countOdd,2,[1,2,0]) -> 3;
(add,0,[1,2,0]) -> 3;
(countOdd,0,[0,2]) -> 0;
(add,0,[2,1]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.388453 true true

(countOdd,2,[3,2,1]) -> 4;
(add,3,[2]) -> 5;
(countOdd,2,[3,0]) -> 3;
(countOdd,1,[2,1]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.361737 true true

(countOdd,0,[0,0]) -> 0;
(add,1,[2,2]) -> 5;
(add,0,[0]) -> 0;
(add,3,[3,0,2]) -> 8;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.618298 false false

(add,1,[2,3,2]) -> 8;
(add,3,[0]) -> 3;
(countOdd,2,[2,2,0]) -> 2;
(add,3,[3,2]) -> 8;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.474306 true true

(countOdd,3,[1,3]) -> 5;
(add,3,[3,0]) -> 6;
(add,3,[1]) -> 4;
(countOdd,0,[1,1]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.946583 true true

(add,2,[1]) -> 3;
(countOdd,0,[3]) -> 1;
(add,0,[1,0,0]) -> 1;
(add,3,[3,0,1]) -> 7;
(countOdd,0,[1]) -> 1;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.956661 true true

(countOdd,1,[2,0,1]) -> 2;
(countOdd,3,[1,1]) -> 5;
(countOdd,3,[3]) -> 4;
(add,0,[3,2,0]) -> 5;
(add,1,[3,2,0]) -> 6;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.518092 true true

(add,3,[2]) -> 5;
(countOdd,0,[0,1,2]) -> 1;
(countOdd,1,[1,1,0]) -> 3;
(add,0,[1,3,3]) -> 7;
(add,3,[1,2]) -> 6;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.990096 true true

(add,2,[0,3,0]) -> 5;
(countOdd,1,[3,3,0]) -> 3;
(countOdd,1,[1,3,0]) -> 3;
(countOdd,1,[3,2,1]) -> 3;
(countOdd,2,[0]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.980963 true true

(countOdd,2,[1]) -> 3;
(countOdd,3,[3]) -> 4;
(add,3,[0,2,3]) -> 8;
(add,3,[0]) -> 3;
(add,1,[1,0,1]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.261237 true true

(add,2,[1,2,3]) -> 8;
(add,2,[2,3]) -> 7;
(countOdd,0,[2,2]) -> 0;
(countOdd,1,[1,2,1]) -> 3;
(countOdd,0,[0]) -> 0;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.64286 true true

(countOdd,3,[2,3]) -> 4;
(add,1,[2,1,2]) -> 6;
(countOdd,0,[0]) -> 0;
(countOdd,0,[3,0,2]) -> 1;
(add,3,[1,2,1]) -> 7;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.397194 true true

(add,1,[0,1]) -> 2;
(countOdd,3,[3]) -> 4;
(countOdd,0,[1]) -> 1;
(countOdd,2,[2]) -> 2;
(add,2,[3,1]) -> 6;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.65053 true true

(add,0,[2,1]) -> 3;
(add,3,[1,3]) -> 7;
(add,2,[2,1]) -> 5;
(countOdd,3,[0,0]) -> 3;
(countOdd,2,[3,2]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.580025 true true

(countOdd,2,[0,3,0]) -> 3;
(countOdd,1,[0,1]) -> 2;
(add,3,[0,1]) -> 4;
(add,3,[2]) -> 5;
(add,1,[2,0]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.541321 true true

(countOdd,0,[0]) -> 0;
(add,0,[3]) -> 3;
(add,2,[3,1,0]) -> 6;
(add,0,[1,1,1]) -> 3;
(add,3,[0,0,1]) -> 4;
(add,2,[1,2]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.425032 false false

(countOdd,0,[1,1,0]) -> 2;
(add,3,[2,0,3]) -> 8;
(countOdd,0,[2,2]) -> 0;
(add,0,[2]) -> 2;
(countOdd,1,[1]) -> 2;
(add,3,[2]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.400301 true true

(add,3,[2]) -> 5;
(countOdd,3,[1,0]) -> 4;
(countOdd,1,[0,1,0]) -> 2;
(add,3,[0,1,2]) -> 6;
(countOdd,1,[2,1,3]) -> 3;
(countOdd,1,[0,3,1]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.339014 true true

(add,0,[1]) -> 1;
(add,1,[0,1]) -> 2;
(add,1,[3,1]) -> 5;
(countOdd,3,[3,3]) -> 5;
(countOdd,2,[3,2,1]) -> 4;
(add,1,[2,0,3]) -> 6;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.964818 true true

(add,2,[1,0]) -> 3;
(countOdd,1,[1]) -> 2;
(add,3,[1,3]) -> 7;
(add,1,[3]) -> 4;
(add,3,[0,1,3]) -> 7;
(add,2,[0,2]) -> 4;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.769395 false false

(countOdd,3,[3,2,0]) -> 4;
(add,2,[3,2]) -> 7;
(countOdd,1,[2,1]) -> 2;
(countOdd,1,[2,3]) -> 2;
(add,3,[1,2,0]) -> 6;
(add,2,[2,2]) -> 6;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.099747 true true

(countOdd,0,[1,0,1]) -> 2;
(add,0,[2,2]) -> 4;
(countOdd,3,[2,1]) -> 4;
(countOdd,2,[2,0]) -> 2;
(add,2,[2,0]) -> 4;
(add,1,[3,3]) -> 7;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.536805 true true

(countOdd,3,[2,2]) -> 3;
(add,0,[3,1,3]) -> 7;
(countOdd,0,[3,3,2]) -> 2;
(countOdd,0,[0]) -> 0;
(add,3,[0,1]) -> 4;
(add,0,[2,0,3]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.391562 true true

(add,2,[3,0,1]) -> 6;
(add,1,[1]) -> 2;
(countOdd,0,[2,0]) -> 0;
(countOdd,3,[0]) -> 3;
(add,3,[2,1,0]) -> 6;
(countOdd,1,[2,0,0]) -> 1;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.932765 true true

(countOdd,1,[2,3,3]) -> 3;
(countOdd,2,[1]) -> 3;
(add,3,[0,0]) -> 3;
(add,3,[3]) -> 6;
(countOdd,2,[0,1]) -> 3;
(countOdd,0,[1,0,1]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.56 true true

(add,1,[2]) -> 3;
(countOdd,1,[1,0]) -> 2;
(add,2,[1,3,2]) -> 8;
(add,3,[2,1,3]) -> 9;
(add,2,[1]) -> 3;
(countOdd,1,[0]) -> 1;
(add,0,[3,3]) -> 6;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.012433 false false

(add,1,[1,0,3]) -> 5;
(add,3,[1,0,1]) -> 5;
(add,2,[3,3,2]) -> 10;
(countOdd,0,[3]) -> 1;
(countOdd,2,[0,0,0]) -> 2;
(countOdd,2,[0,2]) -> 2;
(add,1,[1,1]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.254984 true true

(add,3,[1]) -> 4;
(countOdd,1,[3,3]) -> 3;
(add,1,[2,1,1]) -> 5;
(add,0,[1,2,0]) -> 3;
(countOdd,3,[2]) -> 3;
(add,3,[1,1,1]) -> 6;
(countOdd,0,[0,1]) -> 1;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.118192 true true

(add,1,[2,2,2]) -> 7;
(countOdd,0,[2]) -> 0;
(countOdd,0,[1,0,0]) -> 1;
(add,2,[3,2,2]) -> 9;
(add,3,[2,1,3]) -> 9;
(countOdd,1,[1,0,0]) -> 2;
(add,0,[1,3,2]) -> 6;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.453439 true true

(countOdd,0,[2]) -> 0;
(add,3,[2]) -> 5;
(countOdd,1,[1,3,1]) -> 4;
(countOdd,0,[1,1,1]) -> 3;
(countOdd,1,[2,3]) -> 2;
(countOdd,3,[2,3]) -> 4;
(countOdd,2,[2]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.48663 true true

(add,3,[2]) -> 5;
(countOdd,1,[2,3,0]) -> 2;
(add,1,[2]) -> 3;
(add,3,[2,3,2]) -> 10;
(countOdd,3,[0,2]) -> 3;
(countOdd,3,[0,1]) -> 4;
(countOdd,0,[0,0]) -> 0;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.840438 true true

(countOdd,0,[3]) -> 1;
(countOdd,3,[0,1,0]) -> 4;
(countOdd,0,[2,0]) -> 0;
(add,2,[3,3]) -> 8;
(countOdd,3,[1]) -> 4;
(countOdd,2,[3,3]) -> 4;
(add,3,[3]) -> 6;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.460011 true true

(countOdd,3,[3,1,1]) -> 6;
(add,3,[1]) -> 4;
(add,2,[0,2,3]) -> 7;
(add,2,[2]) -> 4;
(add,0,[2,3,3]) -> 8;
(add,3,[3,2]) -> 8;
(countOdd,0,[3]) -> 1;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.230182 true true

(add,3,[3]) -> 6;
(add,1,[1,3,2]) -> 7;
(countOdd,1,[2,2,2]) -> 1;
(countOdd,1,[2]) -> 1;
(add,2,[2]) -> 4;
(add,0,[2,3,2]) -> 7;
(add,3,[2,3,0]) -> 8;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.189214 true true

(countOdd,0,[1,3]) -> 2;
(countOdd,1,[1,3,1]) -> 4;
(add,0,[0,3,3]) -> 6;
(add,2,[1,2,0]) -> 5;
(add,1,[1]) -> 2;
(countOdd,1,[2,0]) -> 1;
(countOdd,0,[0,1,3]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.168517 true true

(countOdd,3,[1]) -> 4;
(add,1,[0,0]) -> 1;
(countOdd,0,[3,2,2]) -> 1;
(countOdd,3,[0,0,2]) -> 3;
(add,1,[3]) -> 4;
(add,3,[2,1]) -> 6;
(add,2,[3]) -> 5;
(add,0,[1]) -> 1;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.175909 true true

(add,1,[1]) -> 2;
(countOdd,0,[2]) -> 0;
(add,3,[3,1]) -> 7;
(countOdd,3,[2,1]) -> 4;
(add,3,[2,0,1]) -> 6;
(add,3,[0,3]) -> 6;
(add,0,[1,1]) -> 2;
(countOdd,1,[0,3]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.535109 true true

(countOdd,1,[1]) -> 2;
(add,2,[3]) -> 5;
(add,0,[2,0]) -> 2;
(countOdd,1,[3,1]) -> 3;
(countOdd,2,[2,3,2]) -> 3;
(add,3,[0,0]) -> 3;
(add,0,[1,0]) -> 1;
(countOdd,3,[2]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.091028 true true

(add,0,[1,3,2]) -> 6;
(countOdd,2,[2]) -> 2;
(countOdd,0,[3,0,3]) -> 2;
(add,2,[1,1,2]) -> 6;
(add,2,[0,1]) -> 3;
(add,1,[0]) -> 1;
(countOdd,3,[1]) -> 4;
(add,1,[1]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.134895 true true

(countOdd,2,[2,2]) -> 2;
(countOdd,2,[3,2]) -> 3;
(countOdd,3,[3,2,1]) -> 5;
(add,0,[1,2]) -> 3;
(countOdd,3,[3,2]) -> 4;
(add,3,[2,3,3]) -> 11;
(add,3,[2,3]) -> 8;
(add,1,[3]) -> 4;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.147098 true true

(add,3,[0]) -> 3;
(add,2,[2,2,0]) -> 6;
(add,0,[1]) -> 1;
(countOdd,3,[3,1]) -> 5;
(countOdd,3,[1,0,2]) -> 4;
(add,1,[0]) -> 1;
(add,0,[3]) -> 3;
(countOdd,2,[3]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.113532 true true

(add,1,[2,3,0]) -> 6;
(countOdd,0,[3,2]) -> 1;
(countOdd,0,[2,3,2]) -> 1;
(countOdd,0,[1]) -> 1;
(add,0,[2,0,2]) -> 4;
(add,1,[2,0,1]) -> 4;
(countOdd,2,[0]) -> 2;
(countOdd,3,[2,1,1]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.305449 true true

(countOdd,3,[1]) -> 4;
(countOdd,3,[1,0]) -> 4;
(countOdd,3,[2]) -> 3;
(add,1,[1,0,2]) -> 4;
(countOdd,3,[1,3]) -> 5;
(add,0,[2,0,0]) -> 2;
(countOdd,1,[2]) -> 1;
(countOdd,0,[0]) -> 0;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.511991 true true

(countOdd,3,[2,0]) -> 3;
(countOdd,1,[1,1]) -> 3;
(add,3,[1,2]) -> 6;
(add,2,[1,3,1]) -> 7;
(countOdd,3,[3,1,2]) -> 5;
(add,0,[1,1]) -> 2;
(add,0,[3,2,1]) -> 6;
(add,3,[2]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.067941 true true

(add,3,[1,0]) -> 4;
(add,3,[3,2]) -> 8;
(add,0,[0,1,1]) -> 2;
(add,1,[2,2,0]) -> 5;
(add,3,[3,2,0]) -> 8;
(add,2,[1]) -> 3;
(countOdd,2,[1]) -> 3;
(add,1,[2]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.889048 false false

(countOdd,0,[0]) -> 0;
(countOdd,2,[1,0,1]) -> 4;
(countOdd,1,[1,1,2]) -> 3;
(add,0,[3,2]) -> 5;
(countOdd,1,[0,3,1]) -> 3;
(add,0,[1,0,0]) -> 1;
(add,3,[2,1,1]) -> 7;
(add,2,[3]) -> 5;
(add,0,[0,2]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.536429 true true

(countOdd,2,[1,3,3]) -> 5;
(countOdd,3,[2,3,2]) -> 4;
(add,0,[2,0,2]) -> 4;
(countOdd,0,[0,1,0]) -> 1;
(add,2,[3]) -> 5;
(add,3,[2]) -> 5;
(countOdd,2,[2,1]) -> 3;
(countOdd,0,[0,1,2]) -> 1;
(countOdd,2,[2]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.574351 true true

(countOdd,3,[1,0,0]) -> 4;
(countOdd,0,[2,2]) -> 0;
(countOdd,1,[3]) -> 2;
(add,3,[0,1]) -> 4;
(countOdd,2,[0]) -> 2;
(add,3,[0]) -> 3;
(add,3,[2,0]) -> 5;
(countOdd,1,[0]) -> 1;
(add,2,[2,3]) -> 7;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.837802 true true

(add,1,[3,3]) -> 7;
(countOdd,0,[1]) -> 1;
(countOdd,2,[2,0,3]) -> 3;
(add,3,[0,2]) -> 5;
(add,0,[2,1,2]) -> 5;
(countOdd,1,[3,0]) -> 2;
(countOdd,1,[1,1,2]) -> 3;
(add,2,[0]) -> 2;
(add,1,[1]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.746396 true true

(countOdd,1,[0,3]) -> 2;
(countOdd,1,[0,0,0]) -> 1;
(countOdd,2,[1,1,1]) -> 5;
(add,2,[2,3]) -> 7;
(add,3,[0,0]) -> 3;
(countOdd,2,[0,3,3]) -> 4;
(countOdd,1,[1]) -> 2;
(add,0,[0]) -> 0;
(countOdd,2,[3]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.755615 true true

(countOdd,2,[3,2,0]) -> 3;
(countOdd,0,[1]) -> 1;
(add,1,[3,1,3]) -> 8;
(add,2,[2,2,0]) -> 6;
(add,2,[1,3,1]) -> 7;
(add,2,[3]) -> 5;
(countOdd,0,[2,1,1]) -> 2;
(countOdd,2,[3,1]) -> 4;
(countOdd,2,[3,0]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.563681 true true

(add,2,[0,2,1]) -> 5;
(countOdd,3,[3,1,2]) -> 5;
(add,1,[0,0]) -> 1;
(add,3,[3]) -> 6;
(add,0,[2]) -> 2;
(countOdd,2,[1,1]) -> 4;
(add,3,[3,3,0]) -> 9;
(countOdd,3,[3,0,3]) -> 5;
(countOdd,3,[0,0]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.645805 true true

(add,0,[2]) -> 2;
(add,3,[1,2]) -> 6;
(add,2,[3,1]) -> 6;
(add,2,[1]) -> 3;
(add,2,[0,2,2]) -> 6;
(add,3,[2,3]) -> 8;
(add,2,[1,0]) -> 3;
(add,1,[1,0,0]) -> 2;
(add,1,[0,1,3]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.108117 false false

(countOdd,3,[1]) -> 4;
(countOdd,3,[0,0,1]) -> 4;
(countOdd,0,[1]) -> 1;
(countOdd,0,[0,0,3]) -> 1;
(add,1,[0,1,3]) -> 5;
(countOdd,1,[1,2,1]) -> 3;
(add,0,[2,1,2]) -> 5;
(countOdd,0,[1,1,1]) -> 3;
(add,2,[2,0,1]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.619763 true true

(add,3,[3,0,0]) -> 6;
(countOdd,3,[2,2,0]) -> 3;
(countOdd,3,[2]) -> 3;
(countOdd,3,[2,0,0]) -> 3;
(countOdd,2,[1]) -> 3;
(countOdd,2,[0,0,0]) -> 2;
(countOdd,3,[0,3,2]) -> 4;
(countOdd,0,[3]) -> 1;
(add,3,[0]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.545729 true true

(add,2,[2]) -> 4;
(add,0,[3]) -> 3;
(add,0,[1,1,0]) -> 2;
(countOdd,3,[0,2]) -> 3;
(add,3,[2,0]) -> 5;
(add,0,[3,0,3]) -> 6;
(countOdd,0,[3]) -> 1;
(add,0,[0,2]) -> 2;
(add,2,[3]) -> 5;
(countOdd,3,[2]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.191291 true true

(countOdd,1,[3,2,0]) -> 2;
(add,3,[3,2,2]) -> 10;
(countOdd,3,[3,3,3]) -> 6;
(countOdd,0,[0,1]) -> 1;
(countOdd,0,[3]) -> 1;
(add,1,[0,2,2]) -> 5;
(countOdd,2,[1]) -> 3;
(add,0,[1]) -> 1;
(countOdd,3,[1]) -> 4;
(add,1,[1,0]) -> 2;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.476984 true true

(countOdd,0,[3]) -> 1;
(add,3,[3,3,1]) -> 10;
(countOdd,3,[1,2,2]) -> 4;
(add,3,[0,1,3]) -> 7;
(add,0,[1,2]) -> 3;
(add,2,[0,2]) -> 4;
(countOdd,0,[1]) -> 1;
(add,2,[1]) -> 3;
(countOdd,0,[0,0]) -> 0;
(countOdd,1,[3,3]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.62956 true true

(countOdd,0,[0]) -> 0;
(countOdd,3,[2,1]) -> 4;
(countOdd,2,[0,2]) -> 2;
(countOdd,0,[0,0]) -> 0;
(countOdd,0,[1,2,1]) -> 2;
(countOdd,2,[2,1]) -> 3;
(add,1,[2]) -> 3;
(add,2,[1]) -> 3;
(add,1,[3,3]) -> 7;
(countOdd,1,[2,3,1]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.577542 true true

(countOdd,3,[3]) -> 4;
(add,1,[3,0,2]) -> 6;
(add,0,[0,3,2]) -> 5;
(countOdd,0,[2,3,1]) -> 2;
(countOdd,0,[3,3]) -> 2;
(countOdd,0,[2,2,0]) -> 0;
(countOdd,1,[0,2,3]) -> 2;
(add,3,[2,0,1]) -> 6;
(countOdd,0,[1,1,2]) -> 2;
(add,0,[1]) -> 1;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.539562 true true

(add,2,[3,0]) -> 5;
(countOdd,3,[0,3,1]) -> 5;
(add,0,[3,3,3]) -> 9;
(add,3,[0,0,0]) -> 3;
(add,3,[3,0]) -> 6;
(add,1,[1]) -> 2;
(add,2,[2,0]) -> 4;
(add,0,[0,1,0]) -> 1;
(add,1,[2]) -> 3;
(add,1,[3,3,1]) -> 8;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.66689 true true

(countOdd,3,[0]) -> 3;
(countOdd,1,[3,1]) -> 3;
(add,0,[2,3,0]) -> 5;
(countOdd,2,[2]) -> 2;
(countOdd,0,[1,0]) -> 1;
(add,0,[3]) -> 3;
(countOdd,3,[2,3]) -> 4;
(add,3,[0]) -> 3;
(countOdd,0,[3,3,1]) -> 3;
(countOdd,3,[1,0]) -> 4;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.294979 true true

(countOdd,1,[1,0,2]) -> 2;
(countOdd,0,[1,3,0]) -> 2;
(countOdd,3,[2]) -> 3;
(countOdd,0,[1,3,1]) -> 3;
(add,2,[3,3,3]) -> 11;
(countOdd,0,[0]) -> 0;
(add,3,[2,2,3]) -> 10;
(add,0,[3,1,0]) -> 4;
(countOdd,0,[3]) -> 1;
(countOdd,3,[0]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.62639 true true

(countOdd,1,[2,2,2]) -> 1;
(countOdd,1,[3,1,3]) -> 4;
(countOdd,2,[0]) -> 2;
(countOdd,0,[0]) -> 0;
(add,1,[0]) -> 1;
(add,3,[3,0,3]) -> 9;
(countOdd,2,[0,1,3]) -> 4;
(add,2,[2,3,3]) -> 10;
(countOdd,3,[2]) -> 3;
(add,3,[2]) -> 5;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.88445 true true

(add,0,[0,0]) -> 0;
(countOdd,2,[2,3,0]) -> 3;
(countOdd,3,[2,0,1]) -> 4;
(add,2,[1,0,2]) -> 5;
(countOdd,3,[3]) -> 4;
(countOdd,0,[1,2]) -> 1;
(countOdd,1,[2,2]) -> 1;
(add,3,[2]) -> 5;
(countOdd,2,[0,2,0]) -> 2;
(add,1,[0,2]) -> 3;
(add, 0, []) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.630582 true true

