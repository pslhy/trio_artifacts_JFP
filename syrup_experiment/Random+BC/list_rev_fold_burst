[2,2,1] -> [1,2,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.5533 true

[1,0] -> [0,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0241 true

[2] -> [2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> x

0.0061 false

[0,0,3] -> [3,0,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.5539 true

[1,3,2] -> [2,3,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

1.2883 true

[0,3] -> [3,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0585 true

[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> x

0.0058 false

[2] -> [2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> x

0.0059 false

[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> x

0.0062 false

[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> x

0.0059 false

[3,1,2] -> [2,1,3];
[2] -> [2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.3185 true

[0,1] -> [1,0];
[3,0] -> [0,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0267 true

[2,3,2] -> [2,3,2];
[1,0] -> [0,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

4.5661 true

[2] -> [2];
[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> x

0.0060 false

[2] -> [2];
[2,2,1] -> [1,2,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.7129 true

[3,0] -> [0,3];
[2] -> [2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0433 true

[0] -> [0];
[3,1] -> [1,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0648 true

[1,3,2] -> [2,3,1];
[0] -> [0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

1.3762 true

[0,1,0] -> [0,1,0];
[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> x

0.1602 false

[1,0] -> [0,1];
[2] -> [2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0245 true

[2,3,0] -> [0,3,2];
[2,3,1] -> [1,3,2];
[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.6450 true

[1,1,0] -> [0,1,1];
[0,3,1] -> [1,3,0];
[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.2033 true

[2,0] -> [0,2];
[0,3,1] -> [1,3,0];
[2,0,1] -> [1,0,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0338 true

[2] -> [2];
[3] -> [3];
[1,1,0] -> [0,1,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.2660 true

[0,2] -> [2,0];
[3,2,0] -> [0,2,3];
[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0447 true

[2,3] -> [3,2];
[3,3,0] -> [0,3,3];
[1] -> [1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0565 true

[0] -> [0];
[2,2,2] -> [2,2,2];
[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> x

0.0041 false

[3] -> [3];
[3,2,1] -> [1,2,3];
[2,2,2] -> [2,2,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.7381 true

[0,2,0] -> [0,2,0];
[0] -> [0];
[0,1,3] -> [3,1,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

52.4091 true

[1] -> [1];
[2,3] -> [3,2];
[2,2,0] -> [0,2,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0871 true

[1,0,1] -> [1,0,1];
[0,1,2] -> [2,1,0];
[0] -> [0];
[3,1,1] -> [1,1,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

22.1288 true

[3,3,1] -> [1,3,3];
[3] -> [3];
[2,2] -> [2,2];
[3,1,2] -> [2,1,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

1.1927 true

[0,0] -> [0,0];
[2] -> [2];
[1,0] -> [0,1];
[0] -> [0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0340 true

[3,3] -> [3,3];
[2] -> [2];
[3] -> [3];
[3,0,3] -> [3,0,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> x

0.0270 false

[0,2,1] -> [1,2,0];
[3,2] -> [2,3];
[0,3,1] -> [1,3,0];
[2] -> [2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.5142 true

[1,1] -> [1,1];
[3,2] -> [2,3];
[2,0] -> [0,2];
[2,0,2] -> [2,0,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.2793 true

[0] -> [0];
[1] -> [1];
[3,2,2] -> [2,2,3];
[3,0,2] -> [2,0,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

1.2143 true

[1,1] -> [1,1];
[0] -> [0];
[2,0,1] -> [1,0,2];
[0,3,0] -> [0,3,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

1.1323 true

[2] -> [2];
[3,0] -> [0,3];
[3,3] -> [3,3];
[3,2,3] -> [3,2,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0612 true

[1,3,1] -> [1,3,1];
[0,1,1] -> [1,1,0];
[2] -> [2];
[0,0,1] -> [1,0,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

9.7112 true

[0] -> [0];
[2,1] -> [1,2];
[3,2] -> [2,3];
[3] -> [3];
[0,2,3] -> [3,2,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0522 true

[1] -> [1];
[1,1,0] -> [0,1,1];
[1,1] -> [1,1];
[3] -> [3];
[0,1,0] -> [0,1,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.2629 true

[2,1,0] -> [0,1,2];
[2,0,3] -> [3,0,2];
[3,2] -> [2,3];
[3,1] -> [1,3];
[1,2] -> [2,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.2591 true

[1,1] -> [1,1];
[3] -> [3];
[0,3,2] -> [2,3,0];
[3,0,0] -> [0,0,3];
[1,2,1] -> [1,2,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

4.8023 true

[0] -> [0];
[3,3] -> [3,3];
[3,1] -> [1,3];
[0,0] -> [0,0];
[0,3,3] -> [3,3,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0652 true

[1,1] -> [1,1];
[3,1,1] -> [1,1,3];
[3,1] -> [1,3];
[1] -> [1];
[3,3,2] -> [2,3,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.1356 true

[3,2,2] -> [2,2,3];
[0,3] -> [3,0];
[3,3,1] -> [1,3,3];
[0,1] -> [1,0];
[2,2,3] -> [3,2,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

1.0370 true

[2,0] -> [0,2];
[1] -> [1];
[1,2,0] -> [0,2,1];
[0,1,0] -> [0,1,0];
[3,0,1] -> [1,0,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0339 true

[3,1] -> [1,3];
[2,0,2] -> [2,0,2];
[2,1,2] -> [2,1,2];
[3,2,1] -> [1,2,3];
[2] -> [2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0601 true

[0] -> [0];
[2,2,1] -> [1,2,2];
[2,0,1] -> [1,0,2];
[1] -> [1];
[3,1] -> [1,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.3945 true

[2,2] -> [2,2];
[1,1,3] -> [3,1,1];
[1] -> [1];
[1,1] -> [1,1];
[2,3] -> [3,2];
[0] -> [0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

7.3583 true

[0,0] -> [0,0];
[0,3,1] -> [1,3,0];
[3,1] -> [1,3];
[3,3,1] -> [1,3,3];
[0] -> [0];
[0,2,3] -> [3,2,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.1227 true

[2,0] -> [0,2];
[0] -> [0];
[1] -> [1];
[3,0,3] -> [3,0,3];
[1,2,2] -> [2,2,1];
[2,1,2] -> [2,1,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0333 true

[1,2] -> [2,1];
[0,0,0] -> [0,0,0];
[1] -> [1];
[0,0] -> [0,0];
[2] -> [2];
[0] -> [0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0243 true

[1] -> [1];
[1,3,3] -> [3,3,1];
[0,0] -> [0,0];
[3,1] -> [1,3];
[2] -> [2];
[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.8127 true

[0,2,2] -> [2,2,0];
[3,1] -> [1,3];
[3,2,2] -> [2,2,3];
[1,1,0] -> [0,1,1];
[1,2,1] -> [1,2,1];
[1,0] -> [0,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.9385 true

[0] -> [0];
[0,0] -> [0,0];
[1,3] -> [3,1];
[2] -> [2];
[3,2,3] -> [3,2,3];
[0,1] -> [1,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0895 true

[0] -> [0];
[3,3] -> [3,3];
[3,2] -> [2,3];
[0,2] -> [2,0];
[2] -> [2];
[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0370 true

[1,3] -> [3,1];
[3,1] -> [1,3];
[1,0] -> [0,1];
[1,2] -> [2,1];
[1] -> [1];
[0] -> [0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0724 true

[0] -> [0];
[2,0] -> [0,2];
[1,3,2] -> [2,3,1];
[2] -> [2];
[0,3,2] -> [2,3,0];
[1] -> [1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0467 true

[3,0,3] -> [3,0,3];
[0,0,0] -> [0,0,0];
[0,3] -> [3,0];
[0,0] -> [0,0];
[2] -> [2];
[3,1,2] -> [2,1,3];
[0] -> [0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.2535 true

[3,2] -> [2,3];
[1,1,1] -> [1,1,1];
[3,0,0] -> [0,0,3];
[0,2] -> [2,0];
[1] -> [1];
[2,2] -> [2,2];
[2] -> [2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0261 true

[2,2] -> [2,2];
[2,3,1] -> [1,3,2];
[0,1] -> [1,0];
[3] -> [3];
[3,3] -> [3,3];
[1,1] -> [1,1];
[2,0] -> [0,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

4.1727 true

[2,2] -> [2,2];
[1,0] -> [0,1];
[3,1,2] -> [2,1,3];
[0,3] -> [3,0];
[0,1] -> [1,0];
[0,0,1] -> [1,0,0];
[3,3,1] -> [1,3,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.1933 true

[3] -> [3];
[1] -> [1];
[2] -> [2];
[0,2] -> [2,0];
[0,3,0] -> [0,3,0];
[1,3,2] -> [2,3,1];
[0,3] -> [3,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0367 true

[0] -> [0];
[2,3,1] -> [1,3,2];
[1,0,1] -> [1,0,1];
[0,0] -> [0,0];
[2,1,3] -> [3,1,2];
[1,2,3] -> [3,2,1];
[0,2] -> [2,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

1.3271 true

[2,3] -> [3,2];
[0,2] -> [2,0];
[2,3,0] -> [0,3,2];
[1,2] -> [2,1];
[1,3] -> [3,1];
[1,3,1] -> [1,3,1];
[2,0] -> [0,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0574 true

[1,2,1] -> [1,2,1];
[2,0] -> [0,2];
[0] -> [0];
[2,1,3] -> [3,1,2];
[0,3,3] -> [3,3,0];
[2,3] -> [3,2];
[0,2] -> [2,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

1.4118 true

[2] -> [2];
[0,1,1] -> [1,1,0];
[3,2,2] -> [2,2,3];
[2,0,1] -> [1,0,2];
[0,2] -> [2,0];
[0,0] -> [0,0];
[3,0,1] -> [1,0,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.3850 true

[3,1] -> [1,3];
[1,0] -> [0,1];
[1] -> [1];
[0,1] -> [1,0];
[3,0,2] -> [2,0,3];
[1,0,0] -> [0,0,1];
[2,2] -> [2,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0386 true

[1,1,2] -> [2,1,1];
[3] -> [3];
[1,0,1] -> [1,0,1];
[2,3,2] -> [2,3,2];
[0,1] -> [1,0];
[0] -> [0];
[2,3] -> [3,2];
[1,1,3] -> [3,1,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.7655 true

[1,2,2] -> [2,2,1];
[0,0] -> [0,0];
[0,3] -> [3,0];
[0,2,1] -> [1,2,0];
[3] -> [3];
[3,0,0] -> [0,0,3];
[2,3,1] -> [1,3,2];
[1,2] -> [2,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.9790 true

[1] -> [1];
[3] -> [3];
[1,2,0] -> [0,2,1];
[0,3] -> [3,0];
[2,0,3] -> [3,0,2];
[1,1] -> [1,1];
[0,2,2] -> [2,2,0];
[1,0] -> [0,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.4648 true

[2,3,2] -> [2,3,2];
[2,2,1] -> [1,2,2];
[3,1,2] -> [2,1,3];
[1] -> [1];
[3] -> [3];
[1,2] -> [2,1];
[2,1,3] -> [3,1,2];
[2,2,2] -> [2,2,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

31.0865 true

[1] -> [1];
[3,1] -> [1,3];
[0,2] -> [2,0];
[2,3] -> [3,2];
[0,3,1] -> [1,3,0];
[2,2] -> [2,2];
[3] -> [3];
[1,2,1] -> [1,2,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0564 true

[0,3,0] -> [0,3,0];
[2,1] -> [1,2];
[0,3] -> [3,0];
[2,2,3] -> [3,2,2];
[0,1,3] -> [3,1,0];
[1,3] -> [3,1];
[2,3,3] -> [3,3,2];
[3,0] -> [0,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.2138 true

[0,2,1] -> [1,2,0];
[1] -> [1];
[1,1] -> [1,1];
[0] -> [0];
[3,2,0] -> [0,2,3];
[2,0,0] -> [0,0,2];
[2] -> [2];
[0,0,3] -> [3,0,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.2916 true

[1,1,2] -> [2,1,1];
[1] -> [1];
[2,2] -> [2,2];
[2] -> [2];
[2,3,1] -> [1,3,2];
[3,3,2] -> [2,3,3];
[3,1] -> [1,3];
[2,0,2] -> [2,0,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.2976 true

[3,3,1] -> [1,3,3];
[3,2] -> [2,3];
[3,1,1] -> [1,1,3];
[0,3,3] -> [3,3,0];
[2,2] -> [2,2];
[2] -> [2];
[0] -> [0];
[3,0,1] -> [1,0,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

1.1261 true

[1,0] -> [0,1];
[1] -> [1];
[0,2,0] -> [0,2,0];
[2] -> [2];
[0,1,2] -> [2,1,0];
[2,0] -> [0,2];
[0] -> [0];
[0,1,3] -> [3,1,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0218 true

[2,0,2] -> [2,0,2];
[0,2,1] -> [1,2,0];
[2,3,2] -> [2,3,2];
[0,3,0] -> [0,3,0];
[1,2,1] -> [1,2,1];
[3,0] -> [0,3];
[2,1,0] -> [0,1,2];
[2,3] -> [3,2];
[3] -> [3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

36.6861 true

[0] -> [0];
[1] -> [1];
[0,3,0] -> [0,3,0];
[3,1,0] -> [0,1,3];
[3] -> [3];
[2,0,3] -> [3,0,2];
[2] -> [2];
[0,1] -> [1,0];
[0,3] -> [3,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.2986 true

[3,1] -> [1,3];
[2,3] -> [3,2];
[0,1,1] -> [1,1,0];
[0,2,3] -> [3,2,0];
[2,2,1] -> [1,2,2];
[1] -> [1];
[0,0,2] -> [2,0,0];
[3,0,0] -> [0,0,3];
[1,0] -> [0,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0416 true

[3,1,1] -> [1,1,3];
[1,0] -> [0,1];
[3,0] -> [0,3];
[3] -> [3];
[2,2] -> [2,2];
[2,0,2] -> [2,0,2];
[1,0,3] -> [3,0,1];
[1,2] -> [2,1];
[3,3] -> [3,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.4229 true

[3,1,3] -> [3,1,3];
[1,3,0] -> [0,3,1];
[2,0,2] -> [2,0,2];
[3,3,1] -> [1,3,3];
[0,1] -> [1,0];
[2,3] -> [3,2];
[3,2,0] -> [0,2,3];
[0,0] -> [0,0];
[2] -> [2];
[] -> [];

=================================
None
[0] -> [0];
[3] -> [3];
[2,0] -> [0,2];
[1,1,3] -> [3,1,1];
[3,3,0] -> [0,3,3];
[0,3,0] -> [0,3,0];
[1,1] -> [1,1];
[2] -> [2];
[3,1] -> [1,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0469 true

[1,0] -> [0,1];
[3] -> [3];
[2] -> [2];
[3,3] -> [3,3];
[2,0] -> [0,2];
[2,0,1] -> [1,0,2];
[0,0,0] -> [0,0,0];
[1] -> [1];
[3,0,2] -> [2,0,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0296 true

[2] -> [2];
[0,2,3] -> [3,2,0];
[1,0,2] -> [2,0,1];
[2,1] -> [1,2];
[3,3] -> [3,3];
[0,1] -> [1,0];
[1] -> [1];
[2,2] -> [2,2];
[2,0,1] -> [1,0,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

1.7645 true

[1,0,0] -> [0,0,1];
[0] -> [0];
[2,0] -> [0,2];
[3,1] -> [1,3];
[1,3] -> [3,1];
[2,0,3] -> [3,0,2];
[0,0,1] -> [1,0,0];
[1,1] -> [1,1];
[2] -> [2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.1199 true

[2] -> [2];
[3,1] -> [1,3];
[3,1,0] -> [0,1,3];
[0,0] -> [0,0];
[0,0,2] -> [2,0,0];
[3,2] -> [2,3];
[1] -> [1];
[2,3,0] -> [0,3,2];
[3,2,1] -> [1,2,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0560 true

[3,0] -> [0,3];
[1,1,0] -> [0,1,1];
[3,1] -> [1,3];
[0,0,1] -> [1,0,0];
[2,2,0] -> [0,2,2];
[2,2] -> [2,2];
[3,3,3] -> [3,3,3];
[3,0,0] -> [0,0,3];
[0,2] -> [2,0];
[0] -> [0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0477 true

[3,1,3] -> [3,1,3];
[1,0] -> [0,1];
[1,3] -> [3,1];
[1,1,2] -> [2,1,1];
[2,3,2] -> [2,3,2];
[1] -> [1];
[3,0,0] -> [0,0,3];
[0] -> [0];
[0,3] -> [3,0];
[3,0] -> [0,3];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.2383 true

[0,1,0] -> [0,1,0];
[2,1,2] -> [2,1,2];
[3] -> [3];
[3,1] -> [1,3];
[2,1,1] -> [1,1,2];
[2] -> [2];
[2,2] -> [2,2];
[1] -> [1];
[2,3,1] -> [1,3,2];
[0,1,2] -> [2,1,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.5007 true

[1,0,1] -> [1,0,1];
[3,0,2] -> [2,0,3];
[1] -> [1];
[3] -> [3];
[3,0,1] -> [1,0,3];
[0] -> [0];
[3,0,0] -> [0,0,3];
[3,3] -> [3,3];
[2,0] -> [0,2];
[0,1] -> [1,0];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

1.7398 true

[2,3,1] -> [1,3,2];
[3,0] -> [0,3];
[0,2,0] -> [0,2,0];
[0,0] -> [0,0];
[1,3] -> [3,1];
[0,3,3] -> [3,3,0];
[2] -> [2];
[0] -> [0];
[1] -> [1];
[2,0] -> [0,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.6897 true

[1] -> [1];
[3,2,0] -> [0,2,3];
[2] -> [2];
[0,0] -> [0,0];
[0,1,0] -> [0,1,0];
[1,3,0] -> [0,3,1];
[1,2,2] -> [2,2,1];
[3] -> [3];
[2,3,1] -> [1,3,2];
[1,1,3] -> [3,1,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.6144 true

[2] -> [2];
[1,2] -> [2,1];
[0,2,0] -> [0,2,0];
[2,1,0] -> [0,1,2];
[2,3] -> [3,2];
[0,0] -> [0,0];
[1,1,1] -> [1,1,1];
[0,3] -> [3,0];
[3,0,3] -> [3,0,3];
[1] -> [1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0342 true

[0,2,0] -> [0,2,0];
[3,0,0] -> [0,0,3];
[0] -> [0];
[0,0,0] -> [0,0,0];
[1] -> [1];
[2,0] -> [0,2];
[0,3] -> [3,0];
[0,2] -> [2,0];
[1,2] -> [2,1];
[1,3,0] -> [0,3,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.3386 true

[0] -> [0];
[1,1] -> [1,1];
[1] -> [1];
[3,0] -> [0,3];
[0,1,1] -> [1,1,0];
[1,3,3] -> [3,3,1];
[3,1] -> [1,3];
[3] -> [3];
[3,2,0] -> [0,2,3];
[2,0] -> [0,2];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.0511 true

[0,1,2] -> [2,1,0];
[2,0] -> [0,2];
[1,3] -> [3,1];
[3] -> [3];
[0,3,3] -> [3,3,0];
[3,0,2] -> [2,0,3];
[1] -> [1];
[0,1,3] -> [3,1,0];
[0,2,0] -> [0,2,0];
[1,0] -> [0,1];
[] -> [];

=================================
fix (f : list -> list) = fun (x:list) -> fold snoc Nil x

0.6687 true

