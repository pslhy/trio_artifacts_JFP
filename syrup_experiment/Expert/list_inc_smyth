[] -> [];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> [] in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.018045 false false

[1, 2] -> [2, 3];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.015848 true false

[0, 0] -> [1, 1];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0133989999999 true false

[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0328959999999 true false

[] -> [];
[1, 2] -> [2, 3];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0188439999999 true false

[] -> [];
[0, 0] -> [1, 1];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0113919999999 true false

[] -> [];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0116619999999 true false

[1, 2] -> [2, 3];
[0, 0] -> [1, 1];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014578 true false

[1, 2] -> [2, 3];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0221140000001 true false

[0, 0] -> [1, 1];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.013659 true false

[] -> [];
[1, 2] -> [2, 3];
[0, 0] -> [1, 1];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0186369999999 true false

[] -> [];
[1, 2] -> [2, 3];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0184609999999 true false

[] -> [];
[0, 0] -> [1, 1];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0179840000001 true false

[1, 2] -> [2, 3];
[0, 0] -> [1, 1];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014842 true false

[] -> [];
[1, 2] -> [2, 3];
[0, 0] -> [1, 1];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.01298 true false

