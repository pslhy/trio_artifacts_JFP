[] -> None;
=================================
fix f0.fun x0. ( None )
0.0002 false

[1] -> Some 1;
=================================
fix f0.fun x0.
  match (x0) with
  | [] ->
    ( Some
      ( Succ ( Zero ) ) )
  | hd1::tl1 -> (f0 tl1)
  
0.0004 false

[2] -> Some 2;
=================================
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    ( Some hd1 )
  
0.0004 false

[2, 1] -> Some 1;
=================================
fix f0.fun x0.
  match (x0) with
  | [] ->
    ( Some
      ( Succ ( Zero ) ) )
  | hd1::tl1 -> (f0 tl1)
  
0.0005 false

[1, 2] -> Some 2;
=================================
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    ( Some ( Succ hd1 ) )
  
0.0007 false

[3, 2, 1] -> Some 1;
=================================
fix f0.fun x0.
  match (x0) with
  | [] ->
    ( Some
      ( Succ ( Zero ) ) )
  | hd1::tl1 -> (f0 tl1)
  
0.0007 false

[2] -> Some 2;
[1, 2] -> Some 2;
=================================
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    ( Some
      ( Succ
        ( Succ ( Zero ) )
        ) )
  
0.0008 false

[] -> None;
[2] -> Some 2;
=================================
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    ( Some hd1 )
  
0.0004 false

[] -> None;
[2, 1] -> Some 1;
=================================
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    ( Some
      ( Succ ( Zero ) ) )
  
0.0010 false

[] -> None;
[1, 2] -> Some 2;
=================================
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    ( Some ( Succ hd1 ) )
  
0.0006 false

[2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      (f0 tl1)
    
  
0.0084 false

[1] -> Some 1;
[2] -> Some 2;
=================================
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    ( Some hd1 )
  
0.0008 false

[1] -> Some 1;
[2, 1] -> Some 1;
=================================
fix f0.fun x0.
  match (x0) with
  | [] ->
    ( Some
      ( Succ ( Zero ) ) )
  | hd1::tl1 -> (f0 tl1)
  
0.0008 false

[1] -> Some 1;
[1, 2] -> Some 2;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      ( Some hd1 )
    
  
0.0050 false

[2, 1] -> Some 1;
[1, 2] -> Some 2;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( None )
    | hd1::tl1 ->
      ( Some hd1 )
    
  
0.0085 false

[2] -> Some 2;
[2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] ->
    ( Some
      ( Succ ( Zero ) ) )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      (f0 tl1)
    
  
0.0075 false

[1] -> Some 1;
[2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      (f0 tl1)
    
  
0.0093 false

[2, 1] -> Some 1;
[1, 2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    if
      match (tl1) with
      | [] -> ( True )
      | hd'1::tl'1 ->
        ( False )
    then ( Some hd1 )
      else (f0 tl1)
  
0.0481 true

[1] -> Some 1;
[2, 1] -> Some 1;
[3, 2, 1] -> Some 1;
=================================
fix f0.fun x0.
  match (x0) with
  | [] ->
    ( Some
      ( Succ ( Zero ) ) )
  | hd1::tl1 -> (f0 tl1)
  
0.0009 false

[] -> None;
[1] -> Some 1;
[3, 2, 1] -> Some 1;
=================================
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    ( Some
      ( Succ ( Zero ) ) )
  
0.0009 false

[2] -> Some 2;
[2, 1] -> Some 1;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] ->
    ( Some
      ( Succ ( Zero ) ) )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      (f0 tl1)
    
  
0.0139 false

[1] -> Some 1;
[2] -> Some 2;
[1, 2] -> Some 2;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      ( Some hd1 )
    
  
0.0074 false

[] -> None;
[2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      (f0 tl1)
    
  
0.0081 false

[] -> None;
[2, 1] -> Some 1;
[1, 2] -> Some 2;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( None )
    | hd1::tl1 ->
      ( Some hd1 )
    
  
0.0059 false

[1] -> Some 1;
[2] -> Some 2;
[2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] ->
    ( Some
      ( Succ ( Zero ) ) )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      (f0 tl1)
    
  
0.0064 false

[] -> None;
[1, 2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    if
      match (tl1) with
      | [] -> ( True )
      | hd'1::tl'1 ->
        ( False )
    then ( Some hd1 )
      else (f0 tl1)
  
0.0385 true

[] -> None;
[1] -> Some 1;
[2] -> Some 2;
[2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      ( Some hd1 )
    
  
0.0069 false

[] -> None;
[1] -> Some 1;
[2] -> Some 2;
[1, 2] -> Some 2;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      ( Some hd1 )
    
  
0.0058 false

[] -> None;
[1] -> Some 1;
[2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      (f0 tl1)
    
  
0.0074 false

[] -> None;
[1] -> Some 1;
[2, 1] -> Some 1;
[1, 2] -> Some 2;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      ( Some hd1 )
    
  
0.0053 false

[] -> None;
[1] -> Some 1;
[2, 1] -> Some 1;
[3, 2, 1] -> Some 1;
=================================
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    ( Some
      ( Succ ( Zero ) ) )
  
0.0010 false

[1] -> Some 1;
[2, 1] -> Some 1;
[1, 2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    if
      match (tl1) with
      | [] -> ( True )
      | hd'1::tl'1 ->
        ( False )
    then ( Some hd1 )
      else (f0 tl1)
  
0.0664 true

[1] -> Some 1;
[2] -> Some 2;
[2, 1] -> Some 1;
[1, 2] -> Some 2;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      ( Some hd1 )
    
  
0.0068 false

[] -> None;
[2] -> Some 2;
[2, 1] -> Some 1;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      ( Some
        ( Succ ( Zero ) )
        )
    
  
0.0062 false

[] -> None;
[2] -> Some 2;
[1, 2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    if
      match (tl1) with
      | [] -> ( True )
      | hd'1::tl'1 ->
        ( False )
    then ( Some hd1 )
      else (f0 tl1)
  
0.0269 true

[1] -> Some 1;
[2] -> Some 2;
[2, 1] -> Some 1;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] ->
    ( Some
      ( Succ ( Zero ) ) )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      (f0 tl1)
    
  
0.0074 false

[] -> None;
[1] -> Some 1;
[2] -> Some 2;
[2, 1] -> Some 1;
[1, 2] -> Some 2;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      ( Some hd1 )
    
  
0.0117 false

[] -> None;
[1] -> Some 1;
[2] -> Some 2;
[2, 1] -> Some 1;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Some hd2 )
    | hd1::tl1 ->
      ( Some
        ( Succ ( Zero ) )
        )
    
  
0.0065 false

[] -> None;
[1] -> Some 1;
[2] -> Some 2;
[1, 2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    if
      match (tl1) with
      | [] -> ( True )
      | hd'1::tl'1 ->
        ( False )
    then ( Some hd1 )
      else (f0 tl1)
  
0.0475 true

[] -> None;
[1] -> Some 1;
[2, 1] -> Some 1;
[1, 2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    if
      match (tl1) with
      | [] -> ( True )
      | hd'1::tl'1 ->
        ( False )
    then ( Some hd1 )
      else (f0 tl1)
  
0.0412 true

[] -> None;
[2] -> Some 2;
[2, 1] -> Some 1;
[1, 2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    if
      match (tl1) with
      | [] -> ( True )
      | hd'1::tl'1 ->
        ( False )
    then ( Some hd1 )
      else (f0 tl1)
  
0.0351 true

[1] -> Some 1;
[2] -> Some 2;
[2, 1] -> Some 1;
[1, 2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    if
      match (tl1) with
      | [] -> ( True )
      | hd'1::tl'1 ->
        ( False )
    then ( Some hd1 )
      else (f0 tl1)
  
0.0866 true

[] -> None;
[1] -> Some 1;
[2] -> Some 2;
[2, 1] -> Some 1;
[1, 2] -> Some 2;
[3, 2, 1] -> Some 1;
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( None )
  | hd1::tl1 ->
    if
      match (tl1) with
      | [] -> ( True )
      | hd'1::tl'1 ->
        ( False )
    then ( Some hd1 )
      else (f0 tl1)
  
0.0780 true

