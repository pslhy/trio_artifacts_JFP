[] -> [];
=================================
fix f0.fun x0. x0
0.0002 false

[0] -> [];
=================================
fix f0.fun x0. ( Nil )
0.0003 false

[1] -> [];
=================================
fix f0.fun x0. ( Nil )
0.0004 false

[0, 1] -> [1, 0];
=================================
fix f0.fun x0.
  match (x0) with
  | [] -> ( Nil )
  | hd1::tl1 ->
    ( Cons ( Succ hd1 )
      ( Cons hd1 ( Nil )
        ) )
  
0.0022 false

[1, 0] -> [0, 1];
=================================
fix f0.fun x0.
  match (x0) with
  | [] -> ( Nil )
  | hd1::tl1 ->
    ( Cons ( Zero )
      ( Cons hd1 ( Nil )
        ) )
  
0.0020 false

[1, 0, 1] -> [];
=================================
fix f0.fun x0. ( Nil )
0.0006 false

[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( Nil )
  | hd1::tl1 ->
    ( Cons ( Succ hd1 )
      ( Cons hd1
        ( Cons
          ( Succ hd1 )
          ( Cons hd1
            ( Nil ) ) ) )
      )
  
0.4062 false

[] -> [];
[0] -> [];
=================================
fix f0.fun x0. ( Nil )
0.0004 false

[] -> [];
[1] -> [];
=================================
fix f0.fun x0. ( Nil )
0.0003 false

[1] -> [];
[1, 0, 1] -> [];
=================================
fix f0.fun x0. ( Nil )
0.0006 false

[1] -> [];
[1, 0] -> [0, 1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( Nil )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0850 false

[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( Nil )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2
            ( Cons hd1
              ( Cons hd2
                tl1 ) ) )
          ) else (f0 tl1)
    
  
1.7678 false

[1, 0] -> [0, 1];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> ( Nil )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2
          (f0 tl1) ) )
    
  
0.5208 false

[0] -> [];
[1] -> [];
=================================
fix f0.fun x0. ( Nil )
0.0006 false

[0] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2
          (f0 tl1) ) )
    
  
0.4273 false

[0] -> [];
[1, 0] -> [0, 1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( Nil )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0192 false

[0] -> [];
[1, 0, 1] -> [];
=================================
fix f0.fun x0. ( Nil )
0.0018 false

[0] -> [];
[1, 0] -> [0, 1];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2
          (f0 tl1) ) )
    
  
0.4346 false

[] -> [];
[0] -> [];
[0, 1] -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0406 false

[] -> [];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2
            ( Cons hd1
              ( Cons hd2
                tl1 ) ) )
          ) else (f0 tl1)
    
  
1.2323 false

[0] -> [];
[0, 1] -> [1, 0];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2
          (f0 tl1) ) )
    
  
0.1513 false

[1] -> [];
[1, 0] -> [0, 1];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2
          (f0 tl1) ) )
    
  
0.2503 false

[] -> [];
[1] -> [];
[0, 1] -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0050 false

[] -> [];
[1] -> [];
[1, 0] -> [0, 1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0373 false

[] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2 tl1
            ) )
        else (f0 tl1)
    
  
0.3867 false

[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> ( Nil )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0261 false

[1] -> [];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] ->
    ( Cons ( Zero ) x0 )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2
            ( Cons hd1
              (f0 tl1) )
            ) )
        else (f0 tl1)
    
  
1.2963 false

[] -> [];
[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0065 false

[] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2 tl1
            ) )
        else ( Nil )
    
  
0.1084 false

[] -> [];
[0] -> [];
[1] -> [];
[1, 0, 1] -> [];
=================================
fix f0.fun x0. ( Nil )
0.0015 false

[] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
12.0710 false

[] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2
          (f0 tl1) ) )
    
  
0.0689 false

[1] -> [];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
None
[] -> [];
[1] -> [];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2 tl1
            ) )
        else ( Nil )
    
  
0.6877 false

[] -> [];
[0] -> [];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2 tl1
            ) )
        else (f0 tl1)
    
  
0.2998 false

[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] ->
    ( Cons
      ( Succ ( Zero ) )
      ( Cons ( Zero ) x0
        ) )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      (f0 tl1)
    
  
0.0593 false

[] -> [];
[0] -> [];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2
            ( Cons hd1
              ( Cons hd2
                tl1 ) ) )
          ) else (f0 tl1)
    
  
1.7879 false

[] -> [];
[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0142 false

[] -> [];
[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2 tl1
            ) )
        else ( Nil )
    
  
0.1573 false

[] -> [];
[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2
          (f0 tl1) ) )
    
  
0.0709 false

[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2
            (f0 tl1) ) )
        else ( Nil )
    
  
0.9121 false

[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
18.6308 false

[] -> [];
[0] -> [];
[1] -> [];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2
            ( Cons hd1
              ( Cons hd2
                tl1 ) ) )
          ) else (f0 tl1)
    
  
1.1783 false

[] -> [];
[0] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2 tl1
            ) )
        else (f0 tl1)
    
  
0.8154 false

[] -> [];
[0] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2
          (f0 tl1) ) )
    
  
0.1133 false

[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
None
[] -> [];
[0] -> [];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
None
[] -> [];
[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'1::tl'1 ->
          ( False )
      then
        ( Cons hd1
          ( Cons hd2 tl1
            ) )
        else ( Nil )
    
  
0.3609 false

[] -> [];
[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun x0.
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2
          (f0 tl1) ) )
    
  
0.0812 false

[] -> [];
[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
16.8154 false

[] -> [];
[0] -> [];
[1] -> [];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
None
[] -> [];
[0] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
None
[] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
None
[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
None
[] -> [];
[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
=================================
None
