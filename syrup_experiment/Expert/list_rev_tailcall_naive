([], []) -> [];
=================================
fix f0.fun (x0, x1).
  ( Nil )
0.0003 false

([], [0]) -> [0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 -> ( Nil )
  
0.0019 false

([], [1]) -> [1];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 -> ( Nil )
  
0.0017 false

([], [1, 0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x0
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( x0, tl1 )) )
  
0.0029 false

([0], []) -> [0];
=================================
fix f0.fun (x0, x1).
  ( Cons ( Zero ) ( Nil )
    )
0.0017 false

([1], []) -> [1];
=================================
fix f0.fun (x0, x1). x0
0.0017 false

([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0051 false

([0, 1], []) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Nil )
  | hd1::tl1 ->
    ( Cons ( Succ hd1 )
      ( Cons hd1 x1 ) )
  
0.0031 false

([], [1, 0]) -> [1, 0];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0045 false

([], [1]) -> [1];
([0, 1], []) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons ( Succ hd1 )
      ( Cons hd1 x1 ) )
  
0.0034 false

([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> ( Nil )
  | hd1::tl1 -> x1
  
0.0047 false

([], []) -> [];
([0], []) -> [0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x0
  | hd1::tl1 -> x0
  
0.0009 false

([], [1, 0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons ( Succ hd1 )
      ( Cons hd1 x1 ) )
  
0.0046 false

([], [1]) -> [1];
([1], []) -> [1];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x0
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( x0, tl1 )) )
  
0.0030 false

([], [1]) -> [1];
([0], []) -> [0];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x0
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( x0, tl1 )) )
  
0.0029 false

([], [0]) -> [0];
([], [1]) -> [1];
=================================
fix f0.fun (x0, x1). x1
0.0031 false

([0], []) -> [0];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0041 false

([], [1]) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0039 false

([], [1]) -> [1];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0043 false

([], [0]) -> [0];
([1], []) -> [1];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | [] ->
      ( Cons ( Zero ) x0
        )
    | hd1::tl1 -> x1
    
  | hd2::tl2 ->
    match (tl2) with
    | [] -> x0
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( tl1, x1 ))
        )
    
  
0.0449 false

([], []) -> [];
([], [1]) -> [1];
([0, 1], []) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons ( Succ hd1 )
      ( Cons hd1 x1 ) )
  
0.0031 false

([], []) -> [];
([1], []) -> [1];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x0
  | hd2::tl2 ->
    match (tl2) with
    | [] -> x0
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0098 false

([], []) -> [];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x0
  | hd1::tl1 ->
    ( Cons hd1 x1 )
  
0.0030 false

([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0042 false

([], [0]) -> [0];
([], [1]) -> [1];
([0], []) -> [0];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x0
  | hd1::tl1 -> x1
  
0.0036 false

([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 x1 )
  
0.0054 false

([], []) -> [];
([], [1]) -> [1];
([1], []) -> [1];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 -> x0
  
0.0018 false

([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([1], []) -> [1];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 -> x0
  
0.0040 false

([], [0]) -> [0];
([], [1]) -> [1];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0037 false

([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([1], []) -> [1];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | [] ->
      ( Cons ( Zero ) x0
        )
    | hd1::tl1 -> x1
    
  | hd2::tl2 ->
    match (tl2) with
    | [] -> x0
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( tl1, x1 ))
        )
    
  
0.0946 false

([], []) -> [];
([], [0]) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 x1 )
  
0.0027 false

([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 x1 )
  
0.0060 false

([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 -> x0
  
0.0052 false

([], []) -> [];
([], [0]) -> [0];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x0
  | hd1::tl1 -> x1
  
0.0024 false

([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons
      ( Succ ( Zero ) )
      ( Cons ( Zero )
        ( Nil ) ) )
  
0.0081 false

([], []) -> [];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons ( Succ hd1 )
      ( Cons hd1 x1 ) )
  
0.0037 false

([], [0]) -> [0];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    ( Cons
      match (tl2) with
      | [] -> ( Zero )
      | hd1::tl1 -> hd1
      (f0 ( tl2, x1 )) )
  
0.0958 false

([], [0]) -> [0];
([], [1, 0]) -> [1, 0];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons
      ( Succ ( Zero ) )
      ( Cons ( Zero )
        ( Nil ) ) )
  
0.0051 false

([], []) -> [];
([], [1]) -> [1];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 x1 )
  
0.0035 false

([], []) -> [];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    ( Cons
      match (tl2) with
      | [] -> ( Zero )
      | hd1::tl1 -> hd1
      (f0 ( tl2, x1 )) )
  
0.0697 false

([], []) -> [];
([], [0]) -> [0];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 x1 )
  
0.0034 false

([], []) -> [];
([], [0]) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0236 false

([], []) -> [];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 x1 )
  
0.0043 false

([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | [] ->
      ( Cons ( Zero ) x0
        )
    | hd1::tl1 -> x1
    
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( tl1, x1 ))
        )
    
  
0.1789 false

([], []) -> [];
([], [0]) -> [0];
([], [1, 0]) -> [1, 0];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons
      ( Succ ( Zero ) )
      ( Cons ( Zero )
        ( Nil ) ) )
  
0.0043 false

([], [0]) -> [0];
([], [1, 0]) -> [1, 0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | [] ->
      ( Cons ( Zero ) x0
        )
    | hd1::tl1 -> x1
    
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( tl1, x1 ))
        )
    
  
0.0665 false

([], []) -> [];
([], [1]) -> [1];
([0], []) -> [0];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0984 false

([], []) -> [];
([], [0]) -> [0];
([], [1, 0]) -> [1, 0];
([1], []) -> [1];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] -> x0
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0185 false

([], []) -> [];
([], [0]) -> [0];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 -> x0
  
0.0033 false

([], [0]) -> [0];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 x1 )
  
0.0050 false

([], []) -> [];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0896 false

([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | [] ->
      ( Cons ( Zero ) x0
        )
    | hd1::tl1 -> x1
    
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( tl1, x1 ))
        )
    
  
0.2376 false

([], []) -> [];
([], [1]) -> [1];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0656 false

([], []) -> [];
([], [0]) -> [0];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 x1 )
  
0.0033 false

([], []) -> [];
([], [0]) -> [0];
([], [1]) -> [1];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 x1 )
  
0.0035 false

([], []) -> [];
([], [0]) -> [0];
([], [1]) -> [1];
([0], []) -> [0];
([1], []) -> [1];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] -> x0
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0204 false

([], []) -> [];
([], [0]) -> [0];
([], [1]) -> [1];
([0], []) -> [0];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0841 false

([], [0]) -> [0];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | [] ->
      ( Cons ( Zero ) x0
        )
    | hd1::tl1 -> x1
    
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( tl1, x1 ))
        )
    
  
0.0956 false

([], []) -> [];
([], [0]) -> [0];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 x1 )
  
0.0041 false

([], []) -> [];
([], [0]) -> [0];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] -> x0
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0282 false

([], []) -> [];
([], [0]) -> [0];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.1033 false

([], []) -> [];
([], [0]) -> [0];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0360 false

([], []) -> [];
([], [0]) -> [0];
([], [1]) -> [1];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0332 false

([], []) -> [];
([], [0]) -> [0];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0358 false

([], []) -> [];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.1006 false

([], [0]) -> [0];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | [] ->
      ( Cons ( Zero ) x0
        )
    | hd1::tl1 -> x1
    
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( tl1, x1 ))
        )
    
  
0.1399 false

([], []) -> [];
([], [0]) -> [0];
([], [1]) -> [1];
([], [1, 0]) -> [1, 0];
([0], []) -> [0];
([1], []) -> [1];
([1], [0]) -> [1, 0];
([0, 1], []) -> [1, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons hd2 x1 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons hd2 tl1 )
        )
    
  
0.0434 false

