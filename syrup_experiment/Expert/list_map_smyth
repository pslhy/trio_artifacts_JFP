(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.032318 false false

(inc, [0]) -> [1];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.130375 false false

(inc, [0, 0]) -> [1, 1];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [1, 1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.190374 false false

(inc, [1]) -> [2];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.151428 false false

(inc, [1, 1]) -> [2, 2];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [2, 2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.234642 false false

(zero, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0304779999999 false false

(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.118198 false false

(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.163678 false false

(inc, [0, 0]) -> [1, 1];
(zero, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [1, 1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0407439999999 false false

(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case f 0 of
      Z y1 -> 
        [0]

      S y1 -> 
        [2, 2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.251336 false false

(inc, [0]) -> [1];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case f 0 of
      Z y1 -> 
        [0, 0]

      S y1 -> 
        [1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.279853 false false

(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
=================================
NOSOL

(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
=================================
NOSOL

(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [2, 2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0466409999999 false false

(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> xs in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.032528 false false

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
=================================
NOSOL

(inc, [1]) -> [2];
(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [f 1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.121708 false false

(inc, [0]) -> [1];
(inc, [1, 1]) -> [2, 2];
=================================
NOSOL

(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, [0, 0]) -> [0, 0];
=================================
NOSOL

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [1]) -> [2];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [S (#2.1 y1)] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.047086 false false

(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(zero, [0, 0]) -> [0, 0];
=================================
NOSOL

(inc, [0]) -> [1];
(inc, [1]) -> [2];
(zero, [0]) -> [0];
=================================
None
(inc, []) -> [];
(inc, [1]) -> [2];
(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [f (#2.1 y1)] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044879 false true

(inc, []) -> [];
(inc, [0]) -> [1];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (f (#2.1 y1), #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041074 false true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
=================================
NOSOL

(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (2, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (2, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042929 false false

(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, [0, 0]) -> [0, 0];
=================================
None
(inc, []) -> [];
(zero, []) -> [];
(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> xs in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0312160000001 false false

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044699 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044515 false false

(inc, [0]) -> [1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
=================================
NOSOL

(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
NOSOL

(inc, []) -> [];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041344 true true

(inc, []) -> [];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0427830000001 true true

(inc, []) -> [];
(inc, [0, 0]) -> [1, 1];
(zero, []) -> [];
(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0429099999999 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(zero, [0]) -> [0];
=================================
NOSOL

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(zero, []) -> [];
(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0429670000001 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(zero, [0, 0]) -> [0, 0];
=================================
NOSOL

(inc, []) -> [];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0604370000001 true true

(inc, []) -> [];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.04728 false false

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0474770000001 false false

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041528 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (f (#2.1 y1), #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.038994 false true

(inc, []) -> [];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042209 true true

(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046276 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(zero, []) -> [];
(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042508 true true

(inc, []) -> [];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0485000000001 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
NOSOL

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046122 false false

(inc, [0]) -> [1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042256 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042766 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0407540000001 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0456389999999 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0439699999999 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0467180000001 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0439200000001 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0411590000001 true true

(inc, []) -> [];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.040888 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042461 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0457779999999 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0438529999999 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042723 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0428119999999 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0438610000001 true true

(inc, []) -> [];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.045697 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046689 true true

(inc, []) -> [];
(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043373 true true

