Leaf () -> [];
=================================
fix (f : tree -> list) = fun (x:tree) -> Nil

0.0007 false

Node (Leaf (), T (), Leaf ()) -> [T ()];
=================================
fix (f : tree -> list) = fun (x:tree) -> Cons (Un_Node x . 1, Nil)

0.0030 false

Node (Leaf (), F (), Leaf ()) -> [F ()];
=================================
fix (f : tree -> list) = fun (x:tree) -> Cons (Un_Node x . 1, Nil)

0.0031 false

Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match Un_Node x . 0 with
      | Leaf _ -> Cons (F, Nil)
      | Node _ -> Cons (T, f (Un_Node x . 0))

0.0338 false

Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match Un_Node x . 0 with
      | Leaf _ -> Cons (T, Nil)
      | Node _ -> Cons (F, f (Un_Node x . 0))

0.0369 false

Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0324 false

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (Un_Node x . 1, Nil)

0.0050 false

Leaf () -> [];
Node (Leaf (), F (), Leaf ()) -> [F ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (Un_Node x . 1, Nil)

0.0050 false

Leaf () -> [];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> Cons (F, Nil)
                     | Node _ -> Cons (T, f (Un_Node x . 0)))

0.0285 false

Leaf () -> [];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> Cons (T, Nil)
                     | Node _ -> Cons (F, f (Un_Node x . 0)))

0.0258 false

Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 1 with
                     | T _ -> Cons (F, f (Un_Node x . 0))
                     | F _ -> Cons (T, f (Un_Node x . 0)))

0.1111 false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
=================================
fix (f : tree -> list) = fun (x:tree) -> Cons (Un_Node x . 1, Nil)

0.0031 false

Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0455 false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match Un_Node x . 0 with
      | Leaf _ -> Cons (Un_Node x . 1, Nil)
      | Node _ -> append (f (Un_Node x . 0)) Cons (Un_Node x . 1, Nil)

0.0097 false

Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0)) Cons (Un_Node x . 1, Nil)

0.1069 false

Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match Un_Node x . 0 with
      | Leaf _ -> Cons (Un_Node x . 1, Nil)
      | Node _ -> append (f (Un_Node x . 0)) Cons (Un_Node x . 1, Nil)

0.0101 false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0227 false

Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

3.5539 true

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> Cons (Un_Node x . 1, Nil)
                     | Node _ -> append (f (Un_Node x . 0))
                                   Cons (Un_Node x . 1, Nil))

0.0126 false

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0103 false

Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match Un_Node x . 0 with
      | Leaf _ -> Cons (Un_Node x . 1, Nil)
      | Node _ -> append (f (Un_Node x . 0)) Cons (Un_Node x . 1, Nil)

0.0101 false

Leaf () -> [];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0)) Cons (Un_Node x . 1, Nil)

0.0277 false

Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
None
Leaf () -> [];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 1 with
                     | T _ -> Cons (F, f (Un_Node x . 0))
                     | F _ -> Cons (T, f (Un_Node x . 0)))

0.0705 false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match append (f (Un_Node x . 0)) (f (Un_Node x . 2)) with
                     | Nil _ -> Cons (T, Nil)
                     | Cons _ -> Cons (F, Cons (T, Nil)))

0.0927 false

Leaf () -> [];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match append (f (Un_Node x . 0)) (f (Un_Node x . 2)) with
                     | Nil _ -> Cons (T, Nil)
                     | Cons _ -> Cons (F,
                                        append (f (Un_Node x . 0))
                                          (f (Un_Node x . 2))))

0.0582 false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.2824 true

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0)) Cons (Un_Node x . 1, Nil)

0.0286 false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0)) Cons (Un_Node x . 1, Nil)

0.1006 false

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0)) Cons (Un_Node x . 1, Nil)

0.0285 false

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0765 true

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match append (f (Un_Node x . 2)) (f (Un_Node x . 0)) with
                     | Nil _ -> Cons (T, Nil)
                     | Cons _ -> Cons (F, Cons (T, Nil)))

0.0681 false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.2853 true

Leaf () -> [];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match Un_Node x . 0 with
                     | Leaf _ -> Cons (Un_Node x . 1, f (Un_Node x . 2))
                     | Node _ -> append (f (Un_Node x . 0))
                                   Cons (Un_Node x . 1, Nil))

0.0305 false

Leaf () -> [];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.2927 true

Leaf () -> [];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
None
Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0)) Cons (Un_Node x . 1, Nil)

0.0299 false

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0728 true

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0793 true

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0727 true

Leaf () -> [];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> (match f (Un_Node x . 0) with
                     | Nil _ -> Cons (Un_Node x . 1, f (Un_Node x . 2))
                     | Cons _ -> append (f (Un_Node x . 0))
                                   Cons (Un_Node x . 1, Nil))

0.0341 false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.2837 true

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (f (Un_Node x . 0))
                    Cons (Un_Node x . 1, f (Un_Node x . 2))

0.0682 true

