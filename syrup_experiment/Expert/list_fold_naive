(add, 0, []) -> 0;
=================================
fix f0.fun (x0, x1, x2).
  ( Zero )
0.0004 false

(add, 0, [1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  ( Succ ( Zero ) )
0.0017 false

(add, 0, [2, 1]) -> 3;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> ( Succ x1 )
  | hd1::tl1 ->
    ( Succ
      (f0
        ( x0, x1, tl1 ))
      )
  
0.0030 false

(add, 0, [3, 2, 1]) -> 6;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> ( Zero )
  | hd1::tl1 ->
    (x0 ( hd1, hd1 ))
  
0.0041 false

(add, 1, []) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 -> ( Zero )
  
0.0017 false

(countOdd, 0, []) -> 0;
=================================
fix f0.fun (x0, x1, x2).
  match (x1) with
  | Z -> x1
  | Sn1 -> ( Zero )
  
0.0004 false

(countOdd, 0, [1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ
      (f0
        ( x0, x1, tl1 ))
      )
  
0.0020 false

(countOdd, 0, [2, 1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  ( Succ x1 )
0.0031 false

(countOdd, 0, [3, 2, 1]) -> 2;
=================================
fix f0.fun (x0, x1, x2).
  ( Succ ( Succ x1 ) )
0.0040 false

(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 -> hd1
  
0.0019 false

(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [2, 1]) -> 3;
(countOdd, 0, []) -> 0;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ hd1 )
  
0.0031 false

(add, 0, [2, 1]) -> 3;
(countOdd, 0, [2, 1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> ( Zero )
  | hd1::tl1 ->
    ( Succ
      (x0 ( x1, hd1 )) )
  
0.0042 false

(add, 0, []) -> 0;
(countOdd, 0, []) -> 0;
=================================
fix f0.fun (x0, x1, x2).
  x1
0.0006 false

(add, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ x1 )
  
0.0030 false

(add, 0, [2, 1]) -> 3;
(countOdd, 0, [1]) -> 1;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
=================================
fail to find a solution
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    (x0
      ( hd1,
        (f0
          ( x0, x1, tl1 ))
        ))
  
0.0326 false

(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ
      (f0
        ( x0, x1, tl1 ))
      )
  
0.0019 false

(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ x1 )
  
0.0031 false

(add, 0, []) -> 0;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ x1 )
  
0.0032 false

(add, 0, []) -> 0;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    (x0 ( hd1, hd1 ))
  
0.0055 false

(add, 0, []) -> 0;
(add, 0, [2, 1]) -> 3;
(countOdd, 0, [1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ
      (f0
        ( x0, x1, tl1 ))
      )
  
0.0036 false

(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 0, [2, 1]) -> 3;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ
      (x0 ( x1, hd1 )) )
  
0.0051 false

(add, 0, [2, 1]) -> 3;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 1, []) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ
      (x0 ( x1, hd1 )) )
  
0.0067 false

(add, 0, []) -> 0;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ
      (x0 ( x1, hd1 )) )
  
0.0046 false

(add, 0, []) -> 0;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ x1 )
  
0.0039 false

(add, 0, [2, 1]) -> 3;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ
      (x0 ( x1, hd1 )) )
  
0.0068 false

(add, 0, []) -> 0;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [2, 1]) -> 1;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [2, 1]) -> 1;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
=================================
fix f0.fun (x0, x1, x2).
  match (x2) with
  | [] -> x1
  | hd1::tl1 ->
    ( Succ x1 )
  
0.0046 false

(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [1]) -> 1;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
(add, 0, []) -> 0;
(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
=================================
None
