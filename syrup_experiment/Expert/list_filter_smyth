(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0227769999999 false false

(isEven, [0]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.023608 false false

(isEven, [1]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.023486 false false

(isEven , [2]) -> [2];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.024854 false false

(isEven, [0, 0]) -> [0, 0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0386579999999 false false

(isEven, [0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.023594 false false

(isEven, [1, 0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0253700000001 false false

(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.024496 false false

(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.024821 false false

(isEven, [1]) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.024494 false false

(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0235600000001 false false

(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
=================================
NOSOL

(isEven , [2]) -> [2];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        xs

      F y1 -> 
        [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0323209999999 false false

(isEven, []) -> [];
(isEven, [0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0271720000001 false false

(isEven, [0]) -> [0];
(isEven, [1, 0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.023946 false false

(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0272279999999 false false

(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        [0]

      F y1 -> 
        [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0316339999999 false false

(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
=================================
NOSOL

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
=================================
NOSOL

(isEven, []) -> [];
(isEven , [2]) -> [2];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0239939999999 false false

(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        xs

      F y1 -> 
        [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.029417 false false

(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (0, fixListFilter (#2.2 y1)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0417580000001 false false

(isEven, []) -> [];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (0, fixListFilter (#2.2 y2)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.058567 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        xs

      F y1 -> 
        [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0306889999999 false false

(isEven, [1]) -> [];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0239309999999 false false

(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
=================================
NOSOL

(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
NOSOL

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
=================================
NOSOL

(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (0, fixListFilter (#2.2 y2)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.046151 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (0, fixListFilter (#2.2 y2)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0477679999999 false false

(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (0, #2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons
              ( 0
              , Cons (0, fixListFilter (#2.2 y1))
              ) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.042015 false false

(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0960540000001 false false

(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            xs

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          (case #2.2 y1 of
            Nil y2 -> 
              (#2.1 y1, fixListFilter (#2.2 y1))

            Cons y2 -> 
              (0, [])) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0556180000001 false false

(isEven, [0]) -> [0];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            xs

          S y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0578989999999 false false

(isEven, []) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [#2.1 y1] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0274099999999 false false

(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
NOSOL

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (0, #2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons
              ( 0
              , Cons (0, fixListFilter (#2.2 y1))
              ) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0457289999999 false false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
=================================
NOSOL

(isEven, [1]) -> [];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
NOSOL

(isEven, []) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.106496 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
NOSOL

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0503650000001 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [#2.1 y1] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.027323 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0981180000001 false false

(isEven, []) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            xs

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          (case #2.2 y1 of
            Nil y2 -> 
              (#2.1 y1, fixListFilter (#2.2 y1))

            Cons y2 -> 
              (0, [])) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0595209999999 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.080242 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            xs

          S y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            xs

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0485739999999 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0856630000001 false false

(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
NOSOL

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
NOSOL

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            xs

          F y2 -> 
            []

      Cons y1 -> 
        case isNonzero (#2.1 y1) of
          T y2 -> 
            case isEven (#2.1 y1) of
              T y3 -> 
                [#2.1 y1]

              F y3 -> 
                []

          F y2 -> 
            case fixListFilter (#2.2 y1) of
              Nil y3 -> 
                [0]

              Cons y3 -> 
                [0, 0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            xs

          F y2 -> 
            []

      Cons y1 -> 
        case isNonzero (#2.1 y1) of
          T y2 -> 
            case isEven (#2.1 y1) of
              T y3 -> 
                [#2.1 y1]

              F y3 -> 
                []

          F y2 -> 
            case fixListFilter (#2.2 y1) of
              Nil y3 -> 
                [0]

              Cons y3 -> 
                [0, 0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
2.435573 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.336892 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.084873 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.084474 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0471399999999 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0862629999999 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.107735 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0494470000001 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.075664 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.101178 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0973630000001 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.106107 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.1034 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
NOSOL

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.107197 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.122629 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0951950000001 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.126089 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0452829999999 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.10476 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.100408 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.108455 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.119174 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.102899 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.103774 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.1325 true true

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.119251 true true

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.129154 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.127167 true true

