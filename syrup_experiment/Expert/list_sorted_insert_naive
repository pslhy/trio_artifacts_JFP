([], 0) -> [0];
=================================
fix f0.fun (x0, x1).
  ( Cons x1 x0 )
0.0004 false

([], 1) -> [1];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 -> ( Nil )
  
0.0021 false

([], 2) -> [2];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 -> ( Nil )
  
0.0031 false

([0, 1], 0) -> [0, 1];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Nil )
  | hd1::tl1 -> x0
  
0.0030 false

([0], 1) -> [0, 1];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0038 false

([1], 0) -> [0, 1];
=================================
fix f0.fun (x0, x1).
  ( Cons x1 x0 )
0.0018 false

([1], 1) -> [1];
=================================
fix f0.fun (x0, x1). x0
0.0033 false

([1], 2) -> [1, 2];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0055 false

([2], 0) -> [0, 2];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Nil )
  | hd1::tl1 ->
    ( Cons x1 x0 )
  
0.0020 false

([2], 1) -> [1, 2];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | Z -> ( Nil )
  | Sn1 -> ( Cons x1 x0 )
  
0.0035 false

([0], 0) -> [0];
([1], 1) -> [1];
=================================
fix f0.fun (x0, x1). x0
0.0043 false

([1], 1) -> [1];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | Z -> ( Nil )
    | Sn1 ->
      ( Cons x1 x0 )
    
  | hd2::tl2 ->
    match (tl2) with
    | [] -> x0
    | hd1::tl1 ->
      ( Cons hd2
        ( Cons hd1
          (f0
            ( tl1, x1 ))
          ) )
    
  
0.7185 false

([], 0) -> [0];
([0, 1], 2) -> [0, 1, 2];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0099 false

([], 2) -> [2];
([0], 1) -> [0, 1];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0050 false

([], 0) -> [0];
([1], 0) -> [0, 1];
=================================
fix f0.fun (x0, x1).
  ( Cons ( Zero ) x0 )
0.0017 false

([], 1) -> [1];
([0], 1) -> [0, 1];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0039 false

([0], 0) -> [0];
([0, 1], 0) -> [0, 1];
=================================
fix f0.fun (x0, x1). x0
0.0040 false

([], 1) -> [1];
([0, 1], 2) -> [0, 1, 2];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0090 false

([], 1) -> [1];
([0], 0) -> [0];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 ->
    (f0 ( tl1, x1 ))
  
0.0031 false

([1], 2) -> [1, 2];
([0, 1], 0) -> [0, 1];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | Z -> x0
  | Sn1 ->
    ( Cons n1
      ( Cons x1 ( Nil ) )
      )
  
0.0065 false

([], 0) -> [0];
([1], 0) -> [0, 1];
([0, 1], 0) -> [0, 1];
=================================
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 ->
    ( Cons x1
      ( Cons ( Succ x1 )
        ( Nil ) ) )
  
0.0040 false

([0], 0) -> [0];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | Z -> x0
  | Sn2 ->
    match (n2) with
    | Z -> ( Cons x1 x0 )
    | Sn1 ->
      ( Cons n1
        ( Cons n2
          ( Cons x1
            ( Nil ) ) ) )
    
  
1.2515 false

([0], 0) -> [0];
([1], 1) -> [1];
([2], 1) -> [1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] -> ( False )
    | hd'4::tl'4 ->
      (equal_to
        ( ( Succ x1 ),
          hd'4 ))
  then
    match (x1) with
    | Z -> ( Nil )
    | Sn1 ->
      ( Cons x1
        (f0 ( x0, n1 )) )
  else
    match (x0) with
    | [] -> x0
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( tl1, x1 ))
        )
  
6.7027 false

([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Nil )
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 -> x0
    
  
0.2762 false

([1], 0) -> [0, 1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
=================================
fix f0.fun (x0, x1).
  ( Cons x1 x0 )
0.0044 false

([], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | Z -> ( Cons x1 x0 )
  | Sn1 -> x0
  
0.0030 false

([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] ->
      (equal_to
        (
          ( Succ ( Zero )
            ), x1 ))
    | hd'4::tl'4 ->
      (less_than
        ( x1, hd'4 ))
  then
    match (x1) with
    | Z -> x0
    | Sn1 ->
      if
        match (x0) with
        | [] -> ( True )
        | hd'2::tl'2 ->
          ( False )
      then
        (f0 ( x0, n1 ))
        else
          ( Cons x1
            (f0
              ( x0, n1 ))
            )
  else
    match (x0) with
    | [] ->
      if
        match (x1) with
        | Z -> ( True )
        | Sn'2 ->
          ( False )
      then x0
        else
          ( Cons x1 x0 )
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( tl1, x1 ))
        )
  
24.2188 false

([], 1) -> [1];
([1], 2) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 ->
    ( Cons hd1
      (f0 ( tl1, x1 )) )
  
0.0111 false

([], 1) -> [1];
([], 2) -> [2];
([1], 1) -> [1];
=================================
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 -> x0
  
0.0038 false

([], 0) -> [0];
([1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | Z -> ( Cons x1 x0 )
  | Sn1 ->
    ( Cons ( Zero )
      ( Cons n1
        ( Cons x1 ( Nil )
          ) ) )
  
0.0532 false

([], 2) -> [2];
([0], 0) -> [0];
([1], 1) -> [1];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | Z -> ( Nil )
    | Sn1 ->
      ( Cons x1 x0 )
    
  | hd2::tl2 ->
    match (tl2) with
    | [] -> x0
    | hd1::tl1 ->
      ( Cons hd2
        ( Cons hd1
          (f0
            ( tl1, x1 ))
          ) )
    
  
0.6198 false

([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
=================================
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 ->
    ( Cons
      ( Succ ( Zero ) )
      ( Cons
        ( Succ
          ( Succ ( Zero )
            ) ) tl1 ) )
  
0.0289 false

([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([0, 1], 0) -> [0, 1];
=================================
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] -> ( Cons x1 x0 )
  | hd1::tl1 ->
    ( Cons hd1
      ( Cons ( Succ hd1 )
        ( Nil ) ) )
  
0.0643 false

([], 2) -> [2];
([0], 0) -> [0];
([1], 2) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | Z -> x0
    | Sn1 ->
      ( Cons x1 x0 )
    
  | hd2::tl2 ->
    ( Cons hd2
      (f0 ( tl2, x1 )) )
  
1.1751 false

([], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | Z ->
      ( Cons ( Succ x1 )
        x0 )
    | Sn1 ->
      ( Cons x1 x0 )
    
  | hd2::tl2 ->
    ( Cons
      match (x1) with
      | Z -> x1
      | Sn1 -> hd2
      match (tl2) with
      | [] ->
        ( Cons
          ( Succ
            ( Succ
              ( Zero ) )
            ) tl2 )
      | hd1::tl1 ->
        (f0 ( tl1, x1 ))
      )
  
0.4910 false

([], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | Z ->
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      ( Cons x1 x0 )
    
  | Sn2 ->
    match (n2) with
    | Z -> x0
    | Sn1 ->
      ( Cons n1
        ( Cons n2
          ( Cons x1
            ( Nil ) ) ) )
    
  
0.4472 false

([], 0) -> [0];
([], 1) -> [1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | Z ->
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      ( Cons x1 x0 )
    
  | Sn2 ->
    match (n2) with
    | Z -> ( Cons x1 x0 )
    | Sn1 ->
      ( Cons n2
        ( Cons x1 ( Nil )
          ) )
    
  
0.1118 false

([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([1], 0) -> [0, 1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] -> ( True )
    | hd'4::tl'4 ->
      (equal_to
        ( hd'4, x1 ))
  then
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 -> x0
  else
    ( Cons ( Zero ) x0 )
0.7020 false

([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
=================================
None
([], 0) -> [0];
([], 2) -> [2];
([1], 0) -> [0, 1];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x0) with
  | [] ->
    match (x1) with
    | Z -> ( Cons x1 x0 )
    | Sn1 ->
      ( Cons x1 x0 )
    
  | hd2::tl2 ->
    match (tl2) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      ( Cons hd2
        ( Cons hd1
          (f0
            ( tl1, x1 ))
          ) )
    
  
0.6565 false

([], 1) -> [1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] ->
      (less_than
        ( ( Zero ), x1 ))
    | hd'4::tl'4 ->
      (equal_to
        ( ( Succ x1 ),
          hd'4 ))
  then
    match (x1) with
    | Z -> ( Cons x1 x0 )
    | Sn1 ->
      ( Cons x1
        (f0 ( x0, n1 )) )
  else
    match (x0) with
    | [] -> x0
    | hd1::tl1 -> x0
  
5.5960 false

([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] -> ( False )
    | hd'4::tl'4 ->
      (less_than
        ( x1, hd'4 ))
  then ( Cons x1 x0 )
    else
      match (x0) with
      | [] ->
        if
          match (x1) with
          | Z -> ( True )
          | Sn'2 ->
            ( False )
        then x0
          else
            ( Cons x1 x0
              )
      | hd1::tl1 ->
        ( Cons hd1
          (f0
            ( tl1, x1 ))
          )
  
45.4377 false

([], 2) -> [2];
([0], 1) -> [0, 1];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] ->
      (less_than
        (
          ( Succ ( Zero )
            ), x1 ))
    | hd'4::tl'4 ->
      (less_than
        ( x1, hd'4 ))
  then
    ( Cons x1
      if
        match (x0) with
        | [] -> ( True )
        | hd'2::tl'2 ->
          ( False )
      then ( Nil )
        else x0 )
    else
      match (x0) with
      | [] ->
        ( Cons x1 x0 )
      | hd1::tl1 ->
        if
          match (x1) with
          | Z -> ( True )
          | Sn'2 ->
            ( False )
        then x0
          else
            ( Cons hd1
              (f0
                ( tl1, x1
                  )) )
  
11.4925 false

([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([2], 0) -> [0, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | Z ->
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      ( Cons x1 x0 )
    
  | Sn2 ->
    match (n2) with
    | Z ->
      ( Cons x1 ( Nil ) )
    | Sn1 ->
      ( Cons n1
        ( Cons n2
          ( Cons x1
            ( Nil ) ) ) )
    
  
0.4738 false

([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] ->
      (less_than
        ( ( Zero ), x1 ))
    | hd'4::tl'4 ->
      (less_than
        ( x1, hd'4 ))
  then
    match (x1) with
    | Z -> ( Cons x1 x0 )
    | Sn1 ->
      if
        match (n1) with
        | Z -> ( True )
        | Sn'2 ->
          ( False )
      then
        (f0 ( x0, n1 ))
        else
          ( Cons x1
            (f0
              ( x0, n1 ))
            )
  else
    match (x0) with
    | [] -> x0
    | hd1::tl1 ->
      if
        match (x1) with
        | Z -> ( True )
        | Sn'2 ->
          ( False )
      then x0
        else
          ( Cons hd1
            (f0
              ( tl1, x1 ))
            )
  
12.7019 false

([], 0) -> [0];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] -> ( True )
    | hd'4::tl'4 ->
      (equal_to
        ( hd'4, ( Zero )
          ))
  then
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      if
        match (x1) with
        | Z -> ( True )
        | Sn'2 ->
          ( False )
      then x0
        else
          ( Cons hd1
            ( Cons x1 tl1
              ) )
  else
    match (x1) with
    | Z -> x0
    | Sn1 ->
      if
        match (n1) with
        | Z -> ( True )
        | Sn'2 ->
          ( False )
      then
        (f0 ( x0, n1 ))
        else
          ( Cons n1
            ( Cons x1
              ( Nil ) ) )
  
10.2027 false

([], 0) -> [0];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] ->
      (less_than
        (
          ( Succ ( Zero )
            ), x1 ))
    | hd'4::tl'4 ->
      (less_than
        ( x1, hd'4 ))
  then ( Cons x1 x0 )
    else
      match (x0) with
      | [] ->
        if
          match (x1) with
          | Z -> ( True )
          | Sn'2 ->
            ( False )
        then
          ( Cons x1 x0 )
          else x0
      | hd1::tl1 ->
        if
          match (x1) with
          | Z -> ( True )
          | Sn'2 ->
            ( False )
        then x0
          else
            ( Cons hd1
              (f0
                ( tl1, x1
                  )) )
  
18.3759 false

([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] -> ( True )
    | hd'4::tl'4 ->
      (equal_to
        ( hd'4, ( Zero )
          ))
  then
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'2::tl'2 ->
          ( False )
      then x0
        else
          ( Cons hd1
            (f0
              ( tl1, x1 ))
            )
  else
    match (x1) with
    | Z -> ( Cons x1 x0 )
    | Sn1 ->
      if
        match (n1) with
        | Z -> ( True )
        | Sn'2 ->
          ( False )
      then x0
        else
          ( Cons n1
            ( Cons x1
              ( Nil ) ) )
  
48.4090 false

([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] ->
      (less_than
        ( ( Zero ), x1 ))
    | hd'4::tl'4 ->
      (equal_to
        ( hd'4, x1 ))
  then
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 -> x0
  else
    match (x1) with
    | Z -> ( Cons x1 x0 )
    | Sn1 ->
      ( Cons n1
        ( Cons x1 ( Nil )
          ) )
  
6.7869 false

([], 1) -> [1];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 1) -> [1];
([0], 0) -> [0];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 1) -> [1];
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | Z ->
    match (x0) with
    | [] -> ( Nil )
    | hd1::tl1 ->
      ( Cons x1 x0 )
    
  | Sn2 ->
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      ( Cons hd1
        ( Cons x1 tl1 ) )
    
  
0.3829 false

([], 0) -> [0];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x1) with
    | Z -> ( True )
    | Sn'2 -> ( False )
  then
    match (x1) with
    | Z ->
      ( Cons x1 ( Nil ) )
    | Sn1 -> ( Nil )
  else
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( tl1, x1 ))
        )
  
70.8497 false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([2], 0) -> [0, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] -> ( True )
    | hd'4::tl'4 ->
      (less_than
        ( x1, hd'4 ))
  then
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      ( Cons x1 x0 )
  else
    match (x1) with
    | Z -> x0
    | Sn1 ->
      ( Cons n1
        ( Cons x1 ( Nil )
          ) )
  
21.1866 false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 1) -> [1];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
=================================
None
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
=================================
None
([], 0) -> [0];
([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] -> ( True )
    | hd'4::tl'4 ->
      (less_than
        ( x1, hd'4 ))
  then
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      ( Cons x1 x0 )
  else x0
13.7780 false

([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x1) with
    | Z ->
      match (x0) with
      | [] -> ( True )
      | hd'2::tl'2 ->
        ( False )
      
    | Sn'3 ->
      match (n'3) with
      | Z -> ( False )
      | Sn'2 -> ( True )
      
  then
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( tl1, x1 ))
        )
  else
    match (x1) with
    | Z -> x0
    | Sn1 ->
      ( Cons x1 ( Nil ) )
  
29.4164 false

([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    (less_than
      (
        ( Succ ( Zero ) ),
        x1 ))
    then
      match (x0) with
      | [] ->
        ( Cons x1 x0 )
      | hd1::tl1 ->
        ( Cons hd1
          (f0
            ( tl1, x1 ))
          )
    else
      match (x1) with
      | Z ->
        ( Cons x1 x0 )
      | Sn1 ->
        ( Cons x1 ( Nil )
          )
  
4.1236 false

([], 0) -> [0];
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 1) -> [1];
([], 2) -> [2];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] ->
      (equal_to
        ( x1, ( Zero ) ))
    | hd'4::tl'4 ->
      (less_than
        ( ( Zero ), hd'4
          ))
  then
    match (x1) with
    | Z -> ( Cons x1 x0 )
    | Sn1 ->
      if
        match (n1) with
        | Z -> ( True )
        | Sn'2 ->
          ( False )
      then x0
        else
          ( Cons n1
            ( Cons x1
              ( Nil ) ) )
  else
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'2::tl'2 ->
          ( False )
      then x0
        else
          ( Cons hd1
            (f0
              ( tl1, x1 ))
            )
  
27.5761 false

([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([0, 1], 0) -> [0, 1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] ->
      (equal_to
        ( x1, ( Zero ) ))
    | hd'4::tl'4 ->
      (less_than
        ( ( Zero ), hd'4
          ))
  then
    ( Cons x1
      if
        match (x1) with
        | Z -> ( True )
        | Sn'2 ->
          ( False )
      then x0
        else ( Nil ) )
    else
      match (x0) with
      | [] ->
        ( Cons x1 x0 )
      | hd1::tl1 ->
        if
          match (x1) with
          | Z -> ( True )
          | Sn'2 ->
            ( False )
        then x0
          else
            ( Cons hd1
              (f0
                ( tl1, x1
                  )) )
  
10.4264 false

([], 0) -> [0];
([], 1) -> [1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] ->
      (equal_to
        ( x1, ( Zero ) ))
    | hd'4::tl'4 ->
      (equal_to
        (
          ( Succ ( Zero )
            ), hd'4 ))
  then
    match (x1) with
    | Z -> ( Cons x1 x0 )
    | Sn1 ->
      if
        match (n1) with
        | Z -> ( True )
        | Sn'2 ->
          ( False )
      then x0
        else
          ( Cons n1
            ( Cons x1
              ( Nil ) ) )
  else
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      if
        match (tl1) with
        | [] -> ( True )
        | hd'2::tl'2 ->
          ( False )
      then ( Cons x1 x0 )
        else x0
  
19.9260 false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if
    match (x0) with
    | [] ->
      (equal_to
        ( x1, ( Zero ) ))
    | hd'4::tl'4 ->
      (less_than
        ( ( Zero ), hd'4
          ))
  then
    match (x1) with
    | Z -> ( Cons x1 x0 )
    | Sn1 ->
      if
        match (n1) with
        | Z -> ( True )
        | Sn'2 ->
          ( False )
      then x0
        else
          ( Cons n1
            ( Cons x1
              ( Nil ) ) )
  else
    match (x0) with
    | [] ->
      ( Cons x1 x0 )
    | hd1::tl1 ->
      if
        match (x1) with
        | Z -> ( True )
        | Sn'2 ->
          ( False )
      then x0
        else
          ( Cons hd1
            (f0
              ( tl1, x1 ))
            )
  
77.8591 false

([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
=================================
None
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 1) -> [1];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
([], 0) -> [0];
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
=================================
None
