(isEven, []) -> [];
=================================
fix f0.fun (x0, x1). x1
0.0002 false

(isEven, [0]) -> [0];
=================================
fix f0.fun (x0, x1). x1
0.0013 false

(isEven, [1]) -> [];
=================================
fix f0.fun (x0, x1).
  ( Nil )
0.0004 false

(isEven , [2]) -> [2];
=================================
fix f0.fun (x0, x1). x1
0.0006 false

(isEven, [0, 0]) -> [0, 0];
=================================
fix f0.fun (x0, x1). x1
0.0026 false

(isEven, [0, 1]) -> [0];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] ->
    ( Cons ( Zero ) x1 )
  | hd1::tl1 ->
    (f0 ( x0, tl1 ))
  
0.0020 false

(isEven, [1, 0, 1]) -> [0];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] ->
    ( Cons ( Zero ) x1 )
  | hd1::tl1 ->
    (f0 ( x0, tl1 ))
  
0.0038 false

(isNonzero, []) -> [];
=================================
fix f0.fun (x0, x1). x1
0.0002 false

(isNonzero, [0]) -> [];
=================================
fix f0.fun (x0, x1).
  ( Nil )
0.0004 false

(isEven, [1]) -> [];
(isNonzero, [0]) -> [];
=================================
fix f0.fun (x0, x1).
  ( Nil )
0.0014 false

(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> ( Nil )
  | hd1::tl1 ->
    ( Cons ( Zero )
      ( Nil ) )
  
0.0037 false

(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] ->
    ( Cons ( Zero ) x1 )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( x0, tl1 ))
        )
    
  
0.1588 false

(isEven , [2]) -> [2];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1) then x1
      else
        (f0 ( x0, tl1 ))
  
0.0612 false

(isEven, []) -> [];
(isEven, [0, 1]) -> [0];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 ( Nil ) )
  
0.0022 false

(isEven, [0]) -> [0];
(isEven, [1, 0, 1]) -> [0];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] ->
    ( Cons ( Zero ) x1 )
  | hd1::tl1 ->
    (f0 ( x0, tl1 ))
  
0.0032 false

(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 ( Nil ) )
  
0.0022 false

(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> ( Nil )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( x0, tl1 ))
        )
    
  
0.0808 false

(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> ( Nil )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 -> x1
    
  
0.0891 false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else tl1
  
0.0610 false

(isEven, []) -> [];
(isEven , [2]) -> [2];
(isNonzero, []) -> [];
=================================
fix f0.fun (x0, x1). x1
0.0018 false

(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then x1 else ( Nil )
0.3376 false

(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd2
        (f0 ( x0, tl1 ))
        )
    
  
0.0589 false

(isEven, []) -> [];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( x0, tl1 ))
        )
    
  
0.0842 false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then x1 else ( Nil )
0.1068 false

(isEven, [1]) -> [];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fix f0.fun (x0, x1).
  ( Nil )
0.0018 false

(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.7551 true

(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> ( Nil )
      | hd1::tl1 ->
        ( Cons hd1
          ( Nil ) )
    else ( Nil )
0.2188 false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          ) else tl1
  
0.4663 false

(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( x0, tl1 ))
        )
    
  
0.0871 false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1 ( Nil )
        )
    
  
0.0841 false

(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 -> x1
    
  
0.0955 false

(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
0.4215 false

(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] -> x1
    | hd1::tl1 ->
      ( Cons ( Zero )
        ( Nil ) )
    
  
0.1386 false

(isEven, [0]) -> [0];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else x1
1.1834 false

(isEven, []) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 ( Nil ) )
  
0.0028 false

(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] ->
    ( Cons ( Zero ) x1 )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons hd1
        (f0 ( x0, tl1 ))
        )
    
  
0.1543 false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 -> x1
    
  
0.0874 false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
0.7839 true

(isEven, [1]) -> [];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> ( Nil )
  | hd2::tl2 ->
    match (tl2) with
    | [] -> tl2
    | hd1::tl1 ->
      ( Cons ( Zero )
        ( Nil ) )
    
  
0.0984 false

(isEven, []) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
1.0541 false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
3.8413 false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else tl1
    else x1
0.4415 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    ( Cons hd1 ( Nil ) )
  
0.0036 false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
1.9265 false

(isEven, []) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd2::tl2 ->
    match (tl2) with
    | [] -> x1
    | hd1::tl1 ->
      ( Cons ( Zero )
        ( Nil ) )
    
  
0.1280 false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              ( Nil ) )
          else
            (f0
              ( x0, tl1 ))
    else x1
0.3659 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then x1
          else tl1
    else x1
0.2831 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then x1
          else tl1
    else ( Nil )
0.4827 false

(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
3.4691 false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else tl1
    else ( Nil )
5.5497 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else tl1
    else x1
1.8068 false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else x1
11.3797 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then x1
          else tl1
    else ( Nil )
2.6524 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  match (x1) with
  | [] -> x1
  | hd1::tl1 ->
    if (x0 hd1)
      then
        ( Cons hd1
          (f0
            ( x0, tl1 ))
          )
      else
        (f0 ( x0, tl1 ))
  
3.9474 true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else tl1
    else x1
1.9429 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              ( Nil ) )
          else tl1
    else ( Nil )
1.1118 false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else tl1
    else ( Nil )
2.7269 false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else x1
1.6876 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then x1
          else tl1
    else ( Nil )
0.4154 false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else tl1
    else ( Nil )
7.8366 false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
3.4941 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else tl1
    else ( Nil )
5.9916 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else x1
5.3923 false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
13.5348 false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
26.7941 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        ( Cons
          if (x0 hd1)
            then hd1
            else ( Zero )
          if (x0 hd1)
            then tl1
            else ( Nil )
          )
    else ( Nil )
5.1711 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              ( Nil ) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
6.5702 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else tl1
    else ( Nil )
3.8145 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else x1
2.5417 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else x1
12.0884 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
15.1805 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else tl1
    else ( Nil )
5.7208 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
10.0165 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              ( Nil ) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
5.4330 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
6.9778 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
23.9266 false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
6.5635 false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
26.5034 false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fail to find a solution
fix f0.fun (x0, x1).
  if (x0 ( Zero ))
    then
      match (x1) with
      | [] -> x1
      | hd1::tl1 ->
        if (x0 hd1)
          then
            ( Cons hd1
              (f0
                ( x0, tl1
                  )) )
          else
            (f0
              ( x0, tl1 ))
    else ( Nil )
30.7793 false

