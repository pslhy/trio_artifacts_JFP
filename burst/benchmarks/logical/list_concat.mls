type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

type llist =
  | LNil
  | LCons of list * llist

let append =
  fix (append : list -> list -> list) =
    fun (l1 : list) ->
      fun (l2 : list) ->
        match l1 with
        | Nil -> l2
        | Cons (h,t) -> Cons(h,append t l2)
;;

synth llist -> list satisfying

type bool =
  | True
  | False

let size =
  fix (size : list -> nat) =
    fun (x:list) ->
      match x with
        | Nil -> O
        | Cons (_,t) -> S (size t)
;;

let plus =
  fix (plus : nat -> nat -> nat) =
    fun (x1:nat) ->
      fun (x2:nat) ->
        match x1 with
        | O -> x2
        | S x1p -> S (plus x1p x2)
;;

let and =
  fun (b1:bool) ->
    fun (b2:bool) ->
      match b1 with
      | True -> b2
      | False -> False
;;

let fold =
  fix (fold : llist -> (nat -> list -> nat) -> nat -> nat) =
    fun (l1:llist) ->
      fun (f:nat -> list -> nat) ->
        fun (acc:nat) ->
          match l1 with
          | LNil -> acc
          | LCons (h,t) -> fold t f (f acc h)
;;

let add =
  fix (add : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> n2
        | S n1p -> S (add n1p n2)
;;

let fullsize =
  fun (y:llist) ->
    (fold y (fun (n:nat) -> (fun (l:list) -> (add n (size l)))) 0)
;;

fun (in:llist) -> (fun (out : list) ->
    (size out) == (fullsize in))
