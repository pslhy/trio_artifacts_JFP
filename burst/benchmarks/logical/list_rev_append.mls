type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

let append =
  fix (append : list -> list -> list) =
    fun (l1 : list) ->
      fun (l2 : list) ->
        match l1 with
        | Nil -> l2
        | Cons (h,t) -> Cons(h,append t l2)
;;

synth list -> list satisfying

type bool =
  | True
  | False

type opt =
  | None
  | Some of nat

let size =
  fix (size : list -> nat) =
    fun (x:list) ->
      match x with
        | Nil -> O
        | Cons (_, t) -> S (size t)
;;

let hd =
  fix (hd: list -> opt) =
    fun (x:list) ->
      match x with
      | Nil -> None
      | Cons (n, _) -> Some n
;;
let last =
  fix (last : list -> opt) =
    fun (x:list) ->
      match x with
      | Nil -> None
      | Cons (n, Nil) -> Some n
      | Cons (_, t) -> last t
;;

let and =
  fun (b1:bool) ->
    fun (b2:bool) ->
      match b1 with
      | True -> b2
      | False -> False
;;

fun (input:list) -> (fun (out : list) ->
    (and ((size out) == (size input)) ((hd input) == (last out))))
