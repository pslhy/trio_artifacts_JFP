type bool =
  | True
  | False

type list =
  | Nil
  | Cons of bool * list

let not =
  fun (b:bool) ->
    match b with
    | True -> False
    | False -> True
;;

synth list -> bool satisfying

let isEven =
  fix (isEven: list -> bool) =
    fun (x:list) ->
      match x with
        | Nil -> True
        | Cons (_, t) -> (isEven t) == False
;;

let filter =
  fix (filter: list -> list) =
    fun (l:list) ->
      match l with
        | Nil -> Nil
        | Cons (True, t) -> Cons (True, filter t)
        | Cons (False, t) -> filter t
;;

fun (input:list) -> (fun (out : bool) ->
    out == (isEven (filter input)))
