type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

type bool =
  | True
  | False

let add =
  fix (add : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> n2
        | S n1p -> S (add n1p n2)
;;

let isOdd =
  fix (isOdd : nat -> bool) =
    fun (x1 : nat) ->
      match x1 with
      | O -> False
      | S x1p ->
        (match x1p with
         | O -> True
         | S x1pp -> isOdd x1pp)
;;

let countOdd =
  fun (n1:nat) ->
    fun (n2:nat) ->
      match isOdd n2 with
      | True -> S n1
      | False -> n1
;;

synth (nat -> nat -> nat) -> nat -> list -> nat satisfying

[add,0,Nil] -> 0,
[add,0,Cons(2,Cons(1,Nil))] -> 3,
[add,0,Cons(3,Cons(2,Cons(1,Nil)))] -> 6,