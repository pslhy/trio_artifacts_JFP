type token =
    WITH
  | WILDCARD
  | VAL
  | UNIT
  | UID of string
  | TYPE
  | SYNTH
  | STR of string
  | STAR
  | SIG
  | SEMI
  | SATISFYING
  | RPAREN
  | RBRACKET
  | PIPE
  | OF
  | NEQ
  | MU
  | MATCH
  | LPAREN
  | LID of string
  | LET
  | LBRACKET
  | INT of int
  | INCLUDE
  | FUN
  | FORALL
  | FIX
  | FATEQ
  | EQUIV
  | EQ
  | EOF
  | END
  | DOT
  | COMMA
  | COLON
  | BINDING
  | ARR
val appify : Lang.Expr.t -> Lang.Expr.t list -> Lang.Expr.t
val mk_unctor_or_ctor_by_name : string -> Lang.Expr.t -> Lang.Expr.t
val menhir_begin_marker : int
val xv_unprocessed_problem : Problem.t_unprocessed
val xv_typ_variant : Type.t
val xv_typ_unit : Type.t
val xv_typ_tuple_list_one : Type.t list
val xv_typ_tuple_list : Type.t list
val xv_typ_tuple : Type.t
val xv_typ_single_variant : MyStdLib.Id.t * Type.t
val xv_typ_paren : Type.t
val xv_typ_non_variant : Type.t
val xv_typ_non_arrow : Type.t
val xv_typ_mu : Type.t
val xv_typ_base : Type.t
val xv_typ_arrow : Type.t
val xv_typ : Type.t
val xv_spec : Problem.unprocessed_spec
val xv_pattern_list : Lang.Pattern.t list
val xv_pattern : Lang.Pattern.t
val xv_nonempty_exp_list : Lang.Expr.t list
val xv_nonempty_examples : (Lang.Expr.t list * Lang.Expr.t) list
val xv_imports_decls_start : string list * Declaration.t list
val xv_imports_decls : string list * Declaration.t list
val xv_imports : string list
val xv_exp_list : Lang.Expr.t list
val xv_exp_comma_list_one : Lang.Expr.t list
val xv_exp_base : Lang.Expr.t
val xv_exp_app_list : Lang.Expr.t list
val xv_exp_app : Lang.Expr.t
val xv_exp : Lang.Expr.t
val xv_examples : (Lang.Expr.t list * Lang.Expr.t) list
val xv_example : Lang.Expr.t list * Lang.Expr.t
val xv_decl_list : Declaration.t list
val xv_decl : Declaration.t
val xv_branches : (Lang.Pattern.t * Lang.Expr.t) list
val xv_branch : Lang.Pattern.t * Lang.Expr.t
val xv_arg : Param.t
val menhir_end_marker : int
