# 1 "src/lexer2.mll"
 
open Core
open Lexing
open Parser2

exception Lexer_error of string

let reserved_words : (string * Parser2.token) list =
  [ ("fun", FUN)
  ; ("match", MATCH)
  ; ("with", WITH)
  ; ("type", TYPE)
  ; ("of", OF)
  ; ("equiv", EQUIV)
  ; ("let", LET)
  ; ("satisfying", SATISFYING)
  ; ("include", INCLUDE)
  ; ("synth", SYNTH)
  (*; ("in", IN)*)
  (*; ("rec", REC)*)
  ; ("unit", UNIT)
  ; ("val", VAL)
  ; ("binding", BINDING)
  ; ("mu", MU)
  ; ("fix", FIX)
  ]

let symbols : (string * Parser2.token) list =
  [ ("=", EQ)
    (*("?", HOLE)*)
    (*; ("|>", IMPLIES)*)
  ; ("->", ARR)
  ; ("_", WILDCARD)
  ; ("==", FATEQ)
  ; ("!=", NEQ)
  ; (".", DOT)
  ; (",", COMMA)
  ; (":", COLON)
  ; (";", SEMI)
  ; ("*", STAR)
  ; ("|", PIPE)
  ; ("(", LPAREN)
  ; (")", RPAREN)
  (*; ("{", LBRACE)
    ; ("}", RBRACE)*)
  ; ("[", LBRACKET)
  ; ("]", RBRACKET)
      (*; ("_", UNDERSCORE)*)
  ]

let create_token lexbuf =
  let str = lexeme lexbuf in
  match List.Assoc.find ~equal:String.equal reserved_words str with
  | None   -> LID str
  | Some t -> t

let create_symbol lexbuf =
  let str = lexeme lexbuf in
  match List.Assoc.find ~equal:String.equal symbols str with
  | None   -> raise @@ Lexer_error ("Unexpected token: " ^ str)
  | Some t -> t

(*let create_proj lexbuf =
  let str = lexeme lexbuf in
  let len = String.length str in
  PROJ (int_of_string (String.sub str ~pos:1 ~len:(len - 1)))*)

let remove_quotes lexbuf =
  let str = lexeme lexbuf in
  let len = String.length str in
  String.sub str ~pos:1 ~len:(len-2)

# 75 "src/lexer2.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\246\255\002\000\001\000\248\255\065\000\002\000\080\000\
    \162\000\003\000\001\000\252\255\001\000\237\000\247\000\255\255\
    \253\255\219\000\220\000\247\255\221\000\131\000\251\255\252\255\
    \253\255\005\000\019\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\009\000\009\000\255\255\007\000\007\000\006\000\
    \005\000\004\000\003\000\255\255\007\000\001\000\009\000\255\255\
    \255\255\255\255\255\255\255\255\008\000\255\255\255\255\255\255\
    \255\255\002\000\002\000\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\017\000\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\017\000\017\000\000\000\017\000\024\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\009\000\011\000\011\000\009\000\010\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \009\000\003\000\002\000\009\000\019\000\000\000\000\000\000\000\
    \012\000\004\000\004\000\016\000\004\000\014\000\004\000\028\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\004\000\004\000\027\000\005\000\004\000\004\000\
    \004\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\004\000\000\000\004\000\018\000\004\000\
    \000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\004\000\006\000\004\000\004\000\004\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\000\000\000\000\000\000\023\000\000\000\000\000\
    \000\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\025\000\000\000\026\000\000\000\007\000\
    \000\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\019\000\020\000\019\000\
    \015\000\008\000\255\255\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\000\000\000\000\000\000\000\000\004\000\000\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\010\000\009\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\009\000\002\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\012\000\000\000\000\000\000\000\025\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\026\000\000\000\003\000\000\000\
    \006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\002\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\005\000\005\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\255\255\255\255\255\255\021\000\255\255\255\255\
    \255\255\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\021\000\255\255\021\000\255\255\007\000\
    \255\255\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\017\000\018\000\020\000\
    \000\000\008\000\002\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\255\255\255\255\255\255\255\255\014\000\255\255\017\000\
    \018\000\020\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\021\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\017\000\018\000\020\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 84 "src/lexer2.mll"
          ( EOF )
# 243 "src/lexer2.ml"

  | 1 ->
# 85 "src/lexer2.mll"
        ( INT (int_of_string (lexeme lexbuf)) )
# 248 "src/lexer2.ml"

  | 2 ->
# 87 "src/lexer2.mll"
         (comments 0 lexbuf)
# 253 "src/lexer2.ml"

  | 3 ->
# 88 "src/lexer2.mll"
            ( new_line lexbuf; token lexbuf )
# 258 "src/lexer2.ml"

  | 4 ->
# 89 "src/lexer2.mll"
                ( token lexbuf )
# 263 "src/lexer2.ml"

  | 5 ->
# 90 "src/lexer2.mll"
                                         ( create_token lexbuf )
# 268 "src/lexer2.ml"

  | 6 ->
# 91 "src/lexer2.mll"
                                         ( UID (lexeme lexbuf) )
# 273 "src/lexer2.ml"

  | 7 ->
# 94 "src/lexer2.mll"
    ( create_symbol lexbuf )
# 278 "src/lexer2.ml"

  | 8 ->
# 95 "src/lexer2.mll"
           ( STR (remove_quotes lexbuf) )
# 283 "src/lexer2.ml"

  | 9 ->
let
# 96 "src/lexer2.mll"
         c
# 289 "src/lexer2.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 96 "src/lexer2.mll"
           ( raise @@ Lexer_error ("Unexpected character: " ^ Char.escaped c) )
# 293 "src/lexer2.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comments level lexbuf =
   __ocaml_lex_comments_rec level lexbuf 21
and __ocaml_lex_comments_rec level lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 99 "src/lexer2.mll"
         ( if level = 0 then token lexbuf
	   else comments (level-1) lexbuf )
# 306 "src/lexer2.ml"

  | 1 ->
# 101 "src/lexer2.mll"
         ( comments (level+1) lexbuf)
# 311 "src/lexer2.ml"

  | 2 ->
# 102 "src/lexer2.mll"
             ( comments level lexbuf )
# 316 "src/lexer2.ml"

  | 3 ->
# 103 "src/lexer2.mll"
         ( comments level lexbuf )
# 321 "src/lexer2.ml"

  | 4 ->
# 104 "src/lexer2.mll"
         ( failwith "Comments are not closed" )
# 326 "src/lexer2.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comments_rec level lexbuf __ocaml_lex_state

;;

